// Generated by Apple Swift version 5.3.1 (swiftlang-1200.0.41 clang-1200.0.32.8)
#ifndef STRIPE_SWIFT_H
#define STRIPE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import PassKit;
@import SafariServices;
@import StripeApplePay;
@import StripeCore;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Stripe",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif





@interface NSError (SWIFT_EXTENSION(Stripe))
/// Creates an NSError object from a given Stripe API json response.
/// \param jsonDictionary The root dictionary from the JSON response.
///
///
/// returns:
/// An NSError object with the error information from the JSON response,
/// or nil if there was no error information included in the JSON dictionary.
+ (NSError * _Nullable)stp_errorFromStripeResponse:(NSDictionary * _Nullable)jsonDictionary SWIFT_WARN_UNUSED_RESULT;
@end




/// Objects conforming to STPAPIResponseDecodable can be automatically converted
/// from a JSON dictionary that was returned from the Stripe API.
SWIFT_PROTOCOL("_TtP6Stripe23STPAPIResponseDecodable_")
@protocol STPAPIResponseDecodable <NSObject>
/// Parses an response from the Stripe API (in JSON format; represented as
/// an <code>NSDictionary</code>) into an instance of the class.
/// \param response The JSON dictionary that represents an object of this type
///
///
/// returns:
/// The object represented by the JSON dictionary, or nil if the object
/// could not be decoded (i.e. if one of its <code>requiredFields</code> is nil).
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
/// The raw JSON response used to create the object. This can be useful for accessing
/// fields that haven’t yet been made into native properties in the SDK.
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
@end

@class UIFont;
@class UIColor;

/// STPFormTextFieldContainer is a protocol that views can conform to to provide customization properties for the field form views that they contain.
SWIFT_PROTOCOL("_TtP6Stripe25STPFormTextFieldContainer_")
@protocol STPFormTextFieldContainer <NSObject>
/// The font used in each child field. Default is <code>.body</code>.
@property (nonatomic, strong) UIFont * _Nonnull formFont;
/// The text color to be used when entering valid text. Default is <code>.label</code> on iOS 13.0 and later and <code>.darkText</code> on earlier versions.
@property (nonatomic, strong) UIColor * _Nonnull formTextColor;
/// The text color to be used when the user has entered invalid information,
/// such as an invalid card number.
/// Default is <code>.red</code>.
@property (nonatomic, strong) UIColor * _Nonnull formTextErrorColor;
/// The text placeholder color used in each child field.
/// This will also set the color of the card placeholder icon.
/// Default is <code>.placeholderText</code> on iOS 13.0 and <code>.lightGray</code> on earlier versions.
@property (nonatomic, strong) UIColor * _Nonnull formPlaceholderColor;
/// The cursor color for the field.
/// This is a proxy for the view’s tintColor property, exposed for clarity only
/// (in other words, calling setCursorColor is identical to calling setTintColor).
@property (nonatomic, strong) UIColor * _Nonnull formCursorColor;
/// The keyboard appearance for the field.
/// Default is <code>.default</code>.
@property (nonatomic) UIKeyboardAppearance formKeyboardAppearance;
@end

@class UITextField;
@class NSCoder;

/// STPMultiFormTextField is a lightweight UIView that wraps a collection of STPFormTextFields and can automatically move to the next form field when one is completed.
SWIFT_CLASS("_TtC6Stripe21STPMultiFormTextField")
@interface STPMultiFormTextField : UIView <STPFormTextFieldContainer, UITextFieldDelegate>
/// :nodoc:
- (BOOL)textField:(UITextField * _Nonnull)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
/// Calling this method will make the next incomplete STPFormTextField in <code>formTextFields</code> become the first responder.
/// If all of the form text fields are already complete, then the last field in <code>formTextFields</code> will become the first responder.
- (void)focusNextForm;
/// :nodoc:
@property (nonatomic, readonly) BOOL canResignFirstResponder;
/// :nodoc:
- (BOOL)resignFirstResponder SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
@property (nonatomic, readonly) BOOL isFirstResponder;
/// :nodoc:
@property (nonatomic, readonly) BOOL canBecomeFirstResponder;
/// :nodoc:
- (BOOL)becomeFirstResponder SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField;
/// :nodoc:
- (void)textFieldDidBeginEditing:(UITextField * _Nonnull)textField;
/// :nodoc:
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) UIFont * _Nonnull formFont;
@property (nonatomic, strong) UIColor * _Nonnull formTextColor;
@property (nonatomic, strong) UIColor * _Nonnull formTextErrorColor;
@property (nonatomic, strong) UIColor * _Nonnull formPlaceholderColor;
@property (nonatomic, strong) UIColor * _Nonnull formCursorColor;
@property (nonatomic) UIKeyboardAppearance formKeyboardAppearance;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@protocol STPAUBECSDebitFormViewDelegate;
@class STPPaymentMethodParams;
@class UITextView;

/// STPAUBECSDebitFormView is a subclass of UIControl that contains all of the necessary fields and legal text for collecting AU BECS Debit payments.
/// For additional customization options - seealso: STPFormTextFieldContainer
SWIFT_CLASS("_TtC6Stripe22STPAUBECSDebitFormView")
@interface STPAUBECSDebitFormView : STPMultiFormTextField <UITextViewDelegate>
/// \param companyName The name of the company collecting AU BECS Debit payment details information. This will be used to provide the required service agreement text. - seealso: https://stripe.com/au-becs/legal
///
- (nonnull instancetype)initWithCompanyName:(NSString * _Nonnull)companyName OBJC_DESIGNATED_INITIALIZER;
/// Use initWithCompanyName instead.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// Use initWithCompanyName instead.
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
/// The background color for the form text fields. Defaults to .systemBackground on iOS 13.0 and later, .white on earlier iOS versions.
@property (nonatomic, strong) UIColor * _Nonnull formBackgroundColor;
/// The delegate to inform about changes to this STPAUBECSDebitFormView instance.
@property (nonatomic, weak) id <STPAUBECSDebitFormViewDelegate> _Nullable becsDebitFormDelegate;
/// This property will return a non-nil value if and only if the form is in a complete state. The <code>STPPaymentMethodParams</code> instance
/// will have it’s <code>auBECSDebit</code> property populated with the values input in this form.
@property (nonatomic, readonly, strong) STPPaymentMethodParams * _Nullable paymentMethodParams;
/// :nodoc:
- (CGSize)systemLayoutSizeFittingSize:(CGSize)targetSize withHorizontalFittingPriority:(UILayoutPriority)horizontalFittingPriority verticalFittingPriority:(UILayoutPriority)verticalFittingPriority SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (BOOL)textView:(UITextView * _Nonnull)textView shouldInteractWithURL:(NSURL * _Nonnull)URL inRange:(NSRange)characterRange interaction:(UITextItemInteraction)interaction SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
@property (nonatomic, strong) UIFont * _Nonnull formFont;
/// :nodoc:
@property (nonatomic, strong) UIColor * _Nonnull formTextColor;
@end



/// STPAUBECSDebitFormViewDelegate provides methods for STPAUBECSDebitFormView to inform its delegate
/// of when the form has been completed.
SWIFT_PROTOCOL("_TtP6Stripe30STPAUBECSDebitFormViewDelegate_")
@protocol STPAUBECSDebitFormViewDelegate <NSObject>
/// Called when the form transitions from complete to incomplete or vice-versa.
/// \param form The <code>STPAUBECSDebitFormView</code> instance whose completion state has changed
///
/// \param complete Whether the form is considered complete and can generate an <code>STPPaymentMethodParams</code> instance.
///
- (void)auBECSDebitForm:(STPAUBECSDebitFormView * _Nonnull)form didChangeToStateComplete:(BOOL)complete;
@end

@class STPPaymentCardTextField;

/// This protocol allows a delegate to be notified when a payment text field’s
/// contents change, which can in turn be used to take further actions depending
/// on the validity of its contents.
SWIFT_PROTOCOL("_TtP6Stripe31STPPaymentCardTextFieldDelegate_")
@protocol STPPaymentCardTextFieldDelegate <NSObject>
@optional
/// Called when either the card number, expiration, or CVC changes. At this point,
/// one can call <code>isValid</code> on the text field to determine, for example,
/// whether or not to enable a button to submit the form. Example:
/// <ul>
///   <li>
///     (void)paymentCardTextFieldDidChange:(STPPaymentCardTextField *)textField {
///     self.paymentButton.enabled = textField.isValid;
///     }
///   </li>
/// </ul>
/// \param textField the text field that has changed
///
- (void)paymentCardTextFieldDidChange:(STPPaymentCardTextField * _Nonnull)textField;
/// Called when editing begins in the text field as a whole.
/// After receiving this callback, you will always also receive a callback for which
/// specific subfield of the view began editing.
- (void)paymentCardTextFieldDidBeginEditing:(STPPaymentCardTextField * _Nonnull)textField;
/// Notification that the user pressed the <code>return</code> key after completely filling
/// out the STPPaymentCardTextField with data that passes validation.
/// The Stripe SDK is going to <code>resignFirstResponder</code> on the <code>STPPaymentCardTextField</code>
/// to dismiss the keyboard after this delegate method returns, however if your app wants
/// to do something more (ex: move first responder to another field), this is a good
/// opportunity to do that.
/// This is delivered <em>before</em> the corresponding <code>paymentCardTextFieldDidEndEditing:</code>
/// \param textField The STPPaymentCardTextField that was being edited when the user pressed return
///
- (void)paymentCardTextFieldWillEndEditingForReturn:(STPPaymentCardTextField * _Nonnull)textField;
/// Called when editing ends in the text field as a whole.
/// This callback is always preceded by an callback for which
/// specific subfield of the view ended its editing.
- (void)paymentCardTextFieldDidEndEditing:(STPPaymentCardTextField * _Nonnull)textField;
/// Called when editing begins in the payment card field’s number field.
- (void)paymentCardTextFieldDidBeginEditingNumber:(STPPaymentCardTextField * _Nonnull)textField;
/// Called when editing ends in the payment card field’s number field.
- (void)paymentCardTextFieldDidEndEditingNumber:(STPPaymentCardTextField * _Nonnull)textField;
/// Called when editing begins in the payment card field’s CVC field.
- (void)paymentCardTextFieldDidBeginEditingCVC:(STPPaymentCardTextField * _Nonnull)textField;
/// Called when editing ends in the payment card field’s CVC field.
- (void)paymentCardTextFieldDidEndEditingCVC:(STPPaymentCardTextField * _Nonnull)textField;
/// Called when editing begins in the payment card field’s expiration field.
- (void)paymentCardTextFieldDidBeginEditingExpiration:(STPPaymentCardTextField * _Nonnull)textField;
/// Called when editing ends in the payment card field’s expiration field.
- (void)paymentCardTextFieldDidEndEditingExpiration:(STPPaymentCardTextField * _Nonnull)textField;
/// Called when editing begins in the payment card field’s ZIP/postal code field.
- (void)paymentCardTextFieldDidBeginEditingPostalCode:(STPPaymentCardTextField * _Nonnull)textField;
/// Called when editing ends in the payment card field’s ZIP/postal code field.
- (void)paymentCardTextFieldDidEndEditingPostalCode:(STPPaymentCardTextField * _Nonnull)textField;
@end

@class STPTheme;
@class NSBundle;

/// This is the base class for all Stripe view controllers. It is intended for use
/// only by Stripe classes, you should not subclass it yourself in your app.
/// It theming, back/cancel button management, and other shared logic for
/// Stripe view controllers.
SWIFT_CLASS("_TtC6Stripe21STPCoreViewController")
@interface STPCoreViewController : UIViewController
/// A convenience initializer; equivalent to calling <code>init(theme: STPTheme.defaultTheme)</code>.
- (nonnull instancetype)init;
/// Initializes a new view controller with the specified theme
/// \param theme The theme to use to inform the view controller’s visual appearance. - seealso: STPTheme
///
- (nonnull instancetype)initWithTheme:(STPTheme * _Nullable)theme OBJC_DESIGNATED_INITIALIZER;
/// Passes through to the default UIViewController behavior for this initializer,
/// and then also sets the default theme as in <code>init</code>
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
/// Passes through to the default UIViewController behavior for this initializer,
/// and then also sets the default theme as in <code>init</code>
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;
/// :nodoc:
- (void)viewWillDisappear:(BOOL)animated;
/// :nodoc:
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
@end

@class UIScrollView;

/// This is the base class for all Stripe scroll view controllers. It is intended
/// for use only by Stripe classes, you should not subclass it yourself in your app.
SWIFT_CLASS("_TtC6Stripe27STPCoreScrollViewController")
@interface STPCoreScrollViewController : STPCoreViewController
/// This returns the scroll view being managed by the view controller
@property (nonatomic, strong) UIScrollView * _Nonnull scrollView;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewDidLayoutSubviews;
- (nonnull instancetype)initWithTheme:(STPTheme * _Nullable)theme OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UITableView;

/// This is the base class for all Stripe scroll view controllers. It is intended
/// for use only by Stripe classes, you should not subclass it yourself in your app.
/// It inherits from STPCoreScrollViewController and changes the type of the
/// created scroll view to UITableView, as well as other shared table view logic.
SWIFT_CLASS("_TtC6Stripe26STPCoreTableViewController")
@interface STPCoreTableViewController : STPCoreScrollViewController
/// This points to the same object as <code>STPCoreScrollViewController</code>’s <code>scrollView</code>
/// property but with the type cast to <code>UITableView</code>
@property (nonatomic, readonly, strong) UITableView * _Nullable tableView;
/// :nodoc:
- (void)viewWillAppear:(BOOL)animated;
/// :nodoc:
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithTheme:(STPTheme * _Nullable)theme OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class STPPaymentConfiguration;
@protocol STPAddCardViewControllerDelegate;
@class STPUserInformation;
@class STPAPIClient;
@class UITableViewCell;
@protocol UIViewControllerTransitionCoordinator;

/// This view controller contains a credit card entry form that the user can fill out. On submission, it will use the Stripe API to convert the user’s card details to a Stripe token. It renders a right bar button item that submits the form, so it must be shown inside a <code>UINavigationController</code>.
SWIFT_CLASS("_TtC6Stripe24STPAddCardViewController")
@interface STPAddCardViewController : STPCoreTableViewController <STPPaymentCardTextFieldDelegate, UITableViewDataSource, UITableViewDelegate>
/// A convenience initializer; equivalent to calling <code>init(configuration: STPPaymentConfiguration.shared, theme: STPTheme.defaultTheme)</code>.
- (nonnull instancetype)init;
/// Initializes a new <code>STPAddCardViewController</code> with the provided configuration and theme. Don’t forget to set the <code>delegate</code> property after initialization.
/// \param configuration The configuration to use (this determines the Stripe publishable key to use, the required billing address fields, whether or not to use SMS autofill, etc). - seealso: STPPaymentConfiguration
///
/// \param theme The theme to use to inform the view controller’s visual appearance. - seealso: STPTheme
///
- (nonnull instancetype)initWithConfiguration:(STPPaymentConfiguration * _Nonnull)configuration theme:(STPTheme * _Nonnull)theme OBJC_DESIGNATED_INITIALIZER;
/// The view controller’s delegate. This must be set before showing the view controller in order for it to work properly. - seealso: STPAddCardViewControllerDelegate
@property (nonatomic, weak) id <STPAddCardViewControllerDelegate> _Nullable delegate;
/// You can set this property to pre-fill any information you’ve already collected from your user. - seealso: STPUserInformation.h
@property (nonatomic, strong) STPUserInformation * _Nullable prefilledInformation;
/// Provide this view controller with a footer view.
/// When the footer view needs to be resized, it will be sent a
/// <code>sizeThatFits:</code> call. The view should respond correctly to this method in order
/// to be sized and positioned properly.
@property (nonatomic, strong) UIView * _Nullable customFooterView;
/// The API Client to use to make requests.
/// Defaults to <code>STPAPIClient.shared</code>.
@property (nonatomic, strong) STPAPIClient * _Nonnull apiClient;
/// Use init: or initWithConfiguration:theme:
- (nonnull instancetype)initWithTheme:(STPTheme * _Nullable)theme SWIFT_UNAVAILABLE;
/// Use init: or initWithConfiguration:theme:
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
/// Use init: or initWithConfiguration:theme:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
/// :nodoc:
- (CGFloat)tableView:(UITableView * _Nonnull)tableView estimatedHeightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)viewDidLayoutSubviews;
/// :nodoc:
- (void)updateAppearance;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)handleCancelTapped:(id _Nullable)sender;
- (void)paymentCardTextFieldDidChange:(STPPaymentCardTextField * _Nonnull)textField;
- (void)paymentCardTextFieldWillEndEditingForReturn:(STPPaymentCardTextField * _Nonnull)textField;
- (void)paymentCardTextFieldDidBeginEditingCVC:(STPPaymentCardTextField * _Nonnull)textField;
- (void)paymentCardTextFieldDidEndEditingCVC:(STPPaymentCardTextField * _Nonnull)textField;
- (void)paymentCardTextFieldDidBeginEditing:(STPPaymentCardTextField * _Nonnull)textField;
/// :nodoc:
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)tableView:(UITableView * _Nonnull)tableView willDisplayCell:(UITableViewCell * _Nonnull)cell forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
/// :nodoc:
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForFooterInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (UIView * _Nullable)tableView:(UITableView * _Nonnull)tableView viewForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (UIView * _Nullable)tableView:(UITableView * _Nonnull)tableView viewForFooterInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
@end


@class STPPaymentMethod;
@class STPToken;
@class STPSource;

/// An <code>STPAddCardViewControllerDelegate</code> is notified when an <code>STPAddCardViewController</code>
/// successfully creates a card token or is cancelled. It has internal error-handling
/// logic, so there’s no error case to deal with.
SWIFT_PROTOCOL("_TtP6Stripe32STPAddCardViewControllerDelegate_")
@protocol STPAddCardViewControllerDelegate <NSObject>
/// Called when the user cancels adding a card. You should dismiss (or pop) the
/// view controller at this point.
/// \param addCardViewController the view controller that has been cancelled
///
- (void)addCardViewControllerDidCancel:(STPAddCardViewController * _Nonnull)addCardViewController;
/// This is called when the user successfully adds a card and Stripe returns a
/// Payment Method.
/// You should send the PaymentMethod to your backend to store it on a customer, and then
/// call the provided <code>completion</code> block when that call is finished. If an error
/// occurs while talking to your backend, call <code>completion(error)</code>, otherwise,
/// dismiss (or pop) the view controller.
/// \param addCardViewController the view controller that successfully created a token
///
/// \param paymentMethod the Payment Method that was created. - seealso: STPPaymentMethod
///
/// \param completion call this callback when you’re done sending the token to your backend
///
- (void)addCardViewController:(STPAddCardViewController * _Nonnull)addCardViewController didCreatePaymentMethod:(STPPaymentMethod * _Nonnull)paymentMethod completion:(void (^ _Nonnull)(NSError * _Nullable))completion;
@optional
/// This method is deprecated as of v16.0.0 (https://github.com/stripe/stripe-ios/blob/master/MIGRATING.md#migrating-from-versions–1600).
/// To use this class, migrate your integration from Charges to PaymentIntents. See https://stripe.com/docs/payments/payment-intents/migration/charges#read
- (void)addCardViewController:(STPAddCardViewController * _Nonnull)addCardViewController didCreateToken:(STPToken * _Nonnull)token completion:(SWIFT_NOESCAPE void (^ _Nonnull)(NSError * _Nullable))completion SWIFT_DEPRECATED_MSG("Use addCardViewController(_:didCreatePaymentMethod:completion:) instead and migrate your integration to PaymentIntents. See https://stripe.com/docs/payments/payment-intents/migration/charges#read", "addCardViewController:didCreatePaymentMethod:completion:");
/// This method is deprecated as of v16.0.0 (https://github.com/stripe/stripe-ios/blob/master/MIGRATING.md#migrating-from-versions–1600).
/// To use this class, migrate your integration from Charges to PaymentIntents. See https://stripe.com/docs/payments/payment-intents/migration/charges#read
- (void)addCardViewController:(STPAddCardViewController * _Nonnull)addCardViewController didCreateSource:(STPSource * _Nonnull)source completion:(SWIFT_NOESCAPE void (^ _Nonnull)(NSError * _Nullable))completion SWIFT_DEPRECATED_MSG("Use addCardViewController(_:didCreatePaymentMethod:completion:) instead and migrate your integration to PaymentIntents. See https://stripe.com/docs/payments/payment-intents/migration/charges#read", "addCardViewController:didCreatePaymentMethod:completion:");
@end

@class PKShippingMethod;
@class STPPaymentMethodBillingDetails;
@class PKContact;
@class CNContact;
enum STPBillingAddressFields : NSUInteger;
@class STPContactField;

/// STPAddress Contains an address as represented by the Stripe API.
SWIFT_CLASS("_TtC6Stripe10STPAddress")
@interface STPAddress : NSObject
/// The user’s full name (e.g. “Jane Doe”)
@property (nonatomic, copy) NSString * _Nullable name;
/// The first line of the user’s street address (e.g. “123 Fake St”)
@property (nonatomic, copy) NSString * _Nullable line1;
/// The apartment, floor number, etc of the user’s street address (e.g. “Apartment 1A”)
@property (nonatomic, copy) NSString * _Nullable line2;
/// The city in which the user resides (e.g. “San Francisco”)
@property (nonatomic, copy) NSString * _Nullable city;
/// The state in which the user resides (e.g. “CA”)
@property (nonatomic, copy) NSString * _Nullable state;
/// The postal code in which the user resides (e.g. “90210”)
@property (nonatomic, copy) NSString * _Nullable postalCode;
/// The ISO country code of the address (e.g. “US”)
@property (nonatomic, copy) NSString * _Nullable country;
/// The phone number of the address (e.g. “8885551212”)
@property (nonatomic, copy) NSString * _Nullable phone;
/// The email of the address (e.g. “jane@doe.com”)
@property (nonatomic, copy) NSString * _Nullable email;
@property (nonatomic, copy) NSDictionary * _Nonnull additionalAPIParameters;
/// When creating a charge on your backend, you can attach shipping information
/// to prevent fraud on a physical good. You can use this method to turn your user’s
/// shipping address and selected shipping method into a hash suitable for attaching
/// to a charge. You should pass this to your backend, and use it as the <code>shipping</code>
/// parameter when creating a charge.
/// seealso:
/// https://stripe.com/docs/api#create_charge-shipping
/// \param address The user’s shipping address. If nil, this method will return nil.
///
/// \param method The user’s selected shipping method. May be nil.
///
+ (NSDictionary * _Nullable)shippingInfoForChargeWithAddress:(STPAddress * _Nullable)address shippingMethod:(PKShippingMethod * _Nullable)method SWIFT_WARN_UNUSED_RESULT;
/// Initializes an empty STPAddress.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes a new STPAddress with data from STPPaymentMethodBillingDetails.
/// \param billingDetails The STPPaymentMethodBillingDetails instance you want to populate the STPAddress from.
///
///
/// returns:
/// A new STPAddress instance with data copied from the passed in billing details.
- (nonnull instancetype)initWithPaymentMethodBillingDetails:(STPPaymentMethodBillingDetails * _Nonnull)billingDetails OBJC_DESIGNATED_INITIALIZER;
/// Initializes a new STPAddress with data from an PassKit contact.
/// \param contact The PassKit contact you want to populate the STPAddress from.
///
///
/// returns:
/// A new STPAddress instance with data copied from the passed in contact.
- (nonnull instancetype)initWithPKContact:(PKContact * _Nonnull)contact OBJC_DESIGNATED_INITIALIZER;
/// Generates a PassKit contact representation of this STPAddress.
///
/// returns:
/// A new PassKit contact with data copied from this STPAddress instance.
- (PKContact * _Nonnull)PKContactValue SWIFT_WARN_UNUSED_RESULT;
/// Initializes a new STPAddress with a contact from the Contacts framework.
/// \param contact The CNContact you want to populate the STPAddress from.
///
///
/// returns:
/// A new STPAddress instance with data copied from the passed in contact.
- (nonnull instancetype)initWithCNContact:(CNContact * _Nonnull)contact OBJC_DESIGNATED_INITIALIZER;
/// Checks if this STPAddress has the level of valid address information
/// required by the passed in setting.
/// \param requiredFields The required level of billing address information to
/// check against.
///
///
/// returns:
/// YES if this address contains at least the necessary information,
/// NO otherwise.
- (BOOL)containsRequiredFields:(enum STPBillingAddressFields)requiredFields SWIFT_WARN_UNUSED_RESULT;
/// Checks if this STPAddress has any content (possibly invalid) in any of the
/// desired billing address fields.
/// Where <code>containsRequiredFields:</code> validates that this STPAddress contains valid data in
/// all of the required fields, this method checks for the existence of <em>any</em> data.
/// For example, if <code>desiredFields</code> is <code>STPBillingAddressFieldsZip</code>, this will check
/// if the postalCode is empty.
/// Note: When <code>desiredFields == STPBillingAddressFieldsNone</code>, this method always returns
/// NO.
/// @parameter desiredFields The billing address information the caller is interested in.
///
/// returns:
/// YES if there is any data in this STPAddress that’s relevant for those fields.
- (BOOL)containsContentForBillingAddressFields:(enum STPBillingAddressFields)desiredFields SWIFT_WARN_UNUSED_RESULT;
/// Checks if this STPAddress has the level of valid address information
/// required by the passed in setting.
/// Note: When <code>requiredFields == nil</code>, this method always returns
/// YES.
/// \param requiredFields The required shipping address information to check against.
///
///
/// returns:
/// YES if this address contains at least the necessary information,
/// NO otherwise.
- (BOOL)containsRequiredShippingAddressFields:(NSSet<STPContactField *> * _Nullable)requiredFields SWIFT_WARN_UNUSED_RESULT;
/// Checks if this STPAddress has any content (possibly invalid) in any of the
/// desired shipping address fields.
/// Where <code>containsRequiredShippingAddressFields:</code> validates that this STPAddress
/// contains valid data in all of the required fields, this method checks for the
/// existence of <em>any</em> data.
/// Note: When <code>desiredFields == nil</code>, this method always returns
/// NO.
/// @parameter desiredFields The shipping address information the caller is interested in.
///
/// returns:
/// YES if there is any data in this STPAddress that’s relevant for those fields.
- (BOOL)containsContentForShippingAddressFields:(NSSet<STPContactField *> * _Nullable)desiredFields SWIFT_WARN_UNUSED_RESULT;
/// Converts an STPBillingAddressFields enum value into the closest equivalent
/// representation of PKContactField options
/// \param billingAddressFields Stripe billing address fields enum value to convert.
///
///
/// returns:
/// The closest representation of the billing address requirement as
/// a PKContactField value.
+ (NSSet<PKContactField> * _Nonnull)applePayContactFieldsFromBillingAddressFields:(enum STPBillingAddressFields)billingAddressFields SWIFT_WARN_UNUSED_RESULT;
/// Converts a set of STPContactField values into the closest equivalent
/// representation of PKContactField options
/// \param contactFields Stripe contact fields values to convert.
///
///
/// returns:
/// The closest representation of the contact fields as
/// a PKContactField value.
+ (NSSet<PKContactField> * _Nullable)pkContactFieldsFromStripeContactFields:(NSSet<STPContactField *> * _Nullable)contactFields SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
@end


@interface STPAddress (SWIFT_EXTENSION(Stripe)) <NSCopying>
/// :nodoc:
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


@interface STPAddress (SWIFT_EXTENSION(Stripe)) <STPAPIResponseDecodable>
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
@end


/// Objects conforming to STPFormEncodable can be automatically converted to a form-encoded string, which can then be used when making requests to the Stripe API.
SWIFT_PROTOCOL("_TtP6Stripe16STPFormEncodable_")
@protocol STPFormEncodable <NSObject>
/// The root object name to be used when converting this object to a form-encoded string. For example, if this returns “card”, then the form-encoded output will resemble “card[foo]=bar” (where ‘foo’ and ‘bar’ are specified by <code>propertyNamesToFormFieldNamesMapping</code> below.
+ (NSString * _Nullable)rootObjectName SWIFT_WARN_UNUSED_RESULT;
/// This maps properties on an object that is being form-encoded into parameter names in the Stripe API. For example, STPCardParams has a field called <code>expMonth</code>, but the Stripe API expects a field called <code>exp_month</code>. This dictionary represents a mapping from the former to the latter (in other words, STPCardParams.propertyNamesToFormFieldNamesMapping()[“expMonth”] == “exp_month”.)
+ (NSDictionary<NSString *, NSString *> * _Nonnull)propertyNamesToFormFieldNamesMapping SWIFT_WARN_UNUSED_RESULT;
/// You can use this property to add additional fields to an API request that are not explicitly defined by the object’s interface. This can be useful when using beta features that haven’t been added to the Stripe SDK yet. For example, if the /v1/tokens API began to accept a beta field called “test_field”, you might do the following:
/// var cardParams = STPCardParams()
/// // add card values
/// cardParams.additionalAPIParameters = [“test_field”: “example_value”]
/// STPAPIClient.shared.createToken(withParameters: cardParams completion:…);
@property (nonatomic, copy) NSDictionary * _Nonnull additionalAPIParameters;
@end


@interface STPAddress (SWIFT_EXTENSION(Stripe)) <STPFormEncodable>
+ (NSString * _Nullable)rootObjectName SWIFT_WARN_UNUSED_RESULT;
+ (NSDictionary<NSString *, NSString *> * _Nonnull)propertyNamesToFormFieldNamesMapping SWIFT_WARN_UNUSED_RESULT;
@end









@class _stpinternal_APContextSwift;
@class PKPayment;
enum STPPaymentStatus : NSInteger;

/// Implement the required methods of this delegate to supply a PaymentIntent to STPApplePayContext and be notified of the completion of the Apple Pay payment.
/// You may also implement the optional delegate methods to handle shipping methods and shipping address changes e.g. to verify you can ship to the address, or update the payment amount.
SWIFT_PROTOCOL_NAMED("STPApplePayContextDelegate")
@protocol _stpinternal_apContextDelegate <_stpinternal_STPApplePayContextDelegateBase>
/// Called after the customer has authorized Apple Pay.  Implement this method to call the completion block with the client secret of a PaymentIntent or SetupIntent.
/// \param paymentMethod The PaymentMethod that represents the customer’s Apple Pay payment method.
/// If you create the PaymentIntent with confirmation_method=manual, pass <code>paymentMethod.stripeId</code> as the payment_method and confirm=true. Otherwise, you can ignore this parameter.
///
/// \param paymentInformation The underlying PKPayment created by Apple Pay.
/// If you create the PaymentIntent with confirmation_method=manual, you can collect shipping information using its <code>shippingContact</code> and <code>shippingMethod</code> properties.
///
/// \param completion Call this with the PaymentIntent or SetupIntent client secret, or the error that occurred creating the PaymentIntent or SetupIntent.
///
- (void)applePayContext:(_stpinternal_APContextSwift * _Nonnull)context didCreatePaymentMethod:(STPPaymentMethod * _Nonnull)paymentMethod paymentInformation:(PKPayment * _Nonnull)paymentInformation completion:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completion;
/// Called after the Apple Pay sheet is dismissed with the result of the payment.
/// Your implementation could stop a spinner and display a receipt view or error to the customer, for example.
/// \param status The status of the payment
///
/// \param error The error that occurred, if any.
///
- (void)applePayContext:(_stpinternal_APContextSwift * _Nonnull)context didCompleteWithStatus:(enum STPPaymentStatus)status error:(NSError * _Nullable)error;
@end

@class UIImage;

/// This protocol represents a payment method that a user can select and use to
/// pay.
/// The classes that conform to it and are supported by the UI:
/// <ul>
///   <li>
///     <code>STPApplePay</code>, which represents that the user wants to pay with
///     Apple Pay
///   </li>
///   <li>
///     <code>STPPaymentMethod</code>.  Only <code>STPPaymentMethod.type == STPPaymentMethodTypeCard</code> and
///     <code>STPPaymentMethod.type == STPPaymentMethodTypeFPX</code> are supported by <code>STPPaymentContext</code>
///     and <code>STPPaymentOptionsViewController</code>
///   </li>
///   <li>
///     <code>STPPaymentMethodParams</code>. This should be used with non-reusable payment method, such
///     as FPX and iDEAL. Instead of reaching out to Stripe to create a PaymentMethod, you can
///     pass an STPPaymentMethodParams directly to Stripe when confirming a PaymentIntent.
///     @note card-based Sources, Cards, and FPX support this protocol for use
///     in a custom integration.
///   </li>
/// </ul>
SWIFT_PROTOCOL("_TtP6Stripe16STPPaymentOption_")
@protocol STPPaymentOption <NSObject>
/// A small (32 x 20 points) logo image representing the payment method. For
/// example, the Visa logo for a Visa card, or the Apple Pay logo.
@property (nonatomic, readonly, strong) UIImage * _Nonnull image;
/// A small (32 x 20 points) logo image representing the payment method that can be
/// used as template for tinted icons.
@property (nonatomic, readonly, strong) UIImage * _Nonnull templateImage;
/// A string describing the payment method, such as “Apple Pay” or “Visa 4242”.
@property (nonatomic, readonly, copy) NSString * _Nonnull label;
/// Describes whether this payment option may be used multiple times. If it is not reusable,
/// the payment method must be discarded after use.
@property (nonatomic, readonly) BOOL isReusable;
@end


/// An empty class representing that the user wishes to pay via Apple Pay. This can
/// be checked on an <code>STPPaymentContext</code>, e.g:
/// \code
/// if paymentContext.selectedPaymentOption is STPApplePayPaymentOption {
/// // Don't ask the user for their card number; they want to pay with apple pay.
/// }
///
/// \endcode
SWIFT_CLASS("_TtC6Stripe24STPApplePayPaymentOption")
@interface STPApplePayPaymentOption : NSObject <STPPaymentOption>
@property (nonatomic, readonly, strong) UIImage * _Nonnull image;
@property (nonatomic, readonly, strong) UIImage * _Nonnull templateImage;
@property (nonatomic, readonly, copy) NSString * _Nonnull label;
@property (nonatomic, readonly) BOOL isReusable;
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class SFSafariViewController;

/// <code>STPAuthenticationContext</code> provides information required to present authentication challenges
/// to a user.
SWIFT_PROTOCOL("_TtP6Stripe24STPAuthenticationContext_")
@protocol STPAuthenticationContext <NSObject>
/// The Stripe SDK will modally present additional view controllers on top
/// of the <code>authenticationPresentingViewController</code> when required for user
/// authentication, like in the Challenge Flow for 3DS2 transactions.
- (UIViewController * _Nonnull)authenticationPresentingViewController SWIFT_WARN_UNUSED_RESULT;
@optional
/// This method is called before presenting a UIViewController for authentication.
/// @note <code>STPPaymentHandler</code> will not proceed until <code>completion</code> is called.
- (void)prepareAuthenticationContextForPresentation:(void (^ _Nonnull)(void))completion;
/// This method is called before presenting an SFSafariViewController for web-based authentication.
/// Implement this method to configure the <code>SFSafariViewController</code> instance, e.g. <code>viewController.preferredBarTintColor = MyBarTintColor</code>
/// @note Setting the <code>delegate</code> property has no effect.
- (void)configureSafariViewController:(SFSafariViewController * _Nonnull)viewController;
/// This method is called when an authentication UIViewController is about to be dismissed.
/// Implement this method to prepare your UI for the authentication view controller to be dismissed. For example,
/// if you requested authentication while displaying an STPBankSelectionViewController, you may want to hide
/// it to return the user to your desired view controller.
- (void)authenticationContextWillDismissViewController:(UIViewController * _Nonnull)viewController;
@end

@class STPCustomer;

/// A “bridge” from our pre-built UI (<code>STPPaymentContext</code>, <code>STPPaymentOptionsViewController</code>)
/// to your backend to fetch Customer-related information needed to power those views.
/// Typically, you will not need to implement this protocol yourself. You
/// should instead use <code>STPCustomerContext</code>, which implements <STPBackendAPIAdapter>
/// and manages retrieving and updating a Stripe customer for you.
/// seealso:
/// STPCustomerContext.h
/// If you would prefer retrieving and updating your Stripe customer object via
/// your own backend instead of using <code>STPCustomerContext</code>, you should make your
/// application’s API client conform to this interface.
SWIFT_PROTOCOL("_TtP6Stripe20STPBackendAPIAdapter_")
@protocol STPBackendAPIAdapter <NSObject>
/// Retrieve the customer to be displayed inside a payment context.
/// If you are not using STPCustomerContext:
/// On your backend, retrieve the Stripe customer associated with your currently
/// logged-in user ( https://stripe.com/docs/api#retrieve_customer ), and return
/// the raw JSON response from the Stripe API. Back in your iOS app, after you’ve
/// called this API, deserialize your API response into an <code>STPCustomer</code> object
/// (you can use the <code>STPCustomerDeserializer</code> class to do this).
/// seealso:
/// STPCard
/// \param completion call this callback when you’re done fetching and parsing the above information from your backend. For example, <code>completion(customer, nil)</code> (if your call succeeds) or <code>completion(nil, error)</code> if an error is returned.
///
- (void)retrieveCustomer:(void (^ _Nullable)(STPCustomer * _Nullable, NSError * _Nullable))completion;
/// Retrieves a list of Payment Methods attached to a customer.
/// If you are implementing your own <STPBackendAPIAdapter>:
/// Call the list method ( https://stripe.com/docs/api/payment_methods/lists )
/// with the Stripe customer. If this API call succeeds, call <code>completion(paymentMethods)</code>
/// with the list of PaymentMethods. Otherwise, call <code>completion(error)</code> with the error
/// that occurred.
/// \param completion Call this callback with the list of Payment Methods attached to the
/// customer.  For example, <code>completion(paymentMethods)</code> (if your call succeeds) or
/// <code>completion(error)</code> if an error is returned.
///
- (void)listPaymentMethodsForCustomerWithCompletion:(void (^ _Nullable)(NSArray<STPPaymentMethod *> * _Nullable, NSError * _Nullable))completion;
/// Adds a Payment Method to a customer.
/// If you are implementing your own <STPBackendAPIAdapter>:
/// On your backend, retrieve the Stripe customer associated with your logged-in user.
/// Then, call the Attach method on the Payment Method with that customer’s ID
/// ( https://stripe.com/docs/api/payment_methods/attach ). If this API call succeeds,
/// call <code>completion(nil)</code>. Otherwise, call <code>completion(error)</code> with the error that
/// occurred.
/// \param paymentMethod A valid Payment Method
///
/// \param completion Call this callback when you’re done adding the payment method
/// to the customer on your backend. For example, <code>completion(nil)</code> (if your call succeeds)
/// or <code>completion(error)</code> if an error is returned.
///
- (void)attachPaymentMethodToCustomer:(STPPaymentMethod * _Nonnull)paymentMethod completion:(void (^ _Nullable)(NSError * _Nullable))completion;
@optional
/// Deletes the given Payment Method from the customer.
/// If you are implementing your own <STPBackendAPIAdapter>:
/// Call the Detach method ( https://stripe.com/docs/api/payment_methods/detach )
/// on the Payment Method. If this API call succeeds, call <code>completion(nil)</code>.
/// Otherwise, call <code>completion(error)</code> with the error that occurred.
/// \param paymentMethod The Payment Method to delete from the customer
///
/// \param completion Call this callback when you’re done deleting the Payment Method
/// from the customer on your backend. For example, <code>completion(nil)</code> (if your call
/// succeeds) or <code>completion(error)</code> if an error is returned.
///
- (void)detachPaymentMethodFromCustomer:(STPPaymentMethod * _Nonnull)paymentMethod completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Sets the given shipping address on the customer.
/// If you are implementing your own <STPBackendAPIAdapter>:
/// On your backend, retrieve the Stripe customer associated with your logged-in user.
/// Then, call the Customer Update method ( https://stripe.com/docs/api#update_customer )
/// specifying shipping to be the given shipping address. If this API call succeeds,
/// call <code>completion(nil)</code>. Otherwise, call <code>completion(error)</code> with the error that occurred.
/// seealso:
/// https://stripe.com/docs/api#update_customer
/// \param shipping The shipping address to set on the customer
///
/// \param completion call this callback when you’re done updating the customer on
/// your backend. For example, <code>completion(nil)</code> (if your call succeeds) or
/// <code>completion(error)</code> if an error is returned.
///
- (void)updateCustomerWithShippingAddress:(STPAddress * _Nonnull)shipping completion:(void (^ _Nullable)(NSError * _Nullable))completion;
@end


/// Objects conforming to this protocol can be attached to a Stripe Customer object
/// as a payment source.
/// seealso:
/// https://stripe.com/docs/api#customer_object-sources
SWIFT_PROTOCOL("_TtP6Stripe17STPSourceProtocol_")
@protocol STPSourceProtocol <NSObject>
/// The Stripe ID of the source.
@property (nonatomic, readonly, copy) NSString * _Nonnull stripeID;
@end

enum STPBankAccountHolderType : NSInteger;
enum STPBankAccountStatus : NSInteger;

/// Representation of a user’s bank account details that have been tokenized with
/// the Stripe API.
/// seealso:
/// https://stripe.com/docs/api#bank_accounts
SWIFT_CLASS("_TtC6Stripe14STPBankAccount")
@interface STPBankAccount : NSObject <STPAPIResponseDecodable, STPSourceProtocol>
/// You cannot directly instantiate an <code>STPBankAccount</code>. You should only use one
/// that has been returned from an <code>STPAPIClient</code> callback.
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// The routing number for the bank account. This should be the ACH routing number,
/// not the wire routing number.
@property (nonatomic, readonly, copy) NSString * _Nullable routingNumber;
/// Two-letter ISO code representing the country the bank account is located in.
@property (nonatomic, readonly, copy) NSString * _Nullable country;
/// The default currency for the bank account.
@property (nonatomic, readonly, copy) NSString * _Nullable currency;
/// The last 4 digits of the account number.
@property (nonatomic, readonly, copy) NSString * _Nullable last4;
/// The name of the bank that owns the account.
@property (nonatomic, readonly, copy) NSString * _Nullable bankName;
/// The name of the person or business that owns the bank account.
@property (nonatomic, readonly, copy) NSString * _Nullable accountHolderName;
/// The type of entity that holds the account.
@property (nonatomic, readonly) enum STPBankAccountHolderType accountHolderType;
/// A proxy for the account number, this uniquely identifies the account and can be
/// used to compare equality of different bank accounts.
@property (nonatomic, readonly, copy) NSString * _Nullable fingerprint;
/// The validation status of the bank account. - seealso: STPBankAccountStatus
@property (nonatomic, readonly) enum STPBankAccountStatus status;
/// The Stripe ID for the bank account.
@property (nonatomic, readonly, copy) NSString * _Nullable bankAccountId SWIFT_DEPRECATED_MSG("Use stripeID (defined in STPSourceProtocol)");
@property (nonatomic, readonly, copy) NSString * _Nonnull stripeID;
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)bankAccount SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
@property (nonatomic, readonly) NSUInteger hash;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
@end

/// The type of entity that holds a bank account.
typedef SWIFT_ENUM(NSInteger, STPBankAccountHolderType, open) {
/// An individual holds this bank account.
  STPBankAccountHolderTypeIndividual = 0,
/// A company holds this bank account.
  STPBankAccountHolderTypeCompany = 1,
};


/// Representation of a user’s bank account details. You can assemble these with
/// information that your user enters and then create Stripe tokens with them using
/// an STPAPIClient.
/// seealso:
/// https://stripe.com/docs/api#create_bank_account_token
SWIFT_CLASS("_TtC6Stripe20STPBankAccountParams")
@interface STPBankAccountParams : NSObject <STPFormEncodable>
/// The account number for the bank account. Currently must be a checking account.
@property (nonatomic, copy) NSString * _Nullable accountNumber;
/// The last 4 digits of the bank account’s account number, if it’s been set,
/// otherwise nil.
@property (nonatomic, readonly, copy) NSString * _Nullable last4;
/// The routing number for the bank account. This should be the ACH routing number,
/// not the wire routing number.
@property (nonatomic, copy) NSString * _Nullable routingNumber;
/// Two-letter ISO code representing the country the bank account is located in.
@property (nonatomic, copy) NSString * _Nullable country;
/// The default currency for the bank account.
@property (nonatomic, copy) NSString * _Nullable currency;
/// The name of the person or business that owns the bank account.
@property (nonatomic, copy) NSString * _Nullable accountHolderName;
/// The type of entity that holds the account.
/// Defaults to STPBankAccountHolderTypeIndividual.
@property (nonatomic) enum STPBankAccountHolderType accountHolderType;
@property (nonatomic, copy) NSDictionary * _Nonnull additionalAPIParameters;
/// Initializes an empty STPBankAccountParams.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
+ (NSString * _Nullable)rootObjectName SWIFT_WARN_UNUSED_RESULT;
+ (NSDictionary<NSString *, NSString *> * _Nonnull)propertyNamesToFormFieldNamesMapping SWIFT_WARN_UNUSED_RESULT;
@end

/// Possible validation states for a bank account.
typedef SWIFT_ENUM(NSInteger, STPBankAccountStatus, open) {
/// The account has had no activity or validation performed
  STPBankAccountStatusNew = 0,
/// Stripe has determined this bank account exists.
  STPBankAccountStatusValidated = 1,
/// Bank account verification has succeeded.
  STPBankAccountStatusVerified = 2,
/// Verification for this bank account has failed.
  STPBankAccountStatusVerificationFailed = 3,
/// A transfer sent to this bank account has failed.
  STPBankAccountStatusErrored = 4,
};

/// The payment methods supported by STPBankSelectionViewController.
typedef SWIFT_ENUM(NSInteger, STPBankSelectionMethod, open) {
/// FPX (Malaysia)
  STPBankSelectionMethodFPX = 0,
/// An unknown payment method
  STPBankSelectionMethodUnknown = 1,
};

@protocol STPBankSelectionViewControllerDelegate;

/// This view controller displays a list of banks of the specified type, allowing the user to select one to pay from.
/// Once a bank is selected, it will return a PaymentMethodParams object, which you can use to confirm a PaymentIntent
/// or inspect to obtain details about the selected bank.
SWIFT_CLASS("_TtC6Stripe30STPBankSelectionViewController")
@interface STPBankSelectionViewController : STPCoreTableViewController <UITableViewDataSource, UITableViewDelegate>
/// A convenience initializer; equivalent to calling <code>init( bankMethod:bankMethod configuration:STPPaymentConfiguration.shared theme:STPTheme.defaultTheme</code>.
- (nonnull instancetype)initWithBankMethod:(enum STPBankSelectionMethod)bankMethod;
- (nonnull instancetype)initWithTheme:(STPTheme * _Nullable)theme;
/// Initializes a new <code>STPBankSelectionViewController</code> with the provided configuration and theme. Don’t forget to set the <code>delegate</code> property after initialization.
/// \param bankMethod The user will be presented with a list of banks for this payment method. STPBankSelectionMethodFPX is currently the only supported payment method.
///
/// \param configuration The configuration to use. This determines the Stripe publishable key to use when querying metadata about the banks. - seealso: STPPaymentConfiguration
///
/// \param theme The theme to use to inform the view controller’s visual appearance. - seealso: STPTheme
///
- (nonnull instancetype)initWithBankMethod:(enum STPBankSelectionMethod)bankMethod configuration:(STPPaymentConfiguration * _Nonnull)configuration theme:(STPTheme * _Nonnull)theme OBJC_DESIGNATED_INITIALIZER;
/// The view controller’s delegate. This must be set before showing the view controller in order for it to work properly. - seealso: STPBankSelectionViewControllerDelegate
@property (nonatomic, weak) id <STPBankSelectionViewControllerDelegate> _Nullable delegate;
/// The API Client to use to make requests.
/// Defaults to <code>STPAPIClient.shared</code>
@property (nonatomic, strong) STPAPIClient * _Nonnull apiClient;
/// :nodoc:
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)tableView:(UITableView * _Nonnull)tableView willDisplayCell:(UITableViewCell * _Nonnull)cell forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
/// :nodoc:
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForFooterInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (BOOL)tableView:(UITableView * _Nonnull)tableView shouldHighlightRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end



/// An <code>STPBankSelectionViewControllerDelegate</code> is notified when a user selects a bank.
SWIFT_PROTOCOL("_TtP6Stripe38STPBankSelectionViewControllerDelegate_")
@protocol STPBankSelectionViewControllerDelegate <NSObject>
/// This is called when the user selects a bank.
/// You can use the returned PaymentMethodParams to confirm a PaymentIntent, or inspect
/// it to obtain details about the selected bank.
/// Once you’re done, you’ll want to dismiss (or pop) the view controller.
/// \param bankViewController the view controller that created the PaymentMethodParams
///
/// \param paymentMethodParams the PaymentMethodParams that was created. - seealso: STPPaymentMethodParams
///
- (void)bankSelectionViewController:(STPBankSelectionViewController * _Nonnull)bankViewController didCreatePaymentMethodParams:(STPPaymentMethodParams * _Nonnull)paymentMethodParams;
@end

/// What set of billing address information you need to collect from your user.
/// @note If the user is from a country that does not use zip/postal codes,
/// the user may not be asked for one regardless of this setting.
typedef SWIFT_ENUM(NSUInteger, STPBillingAddressFields, open) {
/// No billing address information
  STPBillingAddressFieldsNone = 0,
/// Just request the user’s billing postal code
  STPBillingAddressFieldsPostalCode = 1,
/// Request the user’s full billing address
  STPBillingAddressFieldsFull = 2,
/// Just request the user’s billing name
  STPBillingAddressFieldsName = 3,
/// Just request the user’s billing ZIP (synonym for STPBillingAddressFieldsZip)
  STPBillingAddressFieldsZip = 4,
};

enum STPCardBrand : NSInteger;
enum STPCardFundingType : NSInteger;

/// Representation of a user’s credit card details that have been tokenized with
/// the Stripe API
/// seealso:
/// https://stripe.com/docs/api#cards
SWIFT_CLASS("_TtC6Stripe7STPCard")
@interface STPCard : NSObject <STPAPIResponseDecodable, STPPaymentOption, STPSourceProtocol>
/// The last 4 digits of the card.
@property (nonatomic, readonly, copy) NSString * _Nonnull last4;
/// For cards made with Apple Pay, this refers to the last 4 digits of the
/// “Device Account Number” for the tokenized card. For regular cards, it will
/// be nil.
@property (nonatomic, readonly, copy) NSString * _Nullable dynamicLast4;
/// Whether or not the card originated from Apple Pay.
@property (nonatomic, readonly) BOOL isApplePayCard;
/// The card’s expiration month. 1-indexed (i.e. 1 == January)
@property (nonatomic, readonly) NSInteger expMonth;
/// The card’s expiration year.
@property (nonatomic, readonly) NSInteger expYear;
/// The cardholder’s name.
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// The cardholder’s address.
@property (nonatomic, readonly, strong) STPAddress * _Nullable address;
/// The issuer of the card.
@property (nonatomic, readonly) enum STPCardBrand brand;
/// The funding source for the card (credit, debit, prepaid, or other)
@property (nonatomic, readonly) enum STPCardFundingType funding;
/// Two-letter ISO code representing the issuing country of the card.
@property (nonatomic, readonly, copy) NSString * _Nullable country;
/// This is only applicable when tokenizing debit cards to issue payouts to managed
/// accounts. You should not set it otherwise. The card can then be used as a
/// transfer destination for funds in this currency.
@property (nonatomic, readonly, copy) NSString * _Nullable currency;
/// Returns a string representation for the provided card brand;
/// i.e. <code>STPCard.string(from brand: .visa) == "Visa"</code>.
/// \param brand the brand you want to convert to a string
///
///
/// returns:
/// A string representing the brand, suitable for displaying to a user.
+ (NSString * _Nonnull)stringFromBrand:(enum STPCardBrand)brand SWIFT_WARN_UNUSED_RESULT;
/// This parses a string representing a card’s brand into the appropriate
/// STPCardBrand enum value,
/// i.e. <code>STPCard.brand(from string: "American Express") == .amex</code>.
/// The string values themselves are specific to Stripe as listed in the Stripe API
/// documentation.
/// seealso:
/// https://stripe.com/docs/api#card_object-brand
/// \param string a string representing the card’s brand as returned from
/// the Stripe API
///
///
/// returns:
/// an enum value mapped to that string. If the string is unrecognized,
/// returns STPCardBrandUnknown.
+ (enum STPCardBrand)brandFromString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
/// Create an STPCard from a Stripe API response.
/// \param cardID The Stripe ID of the card, e.g. <code>card_185iQx4JYtv6MPZKfcuXwkOx</code>
///
/// \param brand The brand of the card (e.g. “Visa”. To obtain this enum value
/// from a string, use <code>STPCardBrand.brand(from string:string)</code>;
///
/// \param last4 The last 4 digits of the card, e.g. 4242
///
/// \param expMonth The card’s expiration month, 1-indexed (i.e. 1 = January)
///
/// \param expYear The card’s expiration year
///
/// \param funding The card’s funding type (credit, debit, or prepaid). To obtain
/// this enum value from a string, use <code>STPCardBrand.funding(from string:)</code>.
///
///
/// returns:
/// an STPCard instance populated with the provided values.
- (nonnull instancetype)initWithID:(NSString * _Nonnull)cardID brand:(enum STPCardBrand)brand last4:(NSString * _Nonnull)last4 expMonth:(NSInteger)expMonth expYear:(NSInteger)expYear funding:(enum STPCardFundingType)funding OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("You cannot directly instantiate an STPCard. You should only use one that has been returned from an STPAPIClient callback.");
/// This parses a string representing a card’s funding type into the appropriate
/// <code>STPCardFundingType</code> enum value,
/// i.e. <code>STPCard.funding(from string:"prepaid") == .prepaid</code>.
/// \param string a string representing the card’s funding type as returned from
/// the Stripe API
///
///
/// returns:
/// an enum value mapped to that string. If the string is unrecognized,
/// returns <code>STPCardFundingTypeOther</code>.
+ (enum STPCardFundingType)fundingFromString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, copy) NSString * _Nonnull stripeID;
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)other SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
@property (nonatomic, readonly) NSUInteger hash;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, strong) UIImage * _Nonnull image;
@property (nonatomic, readonly, strong) UIImage * _Nonnull templateImage;
@property (nonatomic, readonly, copy) NSString * _Nonnull label;
@property (nonatomic, readonly) BOOL isReusable;
/// A set of key/value pairs associated with the card object.
/// @deprecated Metadata is no longer returned to clients using publishable keys. Retrieve them on your server using yoursecret key instead.
/// seealso:
/// https://stripe.com/docs/api#metadata
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable metadata SWIFT_DEPRECATED_MSG("Metadata is no longer returned to clients using publishable keys. Retrieve them on your server using yoursecret key instead.");
/// The Stripe ID for the card.
@property (nonatomic, readonly, copy) NSString * _Nullable cardId SWIFT_DEPRECATED_MSG("Use stripeID (defined in STPSourceProtocol)");
/// The first line of the cardholder’s address
@property (nonatomic, readonly, copy) NSString * _Nullable addressLine1 SWIFT_DEPRECATED_MSG("Use address.line1");
/// The second line of the cardholder’s address
@property (nonatomic, readonly, copy) NSString * _Nullable addressLine2 SWIFT_DEPRECATED_MSG("Use address.line2");
/// The city of the cardholder’s address
@property (nonatomic, readonly, copy) NSString * _Nullable addressCity SWIFT_DEPRECATED_MSG("Use address.city");
/// The state of the cardholder’s address
@property (nonatomic, readonly, copy) NSString * _Nullable addressState SWIFT_DEPRECATED_MSG("Use address.state");
/// The zip code of the cardholder’s address
@property (nonatomic, readonly, copy) NSString * _Nullable addressZip SWIFT_DEPRECATED_MSG("Use address.postalCode");
/// The country of the cardholder’s address
@property (nonatomic, readonly, copy) NSString * _Nullable addressCountry SWIFT_DEPRECATED_MSG("Use address.country");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The various card brands to which a payment card can belong.
typedef SWIFT_ENUM(NSInteger, STPCardBrand, open) {
/// Visa card
  STPCardBrandVisa = 0,
/// American Express card
  STPCardBrandAmex = 1,
/// Mastercard card
  STPCardBrandMastercard = 2,
/// Discover card
  STPCardBrandDiscover = 3,
/// JCB card
  STPCardBrandJCB = 4,
/// Diners Club card
  STPCardBrandDinersClub = 5,
/// UnionPay card
  STPCardBrandUnionPay = 6,
/// An unknown card brand type
  STPCardBrandUnknown = 7,
};


/// Contains <code>STPStringFromCardBrand</code>
SWIFT_CLASS("_TtC6Stripe21STPCardBrandUtilities")
@interface STPCardBrandUtilities : NSObject
/// Returns a string representation for the provided card brand;
/// i.e. <code>STPCardBrandUtilities.stringFrom(brand: .visa) == "Visa"</code>.
/// \param brand the brand you want to convert to a string
///
///
/// returns:
/// A string representing the brand, suitable for displaying to a user.
+ (NSString * _Nullable)stringFromCardBrand:(enum STPCardBrand)brand SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <code>STPFormView</code> is a base class for the Stripe SDK’s form input UI. You should use one of the available subclasses
/// (<code>STPCardFormView</code>) rather than instantiating an <code>STPFormView</code> instance directly.
SWIFT_CLASS("_TtC6Stripe11STPFormView")
@interface STPFormView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// :nodoc:
@property (nonatomic, readonly) BOOL canResignFirstResponder;
/// :nodoc:
- (BOOL)resignFirstResponder SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
@property (nonatomic, readonly) BOOL isFirstResponder;
/// :nodoc:
@property (nonatomic, readonly) BOOL canBecomeFirstResponder;
/// :nodoc:
- (BOOL)becomeFirstResponder SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
@property (nonatomic, getter=isUserInteractionEnabled) BOOL userInteractionEnabled;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@protocol STPCardFormViewDelegate;
enum STPCardFormViewStyle : NSInteger;

/// <code>STPCardFormView</code> provides a multiline interface for users to input their
/// credit card details as well as billing postal code and provides an interface to access
/// the created <code>STPPaymentMethodParams</code>.
/// <code>STPCardFormView</code> includes both the input fields as well as an error label that
/// is displayed when invalid input is detected.
SWIFT_CLASS("_TtC6Stripe15STPCardFormView")
@interface STPCardFormView : STPFormView
/// The delegate to notify when the card form transitions to or from being complete.
/// seealso:
/// STPCardFormViewDelegate
@property (nonatomic, weak) id <STPCardFormViewDelegate> _Nullable delegate;
/// :nodoc:
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// The background color that is automatically applied to the input fields when  <code>isUserInteractionEnabled</code> is set to <code>false. @note </code>STPCardFormView` uses text colors, most of which are iOS system colors, that are designed to be as
/// accessible as possible, so any customization should avoid decreasing contrast between the text and background.
@property (nonatomic, strong) UIColor * _Nullable disabledBackgroundColor;
/// A configured <code>STPPaymentMethodParams</code> with the entered card number, expiration date, cvc, and
/// postal code (if applicable). If any field is invalid or incomplete then this property will return <code>nil</code>.
/// You can monitor when <code>STPCardFormView</code> has complete details by implementing
/// <code>STPFormViewDelegate</code> and setting the <code>STPCardFormView's</code> <code>delegate</code>
/// property.
@property (nonatomic, readonly, strong) STPPaymentMethodParams * _Nullable cardParams;
@property (nonatomic, getter=isUserInteractionEnabled) BOOL userInteractionEnabled;
/// Public initializer for <code>STPCardFormView</code>.
/// @param style The visual style to use for this instance. @see STPCardFormViewStyle
- (nonnull instancetype)initWithStyle:(enum STPCardFormViewStyle)style;
@end




SWIFT_AVAILABILITY(maccatalyst_app_extension,unavailable) SWIFT_AVAILABILITY(ios_app_extension,unavailable) SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface STPCardFormView (SWIFT_EXTENSION(Stripe))
@end



/// <code>STPCardFormViewDelegate</code> defines the interface that should be adopted to receive
/// updates from <code>STPCardFormView</code> instances.
SWIFT_PROTOCOL("_TtP6Stripe23STPCardFormViewDelegate_")
@protocol STPCardFormViewDelegate <NSObject>
/// Delegate method that is called when all of the form view’s required inputs
/// are complete or transition away from all being complete. These transitions
/// correspond to <code>cardForView.cardParams</code> returning a nil value or not.
- (void)cardFormView:(STPCardFormView * _Nonnull)form didChangeToStateComplete:(BOOL)complete;
@end

/// Options for configuring the display of an <code>STPCardFormView</code> instance.
typedef SWIFT_ENUM(NSInteger, STPCardFormViewStyle, open) {
/// Draws the form in a rounded rect with full separators between
/// each input field.
  STPCardFormViewStyleStandard = 0,
/// Draws the form without an outer border and underlines under
/// each input field.
  STPCardFormViewStyleBorderless = 1,
};

/// The various funding sources for a payment card.
typedef SWIFT_ENUM(NSInteger, STPCardFundingType, open) {
/// Debit card funding
  STPCardFundingTypeDebit = 0,
/// Credit card funding
  STPCardFundingTypeCredit = 1,
/// Prepaid card funding
  STPCardFundingTypePrepaid = 2,
/// An other or unknown type of funding source.
  STPCardFundingTypeOther = 3,
};


/// Representation of a user’s credit card details. You can assemble these with
/// information that your user enters and then create Stripe tokens with them using
/// an STPAPIClient.
/// seealso:
/// https://stripe.com/docs/api#cards
SWIFT_CLASS("_TtC6Stripe13STPCardParams")
@interface STPCardParams : NSObject <NSCopying, STPFormEncodable>
@property (nonatomic, copy) NSDictionary * _Nonnull additionalAPIParameters;
/// A convenience initializer for creating a card params from a card payment method params.
- (nonnull instancetype)initWithPaymentMethodParams:(STPPaymentMethodParams * _Nonnull)paymentMethodParams;
/// The card’s number.
@property (nonatomic, copy) NSString * _Nullable number;
/// The last 4 digits of the card’s number, if it’s been set, otherwise nil.
- (NSString * _Nullable)last4 SWIFT_WARN_UNUSED_RESULT;
/// The card’s expiration month.
@property (nonatomic) NSUInteger expMonth;
/// The card’s expiration year.
@property (nonatomic) NSUInteger expYear;
/// The card’s security code, found on the back.
@property (nonatomic, copy) NSString * _Nullable cvc;
/// The cardholder’s name.
/// @note Changing this property will also changing the name of the
/// param’s <code>address</code> property.
@property (nonatomic, copy) NSString * _Nullable name;
/// The cardholder’s address.
/// @note Setting <code>address</code> to a new value will also change the <code>name</code> property to
/// be the value of <code>address.name</code>. However, changing <code>address.name</code> directly will
/// not* change <code>name</code>.
@property (nonatomic, strong) STPAddress * _Nonnull address;
/// Three-letter ISO currency code representing the currency paid out to the bank
/// account. This is only applicable when tokenizing debit cards to issue payouts
/// to managed accounts. You should not set it otherwise. The card can then be
/// used as a transfer destination for funds in this currency.
@property (nonatomic, copy) NSString * _Nullable currency;
/// The first line of the cardholder’s address
@property (nonatomic, copy) NSString * _Nullable addressLine1;
/// The second line of the cardholder’s address
@property (nonatomic, copy) NSString * _Nullable addressLine2;
/// The city of the cardholder’s address
@property (nonatomic, copy) NSString * _Nullable addressCity;
/// The state of the cardholder’s address
@property (nonatomic, copy) NSString * _Nullable addressState;
/// The zip code of the cardholder’s address
@property (nonatomic, copy) NSString * _Nullable addressZip;
/// The country of the cardholder’s address
@property (nonatomic, copy) NSString * _Nullable addressCountry;
/// Initializes an empty STPCardParams.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
+ (NSString * _Nullable)rootObjectName SWIFT_WARN_UNUSED_RESULT;
+ (NSDictionary<NSString *, NSString *> * _Nonnull)propertyNamesToFormFieldNamesMapping SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end

/// These fields indicate whether a card field represents a valid value, invalid
/// value, or incomplete value.
typedef SWIFT_ENUM(NSInteger, STPCardValidationState, open) {
/// The field’s contents are valid. For example, a valid, 16-digit card number.
/// Note that valid values may not be complete. For example: a US Zip code can
/// be 5 or 9 digits. A 5-digit code is Valid, but more text could be entered
/// to transition to incomplete again. American Express CVC codes can be 3 or
/// 4 digits and both will be treated as Valid.
  STPCardValidationStateValid = 0,
/// The field’s contents are invalid. For example, an expiration date
/// of “13/42”.
  STPCardValidationStateInvalid = 1,
/// The field’s contents are not currently valid, but could be by typing
/// additional characters. For example, a CVC of “1”.
  STPCardValidationStateIncomplete = 2,
};


/// This class contains static methods to validate card numbers, expiration dates,
/// and CVCs. For a list of test card numbers to use with this code,
/// see https://stripe.com/docs/testing
SWIFT_CLASS("_TtC6Stripe16STPCardValidator")
@interface STPCardValidator : NSObject
/// Returns a copy of the passed string with all non-numeric characters removed.
+ (NSString * _Nonnull)sanitizedNumericStringForString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
/// Returns a copy of the passed string with all characters removed that do not exist within a postal code.
+ (NSString * _Nonnull)sanitizedPostalStringForString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
/// Whether or not the target string contains only numeric characters.
+ (BOOL)stringIsNumeric:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
/// Validates a card number, passed as a string. This will return
/// STPCardValidationStateInvalid for numbers that are too short or long, contain
/// invalid characters, do not pass Luhn validation, or (optionally) do not match
/// a number format issued by a major card brand.
/// \param cardNumber The card number to validate. Ex. @“4242424242424242”
///
/// \param validatingCardBrand Whether or not to enforce that the number appears to
/// be issued by a major card brand (or could be). For example, no issuing card
/// network currently issues card numbers beginning with the digit 9; if an
/// otherwise correct-length and luhn-valid card number beginning with 9
/// (example: 9999999999999995) were passed to this method, it would return
/// STPCardValidationStateInvalid if this parameter were YES and
/// STPCardValidationStateValid if this parameter were NO. If unsure, you should
/// use YES for this value.
///
///
/// returns:
/// STPCardValidationStateValid if the number is valid,
/// STPCardValidationStateInvalid if the number is invalid, or
/// STPCardValidationStateIncomplete if the number is a substring of a valid
/// card (e.g. @“4242”).
+ (enum STPCardValidationState)validationStateForNumber:(NSString * _Nullable)cardNumber validatingCardBrand:(BOOL)validatingCardBrand SWIFT_WARN_UNUSED_RESULT;
/// The card brand for a card number or substring thereof.
/// \param cardNumber A card number, or partial card number. For
/// example, @“4242”, @“5555555555554444”, or @“123”.
///
///
/// returns:
/// The brand for that card number. The example parameters would
/// return STPCardBrandVisa, STPCardBrandMasterCard, and
/// STPCardBrandUnknown, respectively.
+ (enum STPCardBrand)brandForNumber:(NSString * _Nonnull)cardNumber SWIFT_WARN_UNUSED_RESULT;
/// The possible number lengths for cards associated with a card brand. For
/// example, Discover card numbers contain 16 characters, while American Express
/// cards contain 15 characters.
/// \param brand The brand to return lengths for.
///
///
/// returns:
/// The set of possible lengths cards associated with that brand can be.
+ (NSSet<NSNumber *> * _Nonnull)lengthsForCardBrand:(enum STPCardBrand)brand SWIFT_WARN_UNUSED_RESULT;
/// The maximum possible length the number of a card associated with the specified
/// brand could be.
/// For example, Visa cards could be either 13 or 16 characters, so this method
/// would return 16 for the that card brand.
/// \param brand The brand to return the max length for.
///
///
/// returns:
/// The maximum length card numbers associated with that brand could be.
+ (NSInteger)maxLengthForCardBrand:(enum STPCardBrand)brand SWIFT_WARN_UNUSED_RESULT;
/// The length of the final grouping of digits to use when formatting a card number
/// for display.
/// For example, Visa cards display their final 4 numbers, e.g. “4242”, while
/// American Express cards display their final 5 digits, e.g. “10005”.
/// \param brand The brand to return the fragment length for.
///
///
/// returns:
/// The final fragment length card numbers associated with that brand use.
+ (NSInteger)fragmentLengthForCardBrand:(enum STPCardBrand)brand SWIFT_WARN_UNUSED_RESULT;
/// Validates an expiration month, passed as an (optionally 0-padded) string.
/// Example valid values are “3”, “12”, and “08”. Example invalid values are “99”,
/// “a”, and “00”. Incomplete values include “0” and “1”.
/// \param expirationMonth A string representing a 2-digit expiration month for a
/// payment card.
///
///
/// returns:
/// STPCardValidationStateValid if the month is valid,
/// STPCardValidationStateInvalid if the month is invalid, or
/// STPCardValidationStateIncomplete if the month is a substring of a valid
/// month (e.g. @“0” or @“1”).
+ (enum STPCardValidationState)validationStateForExpirationMonth:(NSString * _Nonnull)expirationMonth SWIFT_WARN_UNUSED_RESULT;
/// Validates an expiration year, passed as a string representing the final
/// 2 digits of the year.
/// This considers the period between the current year until 2099 as valid times.
/// An example valid year value would be “16” (assuming the current year, as
/// determined by NSDate.date, is 2015).
/// Will return STPCardValidationStateInvalid for a month/year combination that
/// is earlier than the current date (i.e. @“15” and @“04” in October 2015).
/// Example invalid year values are “00”, “a”, and “13”. Any 1-digit year string
/// will return STPCardValidationStateIncomplete.
/// \param expirationYear A string representing a 2-digit expiration year for a
/// payment card.
///
/// \param expirationMonth A string representing a valid 2-digit expiration month
/// for a payment card. If the month is invalid
/// (see <code>validationStateForExpirationMonth</code>), this will
/// return STPCardValidationStateInvalid.
///
///
/// returns:
/// STPCardValidationStateValid if the year is valid,
/// STPCardValidationStateInvalid if the year is invalid, or
/// STPCardValidationStateIncomplete if the year is a substring of a valid
/// year (e.g. @“1” or @“2”).
+ (enum STPCardValidationState)validationStateForExpirationYear:(NSString * _Nonnull)expirationYear inMonth:(NSString * _Nonnull)expirationMonth SWIFT_WARN_UNUSED_RESULT;
/// The max CVC length for a card brand (for example, American Express CVCs are
/// 4 digits, while all others are 3).
/// \param brand The brand to return the max CVC length for.
///
///
/// returns:
/// The maximum length of CVC numbers for cards associated with that brand.
+ (NSUInteger)maxCVCLengthForCardBrand:(enum STPCardBrand)brand SWIFT_WARN_UNUSED_RESULT;
/// Validates a card’s CVC, passed as a numeric string, for the given card brand.
/// \param cvc the CVC to validate
///
/// \param brand the card brand (can be determined from the card’s number
/// using <code>brandForNumber</code>)
///
///
/// returns:
/// Whether the CVC represents a valid CVC for that card brand. For
/// example, would return STPCardValidationStateValid for @“123” and
/// STPCardBrandVisa, STPCardValidationStateValid for @“1234” and
/// STPCardBrandAmericanExpress, STPCardValidationStateIncomplete for @“12” and
/// STPCardBrandVisa, and STPCardValidationStateInvalid for @“12345” and any brand.
+ (enum STPCardValidationState)validationStateForCVC:(NSString * _Nonnull)cvc cardBrand:(enum STPCardBrand)brand SWIFT_WARN_UNUSED_RESULT;
/// Validates the given card details.
/// \param card The card details to validate.
///
///
/// returns:
/// STPCardValidationStateValid if all fields are valid,
/// STPCardValidationStateInvalid if any field is invalid, or
/// STPCardValidationStateIncomplete if all fields are either incomplete or valid.
+ (enum STPCardValidationState)validationStateForCard:(STPCardParams * _Nonnull)card SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Alipay options to pass to `STPConfirmPaymentMethodOptions``
SWIFT_CLASS("_TtC6Stripe23STPConfirmAlipayOptions")
@interface STPConfirmAlipayOptions : NSObject
/// The app bundle ID.
/// @note This is automatically populated by the SDK.
@property (nonatomic, readonly, copy) NSString * _Nonnull appBundleID;
/// The app version.
/// @note This is automatically populated by the SDK.
@property (nonatomic, readonly, copy) NSString * _Nonnull appVersionKey;
@property (nonatomic, copy) NSDictionary * _Nonnull additionalAPIParameters;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STPConfirmAlipayOptions (SWIFT_EXTENSION(Stripe)) <STPFormEncodable>
+ (NSDictionary<NSString *, NSString *> * _Nonnull)propertyNamesToFormFieldNamesMapping SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)rootObjectName SWIFT_WARN_UNUSED_RESULT;
@end


/// BLIK options to pass to `STPConfirmPaymentMethodOptions``
/// seealso:
/// https://site-admin.stripe.com/docs/api/payment_intents/confirm#confirm_payment_intent-payment_method_options-blik
SWIFT_CLASS("_TtC6Stripe21STPConfirmBLIKOptions")
@interface STPConfirmBLIKOptions : NSObject
/// The 6-digit BLIK code that a customer has generated using their banking application.
@property (nonatomic, copy) NSString * _Nonnull code;
@property (nonatomic, copy) NSDictionary * _Nonnull additionalAPIParameters;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Initializes STPConfirmBLIKOptions
/// \param code The 6-digit BLIK code that a customer has generated using their banking application.
///
- (nonnull instancetype)initWithCode:(NSString * _Nonnull)code OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface STPConfirmBLIKOptions (SWIFT_EXTENSION(Stripe)) <STPFormEncodable>
+ (NSDictionary<NSString *, NSString *> * _Nonnull)propertyNamesToFormFieldNamesMapping SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)rootObjectName SWIFT_WARN_UNUSED_RESULT;
@end


/// Options to update a Card PaymentMethod during PaymentIntent confirmation.
/// seealso:
/// https://stripe.com/docs/api/payment_intents/confirm#confirm_payment_intent-payment_method_options-card
SWIFT_CLASS("_TtC6Stripe21STPConfirmCardOptions")
@interface STPConfirmCardOptions : NSObject
/// CVC value with which to update the Card PaymentMethod.
@property (nonatomic, copy) NSString * _Nullable cvc;
/// Selected network to process this PaymentIntent on. Depends on the available networks of the card attached to the PaymentIntent. Can be only set confirm-time.
@property (nonatomic, copy) NSString * _Nullable network;
/// :nodoc:
@property (nonatomic, copy) NSDictionary * _Nonnull additionalAPIParameters;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STPConfirmCardOptions (SWIFT_EXTENSION(Stripe)) <STPFormEncodable>
+ (NSDictionary<NSString *, NSString *> * _Nonnull)propertyNamesToFormFieldNamesMapping SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)rootObjectName SWIFT_WARN_UNUSED_RESULT;
@end

@class STPConfirmWeChatPayOptions;

/// Options to update the associated PaymentMethod during PaymentIntent confirmation.
/// seealso:
/// https://stripe.com/docs/api/payment_intents/confirm#confirm_payment_intent-payment_method_options
SWIFT_CLASS("_TtC6Stripe30STPConfirmPaymentMethodOptions")
@interface STPConfirmPaymentMethodOptions : NSObject
/// Options to update a Card PaymentMethod.
/// seealso:
/// STPConfirmCardOptions
@property (nonatomic, strong) STPConfirmCardOptions * _Nullable cardOptions;
/// Options for an Alipay Payment Method.
@property (nonatomic, strong) STPConfirmAlipayOptions * _Nullable alipayOptions;
/// Options for a BLIK Payment Method.
@property (nonatomic, strong) STPConfirmBLIKOptions * _Nullable blikOptions;
/// Options for a WeChat Pay Payment Method.
@property (nonatomic, strong) STPConfirmWeChatPayOptions * _Nullable weChatPayOptions;
/// :nodoc:
@property (nonatomic, copy) NSDictionary * _Nonnull additionalAPIParameters;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@interface STPConfirmPaymentMethodOptions (SWIFT_EXTENSION(Stripe)) <STPFormEncodable>
+ (NSDictionary<NSString *, NSString *> * _Nonnull)propertyNamesToFormFieldNamesMapping SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)rootObjectName SWIFT_WARN_UNUSED_RESULT;
@end


/// WeChat Pay options to pass to `STPConfirmPaymentMethodOptions``
/// seealso:
/// https://site-admin.stripe.com/docs/api/payment_intents/confirm#confirm_payment_intent-payment_method_options-wechat_pay
SWIFT_CLASS("_TtC6Stripe26STPConfirmWeChatPayOptions")
@interface STPConfirmWeChatPayOptions : NSObject
/// Your WeChat-provided application ID. WeChat Pay uses
/// this as the redirect URL scheme.
@property (nonatomic, copy) NSString * _Nullable appId;
@property (nonatomic, copy) NSDictionary * _Nonnull additionalAPIParameters;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Initializes STPConfirmWeChatPayOptions
/// \param appId Your WeChat-provided application ID. WeChat Pay
/// uses this as the redirect URL scheme.
///
- (nonnull instancetype)initWithAppId:(NSString * _Nonnull)appId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface STPConfirmWeChatPayOptions (SWIFT_EXTENSION(Stripe)) <STPFormEncodable>
+ (NSDictionary<NSString *, NSString *> * _Nonnull)propertyNamesToFormFieldNamesMapping SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)rootObjectName SWIFT_WARN_UNUSED_RESULT;
@end


/// An address to use with <code>STPConnectAccountParams</code>.
SWIFT_CLASS("_TtC6Stripe24STPConnectAccountAddress")
@interface STPConnectAccountAddress : NSObject
/// City, district, suburb, town, or village.
/// For addresses in Japan: City or ward.
@property (nonatomic, copy) NSString * _Nullable city;
/// Two-letter country code (ISO 3166-1 alpha-2).
/// seealso:
/// https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
@property (nonatomic, copy) NSString * _Nullable country;
/// Address line 1 (e.g., street, PO Box, or company name).
/// For addresses in Japan: Block or building number.
@property (nonatomic, copy) NSString * _Nullable line1;
/// Address line 2 (e.g., apartment, suite, unit, or building).
/// For addresses in Japan: Building details.
@property (nonatomic, copy) NSString * _Nullable line2;
/// ZIP or postal code.
@property (nonatomic, copy) NSString * _Nullable postalCode;
/// State, county, province, or region.
/// For addresses in Japan: Prefecture.
@property (nonatomic, copy) NSString * _Nullable state;
/// Town or cho-me.
/// This property only applies to Japanese addresses.
@property (nonatomic, copy) NSString * _Nullable town;
/// :nodoc:
@property (nonatomic, copy) NSDictionary * _Nonnull additionalAPIParameters;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STPConnectAccountAddress (SWIFT_EXTENSION(Stripe)) <STPFormEncodable>
+ (NSDictionary<NSString *, NSString *> * _Nonnull)propertyNamesToFormFieldNamesMapping SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)rootObjectName SWIFT_WARN_UNUSED_RESULT;
@end

/// The business type of the Connect account.
typedef SWIFT_ENUM(NSInteger, STPConnectAccountBusinessType, open) {
/// This Connect account represents an individual.
  STPConnectAccountBusinessTypeIndividual = 0,
/// This Connect account represents a company.
  STPConnectAccountBusinessTypeCompany = 1,
};

@class NSNumber;

/// Information about the company or business to use with <code>STPConnectAccountParams</code>.
/// seealso:
/// https://stripe.com/docs/api/tokens/create_account#create_account_token-account-company
SWIFT_CLASS("_TtC6Stripe30STPConnectAccountCompanyParams")
@interface STPConnectAccountCompanyParams : NSObject
/// The company’s primary address.
@property (nonatomic, strong) STPConnectAccountAddress * _Null_unspecified address;
/// The Kana variation of the company’s primary address (Japan only).
@property (nonatomic, strong) STPConnectAccountAddress * _Nullable kanaAddress;
/// The Kanji variation of the company’s primary address (Japan only).
@property (nonatomic, strong) STPConnectAccountAddress * _Nullable kanjiAddress;
/// Whether the company’s directors have been provided.
/// Set this Boolean to true after creating all the company’s directors with the Persons API (https://stripe.com/docs/api/persons) for accounts with a relationship.director requirement.
/// This value is not automatically set to true after creating directors, so it needs to be updated to indicate all directors have been provided.
@property (nonatomic, strong) NSNumber * _Nullable directorsProvided;
/// The company’s legal name.
@property (nonatomic, copy) NSString * _Nullable name;
/// The Kana variation of the company’s legal name (Japan only).
@property (nonatomic, copy) NSString * _Nullable kanaName;
/// The Kanji variation of the company’s legal name (Japan only).
@property (nonatomic, copy) NSString * _Nullable kanjiName;
/// Whether the company’s owners have been provided.
/// Set this Boolean to true after creating all the company’s owners with the Persons API (https://stripe.com/docs/api/persons) for accounts with a relationship.owner requirement.
@property (nonatomic, strong) NSNumber * _Nullable ownersProvided;
/// The company’s phone number (used for verification).
@property (nonatomic, copy) NSString * _Nullable phone;
/// The business ID number of the company, as appropriate for the company’s country.
/// (Examples are an Employer ID Number in the U.S., a Business Number in Canada, or a Company Number in the UK.)
@property (nonatomic, copy) NSString * _Nullable taxID;
/// The jurisdiction in which the taxID is registered (Germany-based companies only).
@property (nonatomic, copy) NSString * _Nullable taxIDRegistrar;
/// The VAT number of the company.
@property (nonatomic, copy) NSString * _Nullable vatID;
/// :nodoc:
@property (nonatomic, copy) NSDictionary * _Nonnull additionalAPIParameters;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STPConnectAccountCompanyParams (SWIFT_EXTENSION(Stripe)) <STPFormEncodable>
+ (NSDictionary<NSString *, NSString *> * _Nonnull)propertyNamesToFormFieldNamesMapping SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)rootObjectName SWIFT_WARN_UNUSED_RESULT;
@end

@class STPConnectAccountIndividualVerification;

/// Information about the person represented by the account for use with <code>STPConnectAccountParams</code>.
/// seealso:
/// https://stripe.com/docs/api/tokens/create_account#create_account_token-account-individual
SWIFT_CLASS("_TtC6Stripe33STPConnectAccountIndividualParams")
@interface STPConnectAccountIndividualParams : NSObject
/// The individual’s primary address.
@property (nonatomic, strong) STPConnectAccountAddress * _Nullable address;
/// The Kana variation of the the individual’s primary address (Japan only).
@property (nonatomic, strong) STPConnectAccountAddress * _Nullable kanaAddress;
/// The Kanji variation of the the individual’s primary address (Japan only).
@property (nonatomic, strong) STPConnectAccountAddress * _Nullable kanjiAddress;
/// The individual’s date of birth.
/// Must include <code>day</code>, <code>month</code>, and <code>year</code>, and only those fields are used.
@property (nonatomic, copy) NSDateComponents * _Nullable dateOfBirth;
/// The individual’s email address.
@property (nonatomic, copy) NSString * _Nullable email;
/// The individual’s first name.
@property (nonatomic, copy) NSString * _Nullable firstName;
/// The Kana variation of the the individual’s first name (Japan only).
@property (nonatomic, copy) NSString * _Nullable kanaFirstName;
/// The Kanji variation of the individual’s first name (Japan only).
@property (nonatomic, copy) NSString * _Nullable kanjiFirstName;
/// The individual’s gender
/// International regulations require either “male” or “female”.
@property (nonatomic, copy) NSString * _Nullable gender;
/// The government-issued ID number of the individual, as appropriate for the representative’s country.
/// Examples are a Social Security Number in the U.S., or a Social Insurance Number in Canada.
/// Instead of the number itself, you can also provide a PII token created with Stripe.js (see https://stripe.com/docs/stripe-js/reference#collecting-pii-data).
@property (nonatomic, copy) NSString * _Nullable idNumber;
/// The individual’s last name.
@property (nonatomic, copy) NSString * _Nullable lastName;
/// The Kana varation of the individual’s last name (Japan only).
@property (nonatomic, copy) NSString * _Nullable kanaLastName;
/// The Kanji varation of the individual’s last name (Japan only).
@property (nonatomic, copy) NSString * _Nullable kanjiLastName;
/// The individual’s maiden name.
@property (nonatomic, copy) NSString * _Nullable maidenName;
/// Set of key-value pairs that you can attach to an object.
/// This can be useful for storing additional information about the object in a structured format.
@property (nonatomic, copy) NSDictionary * _Nullable metadata;
/// The individual’s phone number.
@property (nonatomic, copy) NSString * _Nullable phone;
/// The last four digits of the individual’s Social Security Number (U.S. only).
@property (nonatomic, copy) NSString * _Nullable ssnLast4;
/// The individual’s verification document information.
@property (nonatomic, strong) STPConnectAccountIndividualVerification * _Nullable verification;
/// :nodoc:
@property (nonatomic, copy) NSDictionary * _Nonnull additionalAPIParameters;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STPConnectAccountIndividualParams (SWIFT_EXTENSION(Stripe)) <STPFormEncodable>
+ (NSDictionary<NSString *, NSString *> * _Nonnull)propertyNamesToFormFieldNamesMapping SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)rootObjectName SWIFT_WARN_UNUSED_RESULT;
@end

@class STPConnectAccountVerificationDocument;

/// The individual’s verification document information for use with <code>STPConnectAccountIndividualParams</code>.
SWIFT_CLASS("_TtC6Stripe39STPConnectAccountIndividualVerification")
@interface STPConnectAccountIndividualVerification : NSObject
/// An identifying document, either a passport or local ID card.
@property (nonatomic, strong) STPConnectAccountVerificationDocument * _Nullable document;
/// A document showing address, either a passport, local ID card, or utility bill from a well-known utility company.
@property (nonatomic, strong) STPConnectAccountVerificationDocument * _Nullable additionalDocument;
@property (nonatomic, copy) NSDictionary * _Nonnull additionalAPIParameters;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STPConnectAccountIndividualVerification (SWIFT_EXTENSION(Stripe)) <STPFormEncodable>
+ (NSDictionary<NSString *, NSString *> * _Nonnull)propertyNamesToFormFieldNamesMapping SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)rootObjectName SWIFT_WARN_UNUSED_RESULT;
@end


/// Parameters for creating a Connect Account token.
/// seealso:
/// https://stripe.com/docs/api/tokens/create_account
SWIFT_CLASS("_TtC6Stripe23STPConnectAccountParams")
@interface STPConnectAccountParams : NSObject
/// Boolean indicating that the Terms Of Service were shown to the user &
/// the user accepted them.
@property (nonatomic, readonly, strong) NSNumber * _Nullable tosShownAndAccepted;
/// The business type.
@property (nonatomic, readonly) enum STPConnectAccountBusinessType businessType;
/// Information about the individual represented by the account.
@property (nonatomic, readonly, strong) STPConnectAccountIndividualParams * _Nullable individual;
/// Information about the company or business.
@property (nonatomic, readonly, strong) STPConnectAccountCompanyParams * _Nullable company;
@property (nonatomic, copy) NSDictionary * _Nonnull additionalAPIParameters;
/// Initialize <code>STPConnectAccountParams</code> with tosShownAndAccepted = YES
/// This method cannot be called with <code>wasAccepted == NO</code>, guarded by a <code>NSParameterAssert()</code>.
/// Use this init method if you want to set the <code>tosShownAndAccepted</code> parameter. If you
/// don’t, use the <code>initWithIndividual:</code> version instead.
/// \param wasAccepted Must be YES, but only if the user was shown & accepted the ToS
///
/// \param individual Information about the person represented by the account. See <code>STPConnectAccountIndividualParams</code>.
///
- (nullable instancetype)initWithTosShownAndAccepted:(BOOL)wasAccepted individual:(STPConnectAccountIndividualParams * _Nonnull)individual OBJC_DESIGNATED_INITIALIZER;
/// Initialize <code>STPConnectAccountParams</code> with tosShownAndAccepted = YES
/// This method cannot be called with <code>wasAccepted == NO</code>, guarded by a <code>NSParameterAssert()</code>.
/// Use this init method if you want to set the <code>tosShownAndAccepted</code> parameter. If you
/// don’t, use the <code>initWithCompany:</code> version instead.
/// \param wasAccepted Must be YES, but only if the user was shown & accepted the ToS
///
/// \param company Information about the company or business. See <code>STPConnectAccountCompanyParams</code>.
///
- (nullable instancetype)initWithTosShownAndAccepted:(BOOL)wasAccepted company:(STPConnectAccountCompanyParams * _Nonnull)company OBJC_DESIGNATED_INITIALIZER;
/// Initialize <code>STPConnectAccountParams</code> with the provided <code>individual</code> dictionary.
/// \param individual Information about the person represented by the account
/// This init method cannot change the <code>tosShownAndAccepted</code> parameter. Use
/// <code>initWithTosShownAndAccepted:individual:</code> instead if you need to do that.
///
- (nonnull instancetype)initWithIndividual:(STPConnectAccountIndividualParams * _Nonnull)individual OBJC_DESIGNATED_INITIALIZER;
/// Initialize <code>STPConnectAccountParams</code> with the provided <code>company</code> dictionary.
/// \param company Information about the company or business
/// This init method cannot change the <code>tosShownAndAccepted</code> parameter. Use
/// <code>initWithTosShownAndAccepted:company:</code> instead if you need to do that.
///
- (nonnull instancetype)initWithCompany:(STPConnectAccountCompanyParams * _Nonnull)company OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface STPConnectAccountParams (SWIFT_EXTENSION(Stripe)) <STPFormEncodable>
+ (NSString * _Nullable)rootObjectName SWIFT_WARN_UNUSED_RESULT;
+ (NSDictionary<NSString *, NSString *> * _Nonnull)propertyNamesToFormFieldNamesMapping SWIFT_WARN_UNUSED_RESULT;
@end


/// An identifying document, either a passport or local ID card for use with <code>STPConnectAccountIndividualVerification</code>.
SWIFT_CLASS("_TtC6Stripe37STPConnectAccountVerificationDocument")
@interface STPConnectAccountVerificationDocument : NSObject
/// The back of an ID returned by a file upload with a <code>purpose</code> value of <code>identity_document</code>.
/// seealso:
/// https://stripe.com/docs/api/files/create for file uploads
@property (nonatomic, copy) NSString * _Nullable back;
/// The front of an ID returned by a file upload with a <code>purpose</code> value of <code>identity_document</code>.
/// seealso:
/// https://stripe.com/docs/api/files/create for file uploads
@property (nonatomic, copy) NSString * _Nullable front;
@property (nonatomic, copy) NSDictionary * _Nonnull additionalAPIParameters;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STPConnectAccountVerificationDocument (SWIFT_EXTENSION(Stripe)) <STPFormEncodable>
+ (NSDictionary<NSString *, NSString *> * _Nonnull)propertyNamesToFormFieldNamesMapping SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)rootObjectName SWIFT_WARN_UNUSED_RESULT;
@end


/// Contains constants that represent different parts of a users contact/address information.
SWIFT_CLASS("_TtC6Stripe15STPContactField")
@interface STPContactField : NSObject
/// The contact’s full physical address.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) STPContactField * _Nonnull postalAddress;)
+ (STPContactField * _Nonnull)postalAddress SWIFT_WARN_UNUSED_RESULT;
/// The contact’s email address
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) STPContactField * _Nonnull emailAddress;)
+ (STPContactField * _Nonnull)emailAddress SWIFT_WARN_UNUSED_RESULT;
/// The contact’s phone number.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) STPContactField * _Nonnull phoneNumber;)
+ (STPContactField * _Nonnull)phoneNumber SWIFT_WARN_UNUSED_RESULT;
/// The contact’s name.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) STPContactField * _Nonnull name;)
+ (STPContactField * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end





/// An <code>STPCustomer</code> represents a deserialized Customer object from the Stripe API.
/// You shouldn’t need to instantiate an <code>STPCustomer</code> – you should instead use
/// <code>STPCustomerContext</code> to manage retrieving and updating a customer.
SWIFT_CLASS("_TtC6Stripe11STPCustomer")
@interface STPCustomer : NSObject
/// The Stripe ID of the customer, e.g. <code>cus_1234</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull stripeID;
/// The default source used to charge the customer.
@property (nonatomic, readonly, strong) id <STPSourceProtocol> _Nullable defaultSource;
/// The available payment sources the customer has (this may be an empty array).
@property (nonatomic, readonly, copy) NSArray<id <STPSourceProtocol>> * _Nonnull sources;
/// The customer’s email address.
@property (nonatomic, readonly, copy) NSString * _Nullable email;
/// The customer’s shipping address.
@property (nonatomic, strong) STPAddress * _Nullable shippingAddress;
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
/// Initialize a customer object with the provided values.
/// \param stripeID The ID of the customer, e.g. <code>cus_abc</code>
///
/// \param defaultSource The default source of the customer, such as an <code>STPCard</code> object. Can be nil.
///
/// \param sources All of the customer’s payment sources. This might be an empty array.
///
///
/// returns:
/// an instance of STPCustomer
- (nonnull instancetype)initWithStripeID:(NSString * _Nonnull)stripeID defaultSource:(id <STPSourceProtocol> _Nullable)defaultSource sources:(NSArray<id <STPSourceProtocol>> * _Nonnull)sources;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Replaces the customer’s <code>sources</code> and <code>defaultSource</code> based on whether or not
/// they should include Apple Pay sources. More details on documentation for
/// <code>STPCustomerContext includeApplePaySources</code>
/// @param filteringApplePay      If YES, Apple Pay sources will be ignored
- (void)updateSourcesFilteringApplePay:(BOOL)filteringApplePay;
@end


@interface STPCustomer (SWIFT_EXTENSION(Stripe)) <STPAPIResponseDecodable>
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
@end

@protocol STPCustomerEphemeralKeyProvider;

/// An <code>STPCustomerContext</code> retrieves and updates a Stripe customer and their attached
/// payment methods using an ephemeral key, a short-lived API key scoped to a specific
/// customer object. If your current user logs out of your app and a new user logs in,
/// be sure to either create a new instance of <code>STPCustomerContext</code> or clear the current
/// instance’s cache. On your backend, be sure to create and return a
/// new ephemeral key for the Customer object associated with the new user.
SWIFT_CLASS("_TtC6Stripe18STPCustomerContext")
@interface STPCustomerContext : NSObject <STPBackendAPIAdapter>
/// Initializes a new <code>STPCustomerContext</code> with the specified key provider.
/// Upon initialization, a CustomerContext will fetch a new ephemeral key from
/// your backend and use it to prefetch the customer object specified in the key.
/// Subsequent customer and payment method retrievals (e.g. by <code>STPPaymentContext</code>)
/// will return the prefetched customer / attached payment methods immediately if
/// its age does not exceed 60 seconds.
/// \param keyProvider The key provider the customer context will use.
///
///
/// returns:
/// the newly-instantiated customer context.
- (nonnull instancetype)initWithKeyProvider:(id <STPCustomerEphemeralKeyProvider> _Nonnull)keyProvider;
/// Initializes a new <code>STPCustomerContext</code> with the specified key provider.
/// Upon initialization, a CustomerContext will fetch a new ephemeral key from
/// your backend and use it to prefetch the customer object specified in the key.
/// Subsequent customer and payment method retrievals (e.g. by <code>STPPaymentContext</code>)
/// will return the prefetched customer / attached payment methods immediately if
/// its age does not exceed 60 seconds.
/// \param keyProvider The key provider the customer context will use.
///
/// \param apiClient The API Client to use to make requests.
///
///
/// returns:
/// the newly-instantiated customer context.
- (nonnull instancetype)initWithKeyProvider:(id <STPCustomerEphemeralKeyProvider> _Nullable)keyProvider apiClient:(STPAPIClient * _Nonnull)apiClient;
/// <code>STPCustomerContext</code> will cache its customer object and associated payment methods
/// for up to 60 seconds. If your current user logs out of your app and a new user logs
/// in, be sure to either call this method or create a new instance of <code>STPCustomerContext</code>.
/// On your backend, be sure to create and return a new ephemeral key for the
/// customer object associated with the new user.
- (void)clearCache;
/// By default, <code>STPCustomerContext</code> will filter Apple Pay when it retrieves
/// Payment Methods. Apple Pay payment methods should generally not be re-used and
/// shouldn’t be offered to customers as a new payment method (Apple Pay payment
/// methods may only be re-used for subscriptions).
/// If you are using <code>STPCustomerContext</code> to back your own UI and would like to
/// disable Apple Pay filtering, set this property to YES.
/// Note: If you are using <code>STPPaymentContext</code>, you should not change this property.
@property (nonatomic) BOOL includeApplePayPaymentMethods;
- (void)retrieveCustomer:(void (^ _Nullable)(STPCustomer * _Nullable, NSError * _Nullable))completion;
- (void)updateCustomerWithShippingAddress:(STPAddress * _Nonnull)shipping completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// A convenience method for attaching the PaymentMethod to the current Customer
- (void)attachPaymentMethodToCustomerWithPaymentMethodId:(NSString * _Nonnull)paymentMethodId completion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (void)attachPaymentMethodToCustomer:(STPPaymentMethod * _Nonnull)paymentMethod completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// A convenience method for detaching the PaymentMethod to the current Customer
- (void)detachPaymentMethodFromCustomerWithPaymentMethodId:(NSString * _Nonnull)paymentMethodId completion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (void)detachPaymentMethodFromCustomer:(STPPaymentMethod * _Nonnull)paymentMethod completion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (void)listPaymentMethodsForCustomerWithCompletion:(void (^ _Nullable)(NSArray<STPPaymentMethod *> * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class NSURLResponse;

/// Use <code>STPCustomerDeserializer</code> to convert a response from the Stripe API into an <code>STPCustomer</code> object. <code>STPCustomerDeserializer</code> expects the JSON response to be in the exact same format as the Stripe API.
SWIFT_CLASS("_TtC6Stripe23STPCustomerDeserializer")
@interface STPCustomerDeserializer : NSObject
/// If a customer was successfully parsed from the response, it will be set here. Otherwise, this value wil be nil (and the <code>error</code> property will explain what went wrong).
@property (nonatomic, readonly, strong) STPCustomer * _Nullable customer;
/// If the deserializer failed to parse a customer, this property will explain why (and the <code>customer</code> property will be nil).
@property (nonatomic, readonly) NSError * _Nullable error;
/// Initialize a customer deserializer. The <code>data</code>, <code>urlResponse</code>, and <code>error</code>
/// parameters are intended to be passed from an <code>NSURLSessionDataTask</code> callback.
/// After it has been initialized, you can inspect the <code>error</code> and <code>customer</code>
/// properties to see if the deserialization was successful. If <code>error</code> is nil,
/// <code>customer</code> will be non-nil (and vice versa).
/// \param data An <code>NSData</code> object representing encoded JSON for a Customer object
///
/// \param urlResponse The URL response obtained from the <code>NSURLSessionTask</code>
///
/// \param error Any error that occurred from the URL session task (if this
/// is non-nil, the <code>error</code> property will be set to this value after initialization).
///
- (nonnull instancetype)initWithData:(NSData * _Nullable)data urlResponse:(NSURLResponse * _Nullable)urlResponse error:(NSError * _Nullable)error;
/// Initializes a customer deserializer with a JSON dictionary. This JSON should be
/// in the exact same format as what the Stripe API returns. If it’s successfully
/// parsed, the <code>customer</code> parameter will be present after initialization;
/// otherwise <code>error</code> will be present.
/// \param json a JSON dictionary.
///
- (nonnull instancetype)initWithJsonResponse:(id _Nullable)json;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// You should make your application’s API client conform to this interface.
/// It provides a way for Stripe utility classes to request a new ephemeral key from
/// your backend, which it will use to retrieve and update Stripe API objects.
SWIFT_PROTOCOL("_TtP6Stripe31STPCustomerEphemeralKeyProvider_")
@protocol STPCustomerEphemeralKeyProvider <NSObject>
/// Creates a new ephemeral key for retrieving and updating a Stripe customer.
/// On your backend, you should create a new ephemeral key for the Stripe customer
/// associated with your user, and return the raw JSON response from the Stripe API.
/// For an example Ruby implementation of this API, refer to our example backend:
/// https://github.com/stripe/example-mobile-backend/blob/v18.1.0/web.rb
/// Back in your iOS app, once you have a response from this API, call the provided
/// completion block with the JSON response, or an error if one occurred.
/// \param apiVersion The Stripe API version to use when creating a key.
/// You should pass this parameter to your backend, and use it to set the API version
/// in your key creation request. Passing this version parameter ensures that the
/// Stripe SDK can always parse the ephemeral key response from your server.
///
/// \param completion Call this callback when you’re done fetching a new ephemeral
/// key from your backend. For example, <code>completion(json, nil)</code> (if your call succeeds)
/// or <code>completion(nil, error)</code> if an error is returned.
///
- (void)createCustomerKeyWithAPIVersion:(NSString * _Nonnull)apiVersion completion:(void (^ _Nonnull)(NSDictionary * _Nullable, NSError * _Nullable))completion;
@end


/// An individual’s date of birth.
/// See https://stripe.com/docs/api/tokens/create_account#create_account_token-account-individual-dob
SWIFT_CLASS("_TtC6Stripe14STPDateOfBirth")
@interface STPDateOfBirth : NSObject
/// The day of birth, between 1 and 31.
@property (nonatomic) NSInteger day;
/// The month of birth, between 1 and 12.
@property (nonatomic) NSInteger month;
/// The four-digit year of birth.
@property (nonatomic) NSInteger year;
@property (nonatomic, copy) NSDictionary * _Nonnull additionalAPIParameters;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STPDateOfBirth (SWIFT_EXTENSION(Stripe)) <STPFormEncodable>
+ (NSDictionary<NSString *, NSString *> * _Nonnull)propertyNamesToFormFieldNamesMapping SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)rootObjectName SWIFT_WARN_UNUSED_RESULT;
@end


/// You should make your application’s API client conform to this interface.
/// It provides a way for Stripe utility classes to request a new ephemeral key from
/// your backend, which it will use to retrieve and update Stripe API objects.
/// @deprecated use <code>STPCustomerEphemeralKeyProvider</code> or <code>STPIssuingCardEphemeralKeyProvider</code>
/// depending on the type of key that will@objc  be fetched.
SWIFT_PROTOCOL("_TtP6Stripe23STPEphemeralKeyProvider_") SWIFT_DEPRECATED_MSG("use `STPCustomerEphemeralKeyProvider` or `STPIssuingCardEphemeralKeyProvider` depending on the type of key that will be fetched.")
@protocol STPEphemeralKeyProvider <STPCustomerEphemeralKeyProvider>
@end

enum STPFPXBankBrand : NSInteger;

/// Convenience methods for using FPX bank brands.
SWIFT_CLASS("_TtC6Stripe10STPFPXBank")
@interface STPFPXBank : NSObject
/// Returns a string representation for the provided bank brand;
/// i.e. <code>STPFPXBank.stringFrom(brand:.uob) == "UOB Bank"</code>.
/// \param brand The brand you want to convert to a string
///
///
/// returns:
/// A string representing the brand, suitable for displaying to a user.
+ (NSString * _Nullable)stringFrom:(enum STPFPXBankBrand)brand SWIFT_WARN_UNUSED_RESULT;
/// Returns a bank brand provided a string representation identifying a bank brand;
/// i.e. <code>STPFPXBankBrandFromIdentifier(@"uob") == STPCardBrandUob</code>.
/// \param identifier The identifier for the brand
///
///
/// returns:
/// The STPFPXBankBrand enum value
+ (enum STPFPXBankBrand)brandFrom:(NSString * _Nullable)identifier SWIFT_WARN_UNUSED_RESULT;
/// Returns a string representation identifying the provided bank brand;
/// i.e. <code>STPIdentifierFromFPXBankBrand(STPCardBrandUob) ==  @"uob"</code>.
/// \param brand The brand you want to convert to a string
///
///
/// returns:
/// A string representing the brand, suitable for using with the Stripe API.
+ (NSString * _Nullable)identifierFrom:(enum STPFPXBankBrand)brand SWIFT_WARN_UNUSED_RESULT;
/// Returns the code identifying the provided bank brand in the FPX status API;
/// i.e. <code>STPIdentifierFromFPXBankBrand(STPCardBrandUob) ==  @"UOB0226"</code>.
/// \param brand The brand you want to convert to an FPX bank code
///
/// \param isBusiness Requests the code for the business version of this bank brand, which may be different from the code used for individual accounts
///
///
/// returns:
/// A string representing the brand, suitable for checking against the FPX status API.
+ (NSString * _Nullable)bankCodeFrom:(enum STPFPXBankBrand)brand :(BOOL)isBusiness SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// The various bank brands available for FPX payments.
typedef SWIFT_ENUM(NSInteger, STPFPXBankBrand, open) {
/// Maybank2U
  STPFPXBankBrandMaybank2U = 0,
/// CIMB Clicks
  STPFPXBankBrandCIMB = 1,
/// Public Bank
  STPFPXBankBrandPublicBank = 2,
/// RHB Bank
  STPFPXBankBrandRHB = 3,
/// Hong Leong Bank
  STPFPXBankBrandHongLeongBank = 4,
/// AmBank
  STPFPXBankBrandAmbank = 5,
/// Affin Bank
  STPFPXBankBrandAffinBank = 6,
/// Alliance Bank
  STPFPXBankBrandAllianceBank = 7,
/// Bank Islam
  STPFPXBankBrandBankIslam = 8,
/// Bank Muamalat
  STPFPXBankBrandBankMuamalat = 9,
/// Bank Rakyat
  STPFPXBankBrandBankRakyat = 10,
/// BSN
  STPFPXBankBrandBSN = 11,
/// HSBC BANK
  STPFPXBankBrandHSBC = 12,
/// KFH
  STPFPXBankBrandKFH = 13,
/// Maybank2E
  STPFPXBankBrandMaybank2E = 14,
/// OCBC Bank
  STPFPXBankBrandOcbc = 15,
/// Standard Chartered
  STPFPXBankBrandStandardChartered = 16,
/// UOB Bank
  STPFPXBankBrandUOB = 17,
/// An unknown bank
  STPFPXBankBrandUnknown = 18,
};

@class PKAddPaymentPassRequestConfiguration;
@protocol PKAddPaymentPassViewControllerDelegate;

/// This class is a piece of fake UI that is intended to mimic <code>PKAddPaymentPassViewController</code>. That class is restricted to apps with a special entitlement from Apple, and as such can be difficult to build and test against. This class implements the same public API as <code>PKAddPaymentPassViewController</code>, and can be used to develop against the Stripe API in <em>testmode only</em>. (Obviously it will not actually place cards into the user’s Apple Pay wallet either.) When it’s time to go to production, you may simply replace all references to <code>STPFakeAddPaymentPassViewController</code> in your app with <code>PKAddPaymentPassViewController</code> and it will continue to function. For more information on developing against this API, please see https://stripe.com/docs/issuing/cards/digital-wallets .
SWIFT_CLASS("_TtC6Stripe35STPFakeAddPaymentPassViewController")
@interface STPFakeAddPaymentPassViewController : UIViewController
/// @see PKAddPaymentPassViewController
+ (BOOL)canAddPaymentPass SWIFT_WARN_UNUSED_RESULT;
/// @see PKAddPaymentPassViewController
- (nullable instancetype)initWithRequestConfiguration:(PKAddPaymentPassRequestConfiguration * _Nonnull)configuration delegate:(id <PKAddPaymentPassViewControllerDelegate> _Nullable)delegate OBJC_DESIGNATED_INITIALIZER;
/// @see PKAddPaymentPassViewController
@property (nonatomic, weak) id <PKAddPaymentPassViewControllerDelegate> _Nullable delegate;
/// :nodoc:
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder;
/// :nodoc:
- (void)viewDidLoad;
@end

enum STPFilePurpose : NSInteger;

/// Representation of a file upload object in the Stripe API.
/// seealso:
/// https://stripe.com/docs/api#file_uploads
SWIFT_CLASS("_TtC6Stripe7STPFile")
@interface STPFile : NSObject <STPAPIResponseDecodable>
/// The token for this file.
@property (nonatomic, readonly, copy) NSString * _Nullable fileId;
/// The date this file was created.
@property (nonatomic, readonly, copy) NSDate * _Nullable created;
/// The purpose of this file. This can be either an identifing document or an evidence dispute.
/// seealso:
/// https://stripe.com/docs/file-upload
@property (nonatomic, readonly) enum STPFilePurpose purpose;
/// The file size in bytes.
@property (nonatomic, readonly, strong) NSNumber * _Nullable size;
/// The file type. This can be “jpg”, “png”, or “pdf”.
@property (nonatomic, readonly, copy) NSString * _Nullable type;
/// Returns the string value for a purpose.
+ (NSString * _Nullable)stringFromPurpose:(enum STPFilePurpose)purpose SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
@property (nonatomic, readonly) NSUInteger hash;
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
@end

/// The purpose of the uploaded file.
/// seealso:
/// https://stripe.com/docs/file-upload
typedef SWIFT_ENUM(NSInteger, STPFilePurpose, open) {
/// Identity document file
  STPFilePurposeIdentityDocument = 0,
/// Dispute evidence file
  STPFilePurposeDisputeEvidence = 1,
/// A file of unknown purpose type
  STPFilePurposeUnknown = 2,
};







/// This class lets you access card icons used by the Stripe SDK. All icons are 32 x 20 points.
SWIFT_CLASS("_TtC6Stripe15STPImageLibrary")
@interface STPImageLibrary : NSObject
/// An icon representing Apple Pay.
+ (UIImage * _Nonnull)applePayCardImage SWIFT_WARN_UNUSED_RESULT;
/// An icon representing American Express.
+ (UIImage * _Nonnull)amexCardImage SWIFT_WARN_UNUSED_RESULT;
/// An icon representing Diners Club.
+ (UIImage * _Nonnull)dinersClubCardImage SWIFT_WARN_UNUSED_RESULT;
/// An icon representing Discover.
+ (UIImage * _Nonnull)discoverCardImage SWIFT_WARN_UNUSED_RESULT;
/// An icon representing JCB.
+ (UIImage * _Nonnull)jcbCardImage SWIFT_WARN_UNUSED_RESULT;
/// An icon representing Mastercard.
+ (UIImage * _Nonnull)mastercardCardImage SWIFT_WARN_UNUSED_RESULT;
/// An icon representing UnionPay.
+ (UIImage * _Nonnull)unionPayCardImage SWIFT_WARN_UNUSED_RESULT;
/// An icon representing Visa.
+ (UIImage * _Nonnull)visaCardImage SWIFT_WARN_UNUSED_RESULT;
/// An icon to use when the type of the card is unknown.
+ (UIImage * _Nonnull)unknownCardCardImage SWIFT_WARN_UNUSED_RESULT;
/// This returns the appropriate icon for the specified card brand.
+ (UIImage * _Nonnull)brandImageForCardBrand:(enum STPCardBrand)brand SWIFT_WARN_UNUSED_RESULT;
/// This returns the appropriate icon for the specified bank brand.
+ (UIImage * _Nonnull)brandImageForFPXBankBrand:(enum STPFPXBankBrand)brand SWIFT_WARN_UNUSED_RESULT;
/// An icon representing FPX.
+ (UIImage * _Nonnull)fpxLogo SWIFT_WARN_UNUSED_RESULT;
/// A large branding image for FPX.
+ (UIImage * _Nonnull)largeFpxLogo SWIFT_WARN_UNUSED_RESULT;
/// An icon representing Afterpay.
+ (UIImage * _Nonnull)afterpayLogo SWIFT_WARN_UNUSED_RESULT;
/// This returns the appropriate icon for the specified card brand as a
/// single color template that can be tinted
+ (UIImage * _Nonnull)templatedBrandImageForCardBrand:(enum STPCardBrand)brand SWIFT_WARN_UNUSED_RESULT;
/// This returns a small icon indicating the CVC location for the given card brand.
+ (UIImage * _Nonnull)cvcImageForCardBrand:(enum STPCardBrand)brand SWIFT_WARN_UNUSED_RESULT;
/// This returns a small icon indicating a card number error for the given card brand.
+ (UIImage * _Nonnull)errorImageForCardBrand:(enum STPCardBrand)brand SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


enum STPIntentActionType : NSInteger;
@class STPIntentActionRedirectToURL;
@class STPIntentActionOXXODisplayDetails;
@class STPIntentActionAlipayHandleRedirect;
@class STPIntentActionWechatPayRedirectToApp;
@class STPIntentActionBoletoDisplayDetails;

/// Next action details for <code>STPPaymentIntent</code> and <code>STPSetupIntent</code>.
/// This is a container for the various types that are available.
/// Check the <code>type</code> to see which one it is, and then use the related
/// property for the details necessary to handle it.
/// You cannot directly instantiate an <code>STPIntentAction</code>.
SWIFT_CLASS("_TtC6Stripe15STPIntentAction")
@interface STPIntentAction : NSObject
/// The type of action needed. The value of this field determines which
/// property of this object contains further details about the action.
@property (nonatomic, readonly) enum STPIntentActionType type;
/// The details for authorizing via URL, when <code>type == .redirectToURL</code>
@property (nonatomic, readonly, strong) STPIntentActionRedirectToURL * _Nullable redirectToURL;
/// The details for displaying OXXO voucher via URL, when <code>type == .OXXODisplayDetails</code>
@property (nonatomic, readonly, strong) STPIntentActionOXXODisplayDetails * _Nullable oxxoDisplayDetails;
/// Contains instructions for authenticating a payment by redirecting your customer to Alipay App or website.
@property (nonatomic, readonly, strong) STPIntentActionAlipayHandleRedirect * _Nullable alipayHandleRedirect;
/// Contains instructions for authenticating a payment by redirecting your customer to the WeChat Pay app.
@property (nonatomic, readonly, strong) STPIntentActionWechatPayRedirectToApp * _Nullable weChatPayRedirectToApp;
/// The details for displaying Boleto voucher via URL, when <code>type == .boleto</code>
@property (nonatomic, readonly, strong) STPIntentActionBoletoDisplayDetails * _Nullable boletoDisplayDetails;
/// :nodoc:
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface STPIntentAction (SWIFT_EXTENSION(Stripe)) <STPAPIResponseDecodable>
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
@end


@interface STPIntentAction (SWIFT_EXTENSION(Stripe))
/// The details for authorizing via URL, when <code>type == STPIntentActionTypeRedirectToURL</code>
/// @deprecated Use <code>redirectToURL</code> instead.
@property (nonatomic, readonly, strong) STPIntentActionRedirectToURL * _Nullable authorizeWithURL SWIFT_DEPRECATED_MSG("Use `redirectToURL` instead.", "redirectToURL");
@end


/// Contains instructions for authenticating a payment by redirecting your customer to Alipay App or website.
/// You cannot directly instantiate an <code>STPPaymentIntentActionAlipayHandleRedirect</code>.
SWIFT_CLASS("_TtC6Stripe35STPIntentActionAlipayHandleRedirect")
@interface STPIntentActionAlipayHandleRedirect : NSObject
/// The native URL you must redirect your customer to in order to authenticate the payment.
@property (nonatomic, readonly, copy) NSURL * _Nullable nativeURL;
/// If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion.
@property (nonatomic, readonly, copy) NSURL * _Nonnull returnURL;
/// The URL you must redirect your customer to in order to authenticate the payment.
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
/// :nodoc:
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface STPIntentActionAlipayHandleRedirect (SWIFT_EXTENSION(Stripe)) <STPAPIResponseDecodable>
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
@end



/// Contains Boleto details necessary for the customer to complete the payment.
SWIFT_CLASS("_TtC6Stripe35STPIntentActionBoletoDisplayDetails")
@interface STPIntentActionBoletoDisplayDetails : NSObject <STPAPIResponseDecodable>
/// The boleto voucher number.
@property (nonatomic, readonly, copy) NSString * _Nonnull number;
/// The expiry date of the boleto voucher.
@property (nonatomic, readonly, copy) NSDate * _Nonnull expiresAt;
/// The URL to the hosted boleto voucher page, which allows customers to view the boleto voucher.
@property (nonatomic, readonly, copy) NSURL * _Nonnull hostedVoucherURL;
/// :nodoc:
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Contains OXXO details necessary for the customer to complete the payment.
SWIFT_CLASS("_TtC6Stripe33STPIntentActionOXXODisplayDetails")
@interface STPIntentActionOXXODisplayDetails : NSObject <STPAPIResponseDecodable>
/// The timestamp after which the OXXO voucher expires.
@property (nonatomic, readonly, copy) NSDate * _Nonnull expiresAfter;
/// The URL for the hosted OXXO voucher page, which allows customers to view and print an OXXO voucher.
@property (nonatomic, readonly, copy) NSURL * _Nonnull hostedVoucherURL;
/// OXXO reference number.
@property (nonatomic, readonly, copy) NSString * _Nonnull number;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Contains instructions for authenticating a payment by redirecting your customer to another page or application.
/// You cannot directly instantiate an <code>STPIntentActionRedirectToURL</code>.
/// seealso:
/// https://stripe.com/docs/api/payment_intents/object#payment_intent_object-next_action
SWIFT_CLASS("_TtC6Stripe28STPIntentActionRedirectToURL")
@interface STPIntentActionRedirectToURL : NSObject
/// The URL you must redirect your customer to in order to authenticate the payment.
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
/// The return URL that’ll be redirected back to when the user is done
/// authenticating.
@property (nonatomic, readonly, copy) NSURL * _Nullable returnURL;
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface STPIntentActionRedirectToURL (SWIFT_EXTENSION(Stripe)) <STPAPIResponseDecodable>
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
@end

/// Types of next actions for <code>STPPaymentIntent</code> and <code>STPSetupIntent</code>.
/// You shouldn’t need to inspect this yourself; <code>STPPaymentHandler</code> will handle any next actions for you.
typedef SWIFT_ENUM(NSInteger, STPIntentActionType, open) {
/// This is an unknown action that’s been added since the SDK
/// was last updated.
/// Update your SDK, or use the <code>nextAction.allResponseFields</code>
/// for custom handling.
  STPIntentActionTypeUnknown = 0,
/// The payment intent needs to be authorized by the user. We provide
/// <code>STPPaymentHandler</code> to handle the url redirections necessary.
  STPIntentActionTypeRedirectToURL = 1,
/// The payment intent requires additional action handled by <code>STPPaymentHandler</code>.
  STPIntentActionTypeUseStripeSDK = 2,
/// The action type is OXXO payment. We provide <code>STPPaymentHandler</code> to display
/// the OXXO voucher.
  STPIntentActionTypeOXXODisplayDetails = 3,
/// Contains instructions for authenticating a payment by redirecting your customer to Alipay App or website.
  STPIntentActionTypeAlipayHandleRedirect = 4,
/// The action type for BLIK payment methods. The customer must authorize the transaction in their banking app within 1 minute.
  STPIntentActionTypeBLIKAuthorize = 5,
/// Contains instructions for authenticating a payment by redirecting your customer to the WeChat Pay App.
  STPIntentActionTypeWeChatPayRedirectToApp = 6,
/// The payment intent requires authorization with Payment Sheet.
  STPIntentActionTypeLinkAuthenticateAccount = 7,
/// The action type is Boleto payment. We provide <code>STPPaymentHandler</code> to display the Boleto voucher.
  STPIntentActionTypeBoletoDisplayDetails = 8,
};


/// Contains instructions for authenticating a payment by redirecting your customer to WeChat Pay app.
/// You cannot directly instantiate an <code>STPIntentActionWechatPayRedirectToApp</code>.
SWIFT_CLASS("_TtC6Stripe37STPIntentActionWechatPayRedirectToApp")
@interface STPIntentActionWechatPayRedirectToApp : NSObject
/// The native URL you must redirect your customer to in order to authenticate the payment.
@property (nonatomic, readonly, copy) NSURL * _Nullable nativeURL;
/// :nodoc:
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface STPIntentActionWechatPayRedirectToApp (SWIFT_EXTENSION(Stripe)) <STPAPIResponseDecodable>
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
@end


/// You should make your application’s API client conform to this interface.
/// It provides a way for Stripe utility classes to request a new ephemeral key from
/// your backend, which it will use to retrieve and update Stripe API objects.
SWIFT_PROTOCOL("_TtP6Stripe34STPIssuingCardEphemeralKeyProvider_")
@protocol STPIssuingCardEphemeralKeyProvider <NSObject>
/// Creates a new ephemeral key for retrieving and updating a Stripe Issuing Card.
/// On your backend, you should create a new ephemeral key for your logged-in user’s
/// primary Issuing Card, and return the raw JSON response from the Stripe API.
/// For an example Ruby implementation of this API, refer to our example backend:
/// https://github.com/stripe/example-mobile-backend/blob/v18.1.0/web.rb
/// Back in your iOS app, once you have a response from this API, call the provided
/// completion block with the JSON response, or an error if one occurred.
/// \param apiVersion The Stripe API version to use when creating a key.
/// You should pass this parameter to your backend, and use it to set the API version
/// in your key creation request. Passing this version parameter ensures that the
/// Stripe SDK can always parse the ephemeral key response from your server.
///
/// \param completion Call this callback when you’re done fetching a new ephemeral
/// key from your backend. For example, <code>completion(json, nil)</code> (if your call succeeds)
/// or <code>completion(nil, error)</code> if an error is returned.
///
- (void)createIssuingCardKeyWithAPIVersion:(NSString * _Nonnull)apiVersion completion:(void (^ _Nonnull)(NSDictionary * _Nullable, NSError * _Nullable))completion;
@end


/// Information related to a Stripe Issuing card, including the PIN
SWIFT_CLASS("_TtC6Stripe17STPIssuingCardPin")
@interface STPIssuingCardPin : NSObject
/// The PIN for the card
@property (nonatomic, readonly, copy) NSString * _Nullable pin;
/// If the PIN failed to be created, this error might be present
@property (nonatomic, readonly, copy) NSDictionary * _Nullable error;
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface STPIssuingCardPin (SWIFT_EXTENSION(Stripe)) <STPAPIResponseDecodable>
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
@end

enum STPKlarnaLineItemType : NSInteger;

/// An object representing a line item in a Klarna source.
/// seealso:
/// https://stripe.com/docs/sources/klarna#create-source
SWIFT_CLASS("_TtC6Stripe17STPKlarnaLineItem")
@interface STPKlarnaLineItem : NSObject
/// The line item’s type. One of <code>sku</code> (for a product), <code>tax</code> (for taxes), or <code>shipping</code> (for shipping costs).
@property (nonatomic) enum STPKlarnaLineItemType itemType;
/// The human-readable description for the line item.
@property (nonatomic, copy) NSString * _Nonnull itemDescription;
/// The quantity to display for this line item.
@property (nonatomic, strong) NSNumber * _Nonnull quantity;
/// The total price of this line item.
/// Note: This is the total price after multiplying by the quantity, not
/// the price of an individual item. It is denominated in the currency
/// of the STPSourceParams which contains it.
@property (nonatomic, strong) NSNumber * _Nonnull totalAmount;
/// Initialize this <code>STPKlarnaLineItem</code> with a set of parameters.
/// \param itemType The line item’s type.
///
/// \param itemDescription The human-readable description for the line item.
///
/// \param quantity The quantity to display for this line item.
///
/// \param totalAmount The total price of this line item.
///
- (nonnull instancetype)initWithItemType:(enum STPKlarnaLineItemType)itemType itemDescription:(NSString * _Nonnull)itemDescription quantity:(NSNumber * _Nonnull)quantity totalAmount:(NSNumber * _Nonnull)totalAmount OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The type of the Klarna line item.
typedef SWIFT_ENUM(NSInteger, STPKlarnaLineItemType, open) {
/// The line item for a product
  STPKlarnaLineItemTypeSKU = 0,
/// The line item for taxes
  STPKlarnaLineItemTypeTax = 1,
/// The line item for shipping costs
  STPKlarnaLineItemTypeShipping = 2,
};

/// Custom payment methods for Klarna
/// seealso:
/// https://stripe.com/docs/sources/klarna#create-source
typedef SWIFT_ENUM(NSInteger, STPKlarnaPaymentMethods, open) {
/// Don’t specify any custom payment methods.
  STPKlarnaPaymentMethodsNone = 0,
/// Offer payments over 4 installments. (a.k.a. Pay Later in 4)
  STPKlarnaPaymentMethodsPayIn4 = 1,
/// Offer payments over an arbitrary number of installments. (a.k.a. Slice It)
  STPKlarnaPaymentMethodsInstallments = 2,
/// Offer payments over 4 or an arbitrary number of installments.
  STPKlarnaPaymentMethodsPayIn4OrInstallments = 3,
};

enum STPMandateCustomerAcceptanceType : NSInteger;
@class STPMandateOnlineParams;

/// An object that contains details about the customer acceptance of the Mandate. - seealso: https://stripe.com/docs/api/payment_intents/confirm#confirm_payment_intent-mandate_data-customer_acceptance
SWIFT_CLASS("_TtC6Stripe34STPMandateCustomerAcceptanceParams")
@interface STPMandateCustomerAcceptanceParams : NSObject <STPFormEncodable>
/// The type of customer acceptance information included with the Mandate.
@property (nonatomic) enum STPMandateCustomerAcceptanceType type;
/// If this is a Mandate accepted online, this object contains details about the online acceptance.
/// @note If <code>type == STPMandateCustomerAcceptanceTypeOnline</code>, this value must be non-nil.
@property (nonatomic, strong) STPMandateOnlineParams * _Nullable onlineParams;
@property (nonatomic, copy) NSDictionary * _Nonnull additionalAPIParameters;
/// Initializes an empty STPMandateCustomerAcceptanceParams.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (NSDictionary<NSString *, NSString *> * _Nonnull)propertyNamesToFormFieldNamesMapping SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)rootObjectName SWIFT_WARN_UNUSED_RESULT;
@end

/// The type of customer acceptance information included with the Mandate.
typedef SWIFT_ENUM(NSInteger, STPMandateCustomerAcceptanceType, open) {
/// A Mandate that was accepted online.
  STPMandateCustomerAcceptanceTypeOnline = 0,
/// A Mandate that was accepted offline.
  STPMandateCustomerAcceptanceTypeOffline = 1,
};


/// This object contains details about the Mandate to create. - seealso: https://stripe.com/docs/api/payment_intents/confirm#confirm_payment_intent-mandate_data
SWIFT_CLASS("_TtC6Stripe20STPMandateDataParams")
@interface STPMandateDataParams : NSObject
/// Details about the customer acceptance of the Mandate.
@property (nonatomic, readonly, strong) STPMandateCustomerAcceptanceParams * _Nonnull customerAcceptance;
@property (nonatomic, copy) NSDictionary * _Nonnull additionalAPIParameters;
/// Initializes an STPMandateDataParams from an STPMandateCustomerAcceptanceParams.
- (nonnull instancetype)initWithCustomerAcceptance:(STPMandateCustomerAcceptanceParams * _Nonnull)customerAcceptance OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface STPMandateDataParams (SWIFT_EXTENSION(Stripe)) <STPFormEncodable>
+ (NSDictionary<NSString *, NSString *> * _Nonnull)propertyNamesToFormFieldNamesMapping SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)rootObjectName SWIFT_WARN_UNUSED_RESULT;
@end


/// Contains details about a Mandate accepted online. - seealso: https://stripe.com/docs/api/payment_intents/confirm#confirm_payment_intent-mandate_data-customer_acceptance-online
SWIFT_CLASS("_TtC6Stripe22STPMandateOnlineParams")
@interface STPMandateOnlineParams : NSObject
/// The IP address from which the Mandate was accepted by the customer.
@property (nonatomic, readonly, copy) NSString * _Nonnull ipAddress;
/// The user agent of the browser from which the Mandate was accepted by the customer.
@property (nonatomic, readonly, copy) NSString * _Nonnull userAgent;
@property (nonatomic, copy) NSDictionary * _Nonnull additionalAPIParameters;
/// Initializes an STPMandateOnlineParams.
/// \param ipAddress The IP address from which the Mandate was accepted by the customer.
///
/// \param userAgent The user agent of the browser from which the Mandate was accepted by the customer.
///
///
/// returns:
/// A new STPMandateOnlineParams instance with the specified parameters.
- (nonnull instancetype)initWithIPAddress:(NSString * _Nonnull)ipAddress userAgent:(NSString * _Nonnull)userAgent OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface STPMandateOnlineParams (SWIFT_EXTENSION(Stripe)) <STPFormEncodable>
+ (NSDictionary<NSString *, NSString *> * _Nonnull)propertyNamesToFormFieldNamesMapping SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)rootObjectName SWIFT_WARN_UNUSED_RESULT;
@end



/// This class can be used wherever you’d use a <code>UIActivityIndicatorView</code> and is intended to have a similar API. It renders as a spinning circle with a gap in it, similar to what you see in the App Store app or in the Apple Pay dialog when making a purchase. To change its color, set the <code>tintColor</code> property.
SWIFT_CLASS("_TtC6Stripe31STPPaymentActivityIndicatorView")
@interface STPPaymentActivityIndicatorView : UIView
/// Tell the view to start or stop spinning. If <code>hidesWhenStopped</code> is true, it will fade in/out if animated is true.
- (void)setAnimating:(BOOL)animating animated:(BOOL)animated;
/// Whether or not the view is animating.
@property (nonatomic) BOOL animating;
/// If true, the view will hide when it is not spinning. Default is true.
@property (nonatomic) BOOL hidesWhenStopped;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
/// :nodoc:
@property (nonatomic, strong) UIColor * _Null_unspecified tintColor;
/// :nodoc:
- (void)layoutSubviews;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
@end

@class STPPaymentMethodCardParams;
@class UITraitCollection;

/// STPPaymentCardTextField is a text field with similar properties to UITextField,
/// but specialized for credit/debit card information. It manages
/// multiple UITextFields under the hood to collect this information. It’s
/// designed to fit on a single line, and from a design perspective can be used
/// anywhere a UITextField would be appropriate.
IB_DESIGNABLE
SWIFT_CLASS("_TtC6Stripe23STPPaymentCardTextField")
@interface STPPaymentCardTextField : UIControl <UIKeyInput>
/// :nodoc:
- (BOOL)textField:(UITextField * _Nonnull)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
/// seealso:
/// STPPaymentCardTextFieldDelegate
@property (nonatomic, weak) IBOutlet id <STPPaymentCardTextFieldDelegate> _Nullable delegate;
/// The font used in each child field. Default is <code>UIFont.systemFont(ofSize:18)</code>.
@property (nonatomic, strong) UIFont * _Nonnull font;
/// The text color to be used when entering valid text. Default is <code>.label</code>.
@property (nonatomic, strong) UIColor * _Nonnull textColor;
/// The text color to be used when the user has entered invalid information,
/// such as an invalid card number.
/// Default is <code>.red</code>.
@property (nonatomic, strong) UIColor * _Nonnull textErrorColor;
/// The text placeholder color used in each child field.
/// This will also set the color of the card placeholder icon.
/// Default is <code>.systemGray2</code>.
@property (nonatomic, strong) UIColor * _Nonnull placeholderColor;
/// The placeholder for the card number field.
/// Default is “4242424242424242”.
/// If this is set to something that resembles a card number, it will automatically
/// format it as such (in other words, you don’t need to add spaces to this string).
@property (nonatomic, copy) IBInspectable NSString * _Nullable numberPlaceholder;
/// The placeholder for the expiration field. Defaults to “MM/YY”.
@property (nonatomic, copy) IBInspectable NSString * _Nullable expirationPlaceholder;
/// The placeholder for the cvc field. Defaults to “CVC”.
@property (nonatomic, copy) IBInspectable NSString * _Nullable cvcPlaceholder;
/// The placeholder for the postal code field. Defaults to “ZIP” for United States
/// or @“Postal” for all other country codes.
@property (nonatomic, copy) IBInspectable NSString * _Nullable postalCodePlaceholder;
/// The cursor color for the field.
/// This is a proxy for the view’s tintColor property, exposed for clarity only
/// (in other words, calling setCursorColor is identical to calling setTintColor).
@property (nonatomic, strong) UIColor * _Nonnull cursorColor;
/// The border color for the field.
/// Can be nil (in which case no border will be drawn).
/// Default is .systemGray2.
@property (nonatomic, strong) UIColor * _Nullable borderColor;
/// The width of the field’s border.
/// Default is 1.0.
@property (nonatomic) CGFloat borderWidth;
/// The corner radius for the field’s border.
/// Default is 5.0.
@property (nonatomic) CGFloat cornerRadius;
/// The keyboard appearance for the field.
/// Default is UIKeyboardAppearanceDefault.
@property (nonatomic) UIKeyboardAppearance keyboardAppearance;
/// This behaves identically to setting the inputView for each child text field.
@property (nonatomic, strong) UIView * _Nullable inputView;
/// This behaves identically to setting the inputAccessoryView for each child text field.
@property (nonatomic, strong) UIView * _Nullable inputAccessoryView;
/// The curent brand image displayed in the receiver.
@property (nonatomic, readonly, strong) UIImage * _Nullable brandImage;
/// Whether or not the form currently contains a valid card number,
/// expiration date, CVC, and postal code (if required).
/// seealso:
/// STPCardValidator
@property (nonatomic, readonly) BOOL isValid;
/// Enable/disable selecting or editing the field. Useful when submitting card details to Stripe.
@property (nonatomic, getter=isEnabled) BOOL enabled;
/// The current card number displayed by the field.
/// May or may not be valid, unless <code>isValid</code> is true, in which case it is guaranteed
/// to be valid.
@property (nonatomic, readonly, copy) NSString * _Nullable cardNumber;
/// The current expiration month displayed by the field (1 = January, etc).
/// May or may not be valid, unless <code>isValid</code> is true, in which case it is
/// guaranteed to be valid.
@property (nonatomic, readonly) NSInteger expirationMonth;
/// The current expiration month displayed by the field, as a string. T
/// This may or may not be a valid entry (i.e. “0”) unless <code>isValid</code> is true.
/// It may be also 0-prefixed (i.e. “01” for January).
@property (nonatomic, readonly, copy) NSString * _Nullable formattedExpirationMonth;
/// The current expiration year displayed by the field, modulo 100
/// (e.g. the year 2015 will be represented as 15).
/// May or may not be valid, unless <code>isValid</code> is true, in which case it is
/// guaranteed to be valid.
@property (nonatomic, readonly) NSInteger expirationYear;
/// The current expiration year displayed by the field, as a string.
/// This is a 2-digit year (i.e. “15”), and may or may not be a valid entry
/// unless <code>isValid</code> is true.
@property (nonatomic, readonly, copy) NSString * _Nullable formattedExpirationYear;
/// The current card CVC displayed by the field.
/// May or may not be valid, unless <code>isValid</code> is true, in which case it
/// is guaranteed to be valid.
@property (nonatomic, readonly, copy) NSString * _Nullable cvc;
/// The current card ZIP or postal code displayed by the field.
@property (nonatomic, copy) NSString * _Nullable postalCode;
/// Controls if a postal code entry field can be displayed to the user.
/// Default is YES.
/// If YES, the type of code entry shown is controlled by the set <code>countryCode</code>
/// value. Some country codes may result in no postal code entry being shown if
/// those countries do not commonly use postal codes.
/// If NO, no postal code entry will ever be displayed.
@property (nonatomic) BOOL postalCodeEntryEnabled;
/// The two-letter ISO country code that corresponds to the user’s billing address.
/// If <code>postalCodeEntryEnabled</code> is YES, this controls which type of entry is allowed.
/// If <code>postalCodeEntryEnabled</code> is NO, this property currently has no effect.
/// If set to nil and postal code entry is enabled, the country from the user’s current
/// locale will be filled in. Otherwise the specific country code set will be used.
/// By default this will fetch the user’s current country code from NSLocale.
@property (nonatomic, copy) NSString * _Nullable countryCode;
/// Convenience property for creating an <code>STPPaymentMethodCardParams</code> from the currently entered information
/// or programmatically setting the field’s contents. For example, if you’re using another library
/// to scan your user’s credit card with a camera, you can assemble that data into an <code>STPPaymentMethodCardParams</code>
/// object and set this property to that object to prefill the fields you’ve collected.
/// Accessing this property returns a <em>copied</em> <code>cardParams</code>. The only way to change properties in this
/// object is to make changes to a <code>STPPaymentMethodCardParams</code> you own (retrieved from this text field if desired),
/// and then set this property to the new value.
@property (nonatomic, strong) STPPaymentMethodCardParams * _Nonnull cardParams;
/// Causes the text field to begin editing. Presents the keyboard.
/// seealso:
/// UIResponder
///
/// returns:
/// Whether or not the text field successfully began editing.
- (BOOL)becomeFirstResponder;
/// Causes the text field to stop editing. Dismisses the keyboard.
/// seealso:
/// UIResponder
///
/// returns:
/// Whether or not the field successfully stopped editing.
- (BOOL)resignFirstResponder;
/// Resets all of the contents of all of the fields. If the field is currently being edited, the number field will become selected.
- (void)clear;
/// Returns the cvc image used for a card brand.
/// Override this method in a subclass if you would like to provide custom images.
/// \param cardBrand The brand of card entered.
///
///
/// returns:
/// The cvc image used for a card brand.
+ (UIImage * _Nullable)cvcImageForCardBrand:(enum STPCardBrand)cardBrand SWIFT_WARN_UNUSED_RESULT;
/// Returns the brand image used for a card brand.
/// Override this method in a subclass if you would like to provide custom images.
/// \param cardBrand The brand of card entered.
///
///
/// returns:
/// The brand image used for a card brand.
+ (UIImage * _Nullable)brandImageForCardBrand:(enum STPCardBrand)cardBrand SWIFT_WARN_UNUSED_RESULT;
/// Returns the error image used for a card brand.
/// Override this method in a subclass if you would like to provide custom images.
/// \param cardBrand The brand of card entered.
///
///
/// returns:
/// The error image used for a card brand.
+ (UIImage * _Nullable)errorImageForCardBrand:(enum STPCardBrand)cardBrand SWIFT_WARN_UNUSED_RESULT;
/// Returns the rectangle in which the receiver draws its brand image.
/// \param bounds The bounding rectangle of the receiver.
///
///
/// returns:
/// the rectangle in which the receiver draws its brand image.
- (CGRect)brandImageRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
/// Returns the rectangle in which the receiver draws the text fields.
/// \param bounds The bounding rectangle of the receiver.
///
///
/// returns:
/// The rectangle in which the receiver draws the text fields.
- (CGRect)fieldsRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
/// :nodoc:
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// :nodoc:
@property (nonatomic) UIControlContentVerticalAlignment contentVerticalAlignment;
/// :nodoc:
@property (nonatomic, readonly) BOOL isFirstResponder;
/// :nodoc:
@property (nonatomic, readonly) BOOL canBecomeFirstResponder;
/// :nodoc:
@property (nonatomic, readonly) BOOL canResignFirstResponder;
/// :nodoc:
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// :nodoc:
- (void)layoutSubviews;
/// :nodoc:
- (BOOL)textFieldShouldBeginEditing:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)textFieldDidBeginEditing:(UITextField * _Nonnull)textField;
/// :nodoc:
- (BOOL)textFieldShouldEndEditing:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField;
/// :nodoc:
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
@property (nonatomic, readonly) BOOL hasText;
/// :nodoc:
- (void)insertText:(NSString * _Nonnull)text;
/// :nodoc:
- (void)deleteBackward;
/// :nodoc:
+ (NSSet<NSString *> * _Nonnull)keyPathsForValuesAffectingIsValid SWIFT_WARN_UNUSED_RESULT;
@end




enum STPShippingType : NSInteger;

/// An <code>STPPaymentConfiguration</code> represents all the options you can set or change
/// around a payment.
/// You provide an <code>STPPaymentConfiguration</code> object to your <code>STPPaymentContext</code>
/// when making a charge. The configuration generally has settings that
/// will not change from payment to payment and thus is reusable, while the context
/// is specific to a single particular payment instance.
SWIFT_CLASS("_TtC6Stripe23STPPaymentConfiguration")
@interface STPPaymentConfiguration : NSObject <NSCopying>
/// This is a convenience singleton configuration that uses the default values for
/// every property
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) STPPaymentConfiguration * _Nonnull sharedConfiguration;)
+ (STPPaymentConfiguration * _Nonnull)sharedConfiguration SWIFT_WARN_UNUSED_RESULT;
+ (void)setSharedConfiguration:(STPPaymentConfiguration * _Nonnull)value;
/// The user is allowed to pay with Apple Pay if it’s configured and available on their device.
@property (nonatomic) BOOL applePayEnabled;
/// The user is allowed to pay with FPX.
@property (nonatomic) BOOL fpxEnabled;
/// The billing address fields the user must fill out when prompted for their
/// payment details. These fields will all be present on the returned PaymentMethod from
/// Stripe.
/// The default value is <code>STPBillingAddressFieldsPostalCode</code>.
/// seealso:
/// https://stripe.com/docs/api/payment_methods/create#create_payment_method-billing_details
@property (nonatomic) enum STPBillingAddressFields requiredBillingAddressFields;
/// The shipping address fields the user must fill out when prompted for their
/// shipping info. Set to nil if shipping address is not required.
/// The default value is nil.
@property (nonatomic, copy) NSSet<STPContactField *> * _Nullable requiredShippingAddressFields;
/// Whether the user should be prompted to verify prefilled shipping information.
/// The default value is YES.
@property (nonatomic) BOOL verifyPrefilledShippingAddress;
/// The type of shipping for this purchase. This property sets the labels displayed
/// when the user is prompted for shipping info, and whether they should also be
/// asked to select a shipping method.
/// The default value is STPShippingTypeShipping.
@property (nonatomic) enum STPShippingType shippingType;
/// The set of countries supported when entering an address. This property accepts
/// a set of ISO 2-character country codes.
/// The default value is all known countries. Setting this property will limit
/// the available countries to your selected set.
@property (nonatomic, copy) NSSet<NSString *> * _Nonnull availableCountries;
/// The name of your company, for displaying to the user during payment flows. For
/// example, when using Apple Pay, the payment sheet’s final line item will read
/// “PAY {companyName}”.
/// The default value is the name of your iOS application which is derived from the
/// <code>kCFBundleNameKey</code> of <code>Bundle.main</code>.
@property (nonatomic, copy) NSString * _Nonnull companyName;
/// The Apple Merchant Identifier to use during Apple Pay transactions. To create
/// one of these, see our guide at https://stripe.com/docs/mobile/apple-pay . You
/// must set this to a valid identifier in order to automatically enable Apple Pay.
@property (nonatomic, copy) NSString * _Nullable appleMerchantIdentifier;
/// Determines whether or not the user is able to delete payment options
/// This is only relevant to the <code>STPPaymentOptionsViewController</code> which, if
/// enabled, will allow the user to delete payment options by tapping the “Edit”
/// button in the navigation bar or by swiping left on a payment option and tapping
/// “Delete”. Currently, the user is not allowed to delete the selected payment
/// option but this may change in the future.
/// Default value is YES but will only work if <code>STPPaymentOptionsViewController</code> is
/// initialized with a <code>STPCustomerContext</code> either through the <code>STPPaymentContext</code>
/// or directly as an init parameter.
@property (nonatomic) BOOL canDeletePaymentOptions;
/// Determines whether STPAddCardViewController allows the user to
/// scan cards using the camera on devices running iOS 13 or later.
/// To use this feature, you must also set the <code>NSCameraUsageDescription</code>
/// value in your app’s Info.plist.
/// @note This feature is currently in beta. Please file bugs at
/// https://github.com/stripe/stripe-ios/issues
/// The default value is currently NO. This will be changed in a future update.
@property (nonatomic) BOOL cardScanningEnabled;
/// An enum value representing which payment options you will accept from your user
/// in addition to credit cards.
@property (nonatomic) NSInteger additionalPaymentOptions SWIFT_DEPRECATED_MSG("additionalPaymentOptions has been removed. Set applePayEnabled and fpxEnabled on STPPaymentConfiguration instead.");
/// If you used STPPaymentConfiguration.shared.publishableKey, use STPAPIClient.shared.publishableKey instead.  The SDK uses STPAPIClient.shared to make API requests by default.
/// Your Stripe publishable key
/// seealso:
/// https://dashboard.stripe.com/account/apikeys
@property (nonatomic, copy) NSString * _Nullable publishableKey SWIFT_DEPRECATED_MSG("If you used STPPaymentConfiguration.shared.publishableKey, use STPAPIClient.shared.publishableKey instead. If you passed a STPPaymentConfiguration instance to an SDK component, create an STPAPIClient, set publishableKey on it, and set the SDK component's APIClient property.");
/// If you used STPPaymentConfiguration.shared.stripeAccount, use STPAPIClient.shared.stripeAccount instead.  The SDK uses STPAPIClient.shared to make API requests by default.
/// In order to perform API requests on behalf of a connected account, e.g. to
/// create charges for a connected account, set this property to the ID of the
/// account for which this request is being made.
/// seealso:
/// https://stripe.com/docs/payments/payment-intents/use-cases#connected-accounts
@property (nonatomic, copy) NSString * _Nullable stripeAccount SWIFT_DEPRECATED_MSG("If you used STPPaymentConfiguration.shared.stripeAccount, use STPAPIClient.shared.stripeAccount instead. If you passed a STPPaymentConfiguration instance to an SDK component, create an STPAPIClient, set stripeAccount on it, and set the SDK component's APIClient property.");
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// :nodoc:
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class STPShippingAddressViewController;
enum STPShippingStatus : NSInteger;

/// An <code>STPShippingAddressViewControllerDelegate</code> is notified when an <code>STPShippingAddressViewController</code> receives an address, completes with an address, or is cancelled.
SWIFT_PROTOCOL("_TtP6Stripe40STPShippingAddressViewControllerDelegate_")
@protocol STPShippingAddressViewControllerDelegate <NSObject>
/// Called when the user cancels entering a shipping address. You should dismiss (or pop) the view controller at this point.
/// \param addressViewController the view controller that has been cancelled
///
- (void)shippingAddressViewControllerDidCancel:(STPShippingAddressViewController * _Nonnull)addressViewController;
/// This is called when the user enters a shipping address and taps next. You
/// should validate the address and determine what shipping methods are available,
/// and call the <code>completion</code> block when finished. If an error occurrs, call
/// the <code>completion</code> block with the error. Otherwise, call the <code>completion</code>
/// block with a nil error and an array of available shipping methods. If you don’t
/// need to collect a shipping method, you may pass an empty array or nil.
/// \param addressViewController the view controller where the address was entered
///
/// \param address the address that was entered. - seealso: STPAddress
///
/// \param completion call this callback when you’re done validating the address and determining available shipping methods.
///
- (void)shippingAddressViewController:(STPShippingAddressViewController * _Nonnull)addressViewController didEnterAddress:(STPAddress * _Nonnull)address completion:(void (^ _Nonnull)(enum STPShippingStatus, NSError * _Nullable, NSArray<PKShippingMethod *> * _Nullable, PKShippingMethod * _Nullable))completion;
/// This is called when the user selects a shipping method. If no shipping methods are given, or if the shipping type doesn’t require a shipping method, this will be called after the user has a shipping address and your validation has succeeded. After updating your app with the user’s shipping info, you should dismiss (or pop) the view controller. Note that if <code>shippingMethod</code> is non-nil, there will be an additional shipping methods view controller on the navigation controller’s stack.
/// \param addressViewController the view controller where the address was entered
///
/// \param address the address that was entered. - seealso: STPAddress
///
/// \param method the shipping method that was selected.
///
- (void)shippingAddressViewController:(STPShippingAddressViewController * _Nonnull)addressViewController didFinishWithAddress:(STPAddress * _Nonnull)address shippingMethod:(PKShippingMethod * _Nullable)method;
@end

@class STPPaymentOptionsViewController;

/// An <code>STPPaymentOptionsViewControllerDelegate</code> responds when a user selects a
/// payment option from (or cancels) an <code>STPPaymentOptionsViewController</code>. In both
/// of these instances, you should dismiss the view controller (either by popping
/// it off the navigation stack, or dismissing it).
SWIFT_PROTOCOL("_TtP6Stripe39STPPaymentOptionsViewControllerDelegate_")
@protocol STPPaymentOptionsViewControllerDelegate <NSObject>
/// This is called when the view controller encounters an error fetching the user’s
/// payment options from its API adapter. You should dismiss the view controller
/// when this is called.
/// \param paymentOptionsViewController the view controller in question
///
/// \param error the error that occurred
///
- (void)paymentOptionsViewController:(STPPaymentOptionsViewController * _Nonnull)paymentOptionsViewController didFailToLoadWithError:(NSError * _Nonnull)error;
/// This is called when the user selects or adds a payment method, so it will often
/// be called immediately after calling <code>paymentOptionsViewController:didSelectPaymentOption:</code>.
/// You should dismiss the view controller when this is called.
/// \param paymentOptionsViewController the view controller that has finished
///
- (void)paymentOptionsViewControllerDidFinish:(STPPaymentOptionsViewController * _Nonnull)paymentOptionsViewController;
/// This is called when the user taps “cancel”.
/// You should dismiss the view controller when this is called.
/// \param paymentOptionsViewController the view controller that has finished
///
- (void)paymentOptionsViewControllerDidCancel:(STPPaymentOptionsViewController * _Nonnull)paymentOptionsViewController;
@optional
/// This is called when the user either makes a selection, or adds a new card.
/// This will be triggered after the view controller loads with the user’s current
/// selection (if they have one) and then subsequently when they change their
/// choice. You should use this callback to update any necessary UI in your app
/// that displays the user’s currently selected payment method. You should <em>not</em>
/// dismiss the view controller at this point, instead do this in
/// <code>paymentOptionsViewControllerDidFinish:</code>. <code>STPPaymentOptionsViewController</code>
/// will also call the necessary methods on your API adapter, so you don’t need to
/// call them directly during this method.
/// \param paymentOptionsViewController the view controller in question
///
/// \param paymentOption the selected payment method
///
- (void)paymentOptionsViewController:(STPPaymentOptionsViewController * _Nonnull)paymentOptionsViewController didSelectPaymentOption:(id <STPPaymentOption> _Nonnull)paymentOption;
@end

@protocol STPPaymentContextDelegate;
@class PKPaymentSummaryItem;

/// An <code>STPPaymentContext</code> keeps track of all of the state around a payment. It will manage fetching a user’s saved payment methods, tracking any information they select, and prompting them for required additional information before completing their purchase. It can be used to power your application’s “payment confirmation” page with just a few lines of code.
/// <code>STPPaymentContext</code> also provides a unified interface to multiple payment methods - for example, you can write a single integration to accept both credit card payments and Apple Pay.
/// <code>STPPaymentContext</code> saves information about a user’s payment methods to a Stripe customer object, and requires an <code>STPCustomerContext</code> to manage retrieving and modifying the customer.
SWIFT_CLASS_NAMED("STPPaymentContext")
@interface STPPaymentContext : NSObject <STPAuthenticationContext, STPPaymentOptionsViewControllerDelegate, STPShippingAddressViewControllerDelegate>
/// This is a convenience initializer; it is equivalent to calling
/// <code>init(customerContext:customerContext configuration:STPPaymentConfiguration.shared theme:STPTheme.defaultTheme</code>.
/// \param customerContext The customer context the payment context will use to fetch
/// and modify its Stripe customer. - seealso: STPCustomerContext.h
///
///
/// returns:
/// the newly-instantiated payment context
- (nonnull instancetype)initWithCustomerContext:(STPCustomerContext * _Nonnull)customerContext;
/// Initializes a new Payment Context with the provided customer context, configuration,
/// and theme. After this class is initialized, you should also make sure to set its
/// <code>delegate</code> and <code>hostViewController</code> properties.
/// seealso:
/// STPPaymentConfiguration.h
/// <ul>
///   <li>
///     theme:             The theme describing the visual appearance of all UI
///     that the payment context automatically creates for you. - seealso: STPTheme.h
///   </li>
/// </ul>
/// \param customerContext The customer context the payment context will use to fetch
/// and modify its Stripe customer. - seealso: STPCustomerContext.h
///
/// \param configuration The configuration for the payment context to use. This
/// lets you set your Stripe publishable API key, required billing address fields, etc.
///
///
/// returns:
/// the newly-instantiated payment context
- (nonnull instancetype)initWithCustomerContext:(STPCustomerContext * _Nonnull)customerContext configuration:(STPPaymentConfiguration * _Nonnull)configuration theme:(STPTheme * _Nonnull)theme;
/// Note: Instead of providing your own backend API adapter, we recommend using
/// <code>STPCustomerContext</code>, which will manage retrieving and updating a
/// Stripe customer for you. - seealso: STPCustomerContext.h
/// This is a convenience initializer; it is equivalent to calling
/// <code>init(apiAdapter:apiAdapter configuration:STPPaymentConfiguration.shared theme:STPTheme.defaultTheme)</code>.
- (nonnull instancetype)initWithApiAdapter:(id <STPBackendAPIAdapter> _Nonnull)apiAdapter;
/// Note: Instead of providing your own backend API adapter, we recommend using
/// <code>STPCustomerContext</code>, which will manage retrieving and updating a
/// Stripe customer for you. - seealso: STPCustomerContext.h
/// Initializes a new Payment Context with the provided API adapter and configuration.
/// After this class is initialized, you should also make sure to set its <code>delegate</code>
/// and <code>hostViewController</code> properties.
/// seealso:
/// STPPaymentConfiguration.h
/// <ul>
///   <li>
///     theme:         The theme describing the visual appearance of all UI that
///     the payment context automatically creates for you. - seealso: STPTheme.h
///   </li>
/// </ul>
/// \param apiAdapter The API adapter the payment context will use to fetch and
/// modify its contents. You need to make a class conforming to this protocol that
/// talks to your server. - seealso: STPBackendAPIAdapter.h
///
/// \param configuration The configuration for the payment context to use. This lets
/// you set your Stripe publishable API key, required billing address fields, etc.
///
///
/// returns:
/// the newly-instantiated payment context
- (nonnull instancetype)initWithApiAdapter:(id <STPBackendAPIAdapter> _Nonnull)apiAdapter configuration:(STPPaymentConfiguration * _Nonnull)configuration theme:(STPTheme * _Nonnull)theme OBJC_DESIGNATED_INITIALIZER;
/// Note: Instead of providing your own backend API adapter, we recommend using
/// <code>STPCustomerContext</code>, which will manage retrieving and updating a
/// Stripe customer for you. - seealso: STPCustomerContext.h
/// The API adapter the payment context will use to fetch and modify its contents.
/// You need to make a class conforming to this protocol that talks to your server.
/// seealso:
/// STPBackendAPIAdapter.h
@property (nonatomic, readonly, strong) id <STPBackendAPIAdapter> _Nonnull apiAdapter;
/// The configuration for the payment context to use internally. - seealso: STPPaymentConfiguration.h
@property (nonatomic, readonly, strong) STPPaymentConfiguration * _Nonnull configuration;
/// The visual appearance that will be used by any views that the context generates. - seealso: STPTheme.h
@property (nonatomic, readonly, strong) STPTheme * _Nonnull theme;
/// If you’ve already collected some information from your user, you can set it here and it’ll be automatically filled out when possible/appropriate in any UI that the payment context creates.
@property (nonatomic, strong) STPUserInformation * _Nullable prefilledInformation;
/// The view controller that any additional UI will be presented on. If you have a “checkout view controller” in your app, that should be used as the host view controller.
@property (nonatomic, weak) UIViewController * _Nullable hostViewController;
/// This delegate will be notified when the payment context’s contents change. - seealso: STPPaymentContextDelegate
@property (nonatomic, weak) id <STPPaymentContextDelegate> _Nullable delegate;
/// Whether or not the payment context is currently loading information from the network.
@property (nonatomic, readonly) BOOL loading;
/// @note This is no longer recommended as of v18.3.0 - the SDK automatically saves the Stripe ID of the last selected
/// payment method using NSUserDefaults and displays it as the default pre-selected option.  You can override this behavior
/// by setting this property.
/// The Stripe ID of a payment method to display as the default pre-selected option.
/// @note Set this property immediately after initializing STPPaymentContext, or call <code>retryLoading</code> afterwards.
@property (nonatomic, copy) NSString * _Nullable defaultPaymentMethod;
/// The user’s currently selected payment option. May be nil.
@property (nonatomic, readonly, strong) id <STPPaymentOption> _Nullable selectedPaymentOption;
/// The available payment options the user can choose between. May be nil.
@property (nonatomic, readonly, copy) NSArray<id <STPPaymentOption>> * _Nullable paymentOptions;
/// The user’s currently selected shipping method. May be nil.
@property (nonatomic, readonly, strong) PKShippingMethod * _Nullable selectedShippingMethod;
/// An array of STPShippingMethod objects that describe the supported shipping methods. May be nil.
@property (nonatomic, readonly, copy) NSArray<PKShippingMethod *> * _Nullable shippingMethods;
/// The user’s shipping address. May be nil.
/// If you’ve already collected a shipping address from your user, you may
/// prefill it by setting a shippingAddress in PaymentContext’s prefilledInformation.
/// When your user enters a new shipping address, PaymentContext will save it to
/// the current customer object. When PaymentContext loads, if you haven’t
/// manually set a prefilled value, any shipping information saved on the customer
/// will be used to prefill the shipping address form. Note that because your
/// customer’s email may not be the same as the email provided with their shipping
/// info, PaymentContext will not prefill the shipping form’s email using your
/// customer’s email.
/// You should not rely on the shipping information stored on the Stripe customer
/// for order fulfillment, as your user may change this information if they make
/// multiple purchases. We recommend adding shipping information when you create
/// a charge (which can also help prevent fraud), or saving it to your own
/// database. https://stripe.com/docs/api/payment_intents/create#create_payment_intent-shipping
/// Note: by default, your user will still be prompted to verify a prefilled
/// shipping address. To change this behavior, you can set
/// <code>verifyPrefilledShippingAddress</code> to NO in your <code>STPPaymentConfiguration</code>.
@property (nonatomic, readonly, strong) STPAddress * _Nullable shippingAddress;
/// The amount of money you’re requesting from the user, in the smallest currency
/// unit for the selected currency. For example, to indicate $10 USD, use 1000
/// (i.e. 1000 cents). For more information, see https://stripe.com/docs/api/payment_intents/create#create_payment_intent-amount
/// @note This value must be present and greater than zero in order for Apple Pay
/// to be automatically enabled.
/// @note You should only set either this or <code>paymentSummaryItems</code>, not both.
/// The other will be automatically calculated on demand using your <code>paymentCurrency</code>.
@property (nonatomic) NSInteger paymentAmount;
/// The three-letter currency code for the currency of the payment (i.e. USD, GBP,
/// JPY, etc). Defaults to “USD”.
/// @note Changing this property may change the return value of <code>paymentAmount</code>
/// or <code>paymentSummaryItems</code> (whichever one you didn’t directly set yourself).
@property (nonatomic, copy) NSString * _Nonnull paymentCurrency;
/// The two-letter country code for the country where the payment will be processed.
/// You should set this to the country your Stripe account is in. Defaults to “US”.
/// @note Changing this property will change the <code>countryCode</code> of your Apple Pay
/// payment requests.
/// seealso:
/// PKPaymentRequest for more information.
@property (nonatomic, copy) NSString * _Nonnull paymentCountry;
/// If you support Apple Pay, you can optionally set the PKPaymentSummaryItems
/// you want to display here instead of using <code>paymentAmount</code>. Note that the
/// grand total (the amount of the last summary item) must be greater than zero.
/// If not set, a single summary item will be automatically generated using
/// <code>paymentAmount</code> and your configuration’s <code>companyName</code>.
/// seealso:
/// PKPaymentRequest for more information
/// @note You should only set either this or <code>paymentAmount</code>, not both.
/// The other will be automatically calculated on demand using your <code>paymentCurrency.</code>
@property (nonatomic, copy) NSArray<PKPaymentSummaryItem *> * _Nonnull paymentSummaryItems;
/// The presentation style used for all view controllers presented modally by the context.
/// Since custom transition styles are not supported, you should set this to either
/// <code>UIModalPresentationFullScreen</code>, <code>UIModalPresentationPageSheet</code>, or <code>UIModalPresentationFormSheet</code>.
/// The default value is <code>UIModalPresentationFullScreen</code>.
@property (nonatomic) UIModalPresentationStyle modalPresentationStyle;
/// The mode to use when displaying the title of the navigation bar in all view
/// controllers presented by the context. The default value is <code>automatic</code>,
/// which causes the title to use the same styling as the previously displayed
/// navigation item (if the view controller is pushed onto the <code>hostViewController</code>).
/// If the <code>prefersLargeTitles</code> property of the <code>hostViewController</code>‘s navigation bar
/// is false, this property has no effect and the navigation item’s title is always
/// displayed as a small title.
/// If the view controller is presented modally, <code>automatic</code> and
/// <code>never</code> always result in a navigation bar with a small title.
@property (nonatomic) UINavigationItemLargeTitleDisplayMode largeTitleDisplayMode;
/// A view that will be placed as the footer of the payment options selection
/// view controller.
/// When the footer view needs to be resized, it will be sent a
/// <code>sizeThatFits:</code> call. The view should respond correctly to this method in order
/// to be sized and positioned properly.
@property (nonatomic, strong) UIView * _Nullable paymentOptionsViewControllerFooterView;
/// A view that will be placed as the footer of the add card view controller.
/// When the footer view needs to be resized, it will be sent a
/// <code>sizeThatFits:</code> call. The view should respond correctly to this method in order
/// to be sized and positioned properly.
@property (nonatomic, strong) UIView * _Nullable addCardViewControllerFooterView;
/// The STPAPIClient instance to use to make API requests.
/// Defaults to <code>STPAPIClient.shared</code>.
@property (nonatomic, strong) STPAPIClient * _Nonnull apiClient;
/// If <code>paymentContext:didFailToLoadWithError:</code> is called on your delegate, you
/// can in turn call this method to try loading again (if that hasn’t been called,
/// calling this will do nothing). If retrying in turn fails, <code>paymentContext:didFailToLoadWithError:</code>
/// will be called again (and you can again call this to keep retrying, etc).
- (void)retryLoading;
/// This creates, configures, and appropriately presents an <code>STPPaymentOptionsViewController</code>
/// on top of the payment context’s <code>hostViewController</code>. It’ll be dismissed automatically
/// when the user is done selecting their payment method.
/// @note This method will do nothing if it is called while STPPaymentContext is
/// already showing a view controller or in the middle of requesting a payment.
- (void)presentPaymentOptionsViewController;
/// This creates, configures, and appropriately pushes an <code>STPPaymentOptionsViewController</code>
/// onto the navigation stack of the context’s <code>hostViewController</code>. It’ll be popped
/// automatically when the user is done selecting their payment method.
/// @note This method will do nothing if it is called while STPPaymentContext is
/// already showing a view controller or in the middle of requesting a payment.
- (void)pushPaymentOptionsViewController;
/// This creates, configures, and appropriately presents a view controller for
/// collecting shipping address and shipping method on top of the payment context’s
/// <code>hostViewController</code>. It’ll be dismissed automatically when the user is done
/// entering their shipping info.
/// @note This method will do nothing if it is called while STPPaymentContext is
/// already showing a view controller or in the middle of requesting a payment.
- (void)presentShippingViewController;
/// This creates, configures, and appropriately pushes a view controller for
/// collecting shipping address and shipping method onto the navigation stack of
/// the context’s <code>hostViewController</code>. It’ll be popped automatically when the
/// user is done entering their shipping info.
/// @note This method will do nothing if it is called while STPPaymentContext is
/// already showing a view controller, or in the middle of requesting a payment.
- (void)pushShippingViewController;
/// Requests payment from the user. This may need to present some supplemental UI
/// to the user, in which case it will be presented on the payment context’s
/// <code>hostViewController</code>. For instance, if they’ve selected Apple Pay as their
/// payment method, calling this method will show the payment sheet. If the user
/// has a card on file, this will use that without presenting any additional UI.
/// After this is called, the <code>paymentContext:didCreatePaymentResult:completion:</code>
/// and <code>paymentContext:didFinishWithStatus:error:</code> methods will be called on the
/// context’s <code>delegate</code>.
/// @note This method will do nothing if it is called while STPPaymentContext is
/// already showing a view controller, or in the middle of requesting a payment.
- (void)requestPayment;
- (void)paymentOptionsViewController:(STPPaymentOptionsViewController * _Nonnull)paymentOptionsViewController didSelectPaymentOption:(id <STPPaymentOption> _Nonnull)paymentOption;
- (void)paymentOptionsViewControllerDidFinish:(STPPaymentOptionsViewController * _Nonnull)paymentOptionsViewController;
- (void)paymentOptionsViewControllerDidCancel:(STPPaymentOptionsViewController * _Nonnull)paymentOptionsViewController;
- (void)paymentOptionsViewController:(STPPaymentOptionsViewController * _Nonnull)paymentOptionsViewController didFailToLoadWithError:(NSError * _Nonnull)error;
- (void)shippingAddressViewControllerDidCancel:(STPShippingAddressViewController * _Nonnull)addressViewController;
- (void)shippingAddressViewController:(STPShippingAddressViewController * _Nonnull)addressViewController didEnterAddress:(STPAddress * _Nonnull)address completion:(void (^ _Nonnull)(enum STPShippingStatus, NSError * _Nullable, NSArray<PKShippingMethod *> * _Nullable, PKShippingMethod * _Nullable))completion;
- (void)shippingAddressViewController:(STPShippingAddressViewController * _Nonnull)addressViewController didFinishWithAddress:(STPAddress * _Nonnull)address shippingMethod:(PKShippingMethod * _Nullable)method;
- (UIViewController * _Nonnull)authenticationPresentingViewController SWIFT_WARN_UNUSED_RESULT;
- (void)prepareAuthenticationContextForPresentation:(void (^ _Nonnull)(void))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class STPPaymentResult;

/// Implement <code>STPPaymentContextDelegate</code> to get notified when a payment context changes, finishes, encounters errors, etc. In practice, if your app has a “checkout screen view controller”, that is a good candidate to implement this protocol.
SWIFT_PROTOCOL("_TtP6Stripe25STPPaymentContextDelegate_")
@protocol STPPaymentContextDelegate <NSObject>
/// Called when the payment context encounters an error when fetching its initial set of data. A few ways to handle this are:
/// <ul>
///   <li>
///     If you’re showing the user a checkout page, dismiss the checkout page when this is called and present the error to the user.
///   </li>
///   <li>
///     Present the error to the user using a <code>UIAlertController</code> with two buttons: Retry and Cancel. If they cancel, dismiss your UI. If they Retry, call <code>retryLoading</code> on the payment context.
///     To make it harder to get your UI into a bad state, this won’t be called until the context’s <code>hostViewController</code> has finished appearing.
///   </li>
/// </ul>
/// \param paymentContext the payment context that encountered the error
///
/// \param error the error that was encountered
///
- (void)paymentContext:(STPPaymentContext * _Nonnull)paymentContext didFailToLoadWithError:(NSError * _Nonnull)error;
/// This is called every time the contents of the payment context change. When this is called, you should update your app’s UI to reflect the current state of the payment context. For example, if you have a checkout page with a “selected payment method” row, you should update its payment method with <code>paymentContext.selectedPaymentOption.label</code>. If that checkout page has a “buy” button, you should enable/disable it depending on the result of <code>paymentContext.isReadyForPayment</code>.
/// \param paymentContext the payment context that changed
///
- (void)paymentContextDidChange:(STPPaymentContext * _Nonnull)paymentContext;
/// Inside this method, you should make a call to your backend API to make a PaymentIntent with that Customer + payment method, and invoke the <code>completion</code> block when that is done.
/// \param paymentContext The context that succeeded
///
/// \param paymentResult Information associated with the payment that you can pass to your server. You should go to your backend API with this payment result and use the PaymentIntent API to complete the payment. See https://stripe.com/docs/mobile/ios/standard#submit-payment-intents. Once that’s done call the <code>completion</code> block with any error that occurred (or none, if the payment succeeded). - seealso: STPPaymentResult.h
///
/// \param completion Call this block when you’re done creating a payment intent (or subscription, etc) on your backend. If it succeeded, call <code>completion(STPPaymentStatusSuccess, nil)</code>. If it failed with an error, call <code>completion(STPPaymentStatusError, error)</code>. If the user canceled, call <code>completion(STPPaymentStatusUserCancellation, nil)</code>.
///
- (void)paymentContext:(STPPaymentContext * _Nonnull)paymentContext didCreatePaymentResult:(STPPaymentResult * _Nonnull)paymentResult completion:(void (^ _Nonnull)(enum STPPaymentStatus, NSError * _Nullable))completion;
/// This is invoked by an <code>STPPaymentContext</code> when it is finished. This will be called after the payment is done and all necessary UI has been dismissed. You should inspect the returned <code>status</code> and behave appropriately. For example: if it’s <code>STPPaymentStatusSuccess</code>, show the user a receipt. If it’s <code>STPPaymentStatusError</code>, inform the user of the error. If it’s <code>STPPaymentStatusUserCancellation</code>, do nothing.
/// \param paymentContext The payment context that finished
///
/// \param status The status of the payment - <code>STPPaymentStatusSuccess</code> if it succeeded, <code>STPPaymentStatusError</code> if it failed with an error (in which case the <code>error</code> parameter will be non-nil), <code>STPPaymentStatusUserCancellation</code> if the user canceled the payment.
///
/// \param error An error that occurred, if any.
///
- (void)paymentContext:(STPPaymentContext * _Nonnull)paymentContext didFinishWith:(enum STPPaymentStatus)status error:(NSError * _Nullable)error;
@optional
/// Inside this method, you should verify that you can ship to the given address.
/// You should call the completion block with the results of your validation
/// and the available shipping methods for the given address. If you don’t implement
/// this method, the user won’t be prompted to select a shipping method and all
/// addresses will be valid. If you call the completion block with nil or an
/// empty array of shipping methods, the user won’t be prompted to select a
/// shipping method.
/// @note If a user updates their shipping address within the Apple Pay dialog,
/// this address will be anonymized. For example, in the US, it will only include the
/// city, state, and zip code. The payment context will have the user’s complete
/// shipping address by the time <code>paymentContext:didFinishWithStatus:error</code> is
/// called.
/// \param paymentContext The context that updated its shipping address
///
/// \param address The current shipping address
///
/// \param completion Call this block when you’re done validating the shipping
/// address and calculating available shipping methods. If you call the completion
/// block with nil or an empty array of shipping methods, the user won’t be prompted
/// to select a shipping method.
///
- (void)paymentContext:(STPPaymentContext * _Nonnull)paymentContext didUpdateShippingAddress:(STPAddress * _Nonnull)address completion:(void (^ _Nonnull)(enum STPShippingStatus, NSError * _Nullable, NSArray<PKShippingMethod *> * _Nullable, PKShippingMethod * _Nullable))completion;
@end

@class STPThreeDSCustomizationSettings;
@class STPPaymentIntentParams;
enum STPPaymentHandlerActionStatus : NSInteger;
@class STPPaymentIntent;
@class STPSetupIntentConfirmParams;
@class STPSetupIntent;

/// <code>STPPaymentHandler</code> is a utility class that confirms PaymentIntents/SetupIntents and handles any authentication required, such as 3DS1/3DS2 for Strong Customer Authentication.
/// It can present authentication UI on top of your app or redirect users out of your app (to e.g. their banking app).
/// seealso:
/// https://stripe.com/docs/mobile/ios/authentication
SWIFT_CLASS("_TtC6Stripe17STPPaymentHandler") SWIFT_AVAILABILITY(maccatalyst_app_extension,unavailable) SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface STPPaymentHandler : NSObject <SFSafariViewControllerDelegate>
/// The error domain for errors in <code>STPPaymentHandler</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorDomain;)
+ (NSString * _Nonnull)errorDomain SWIFT_WARN_UNUSED_RESULT;
/// The globally shared instance of <code>STPPaymentHandler</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) STPPaymentHandler * _Nonnull sharedHandler;)
+ (STPPaymentHandler * _Nonnull)sharedHandler SWIFT_WARN_UNUSED_RESULT;
/// The globally shared instance of <code>STPPaymentHandler</code>.
+ (STPPaymentHandler * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// By default <code>sharedHandler</code> initializes with STPAPIClient.shared.
@property (nonatomic, strong) STPAPIClient * _Nonnull apiClient;
/// Customizable settings to use when performing 3DS2 authentication.
/// Note: Configure this before calling any methods.
/// Defaults to <code>STPThreeDSCustomizationSettings()</code>.
@property (nonatomic, strong) STPThreeDSCustomizationSettings * _Nonnull threeDSCustomizationSettings;
/// When this flag is enabled, STPPaymentHandler will confirm certain PaymentMethods using
/// Safari instead of SFSafariViewController. If you’d like to use this in your own
/// testing or Continuous Integration platform, please see the IntegrationTester app
/// for usage examples.
/// Note: This flag is only intended for development, and only impacts payments made with testmode keys.
/// Setting this to <code>true</code> with a livemode key will fail.
@property (nonatomic) BOOL simulateAppToAppRedirect;
/// Confirms the PaymentIntent with the provided parameters and handles any <code>nextAction</code> required
/// to authenticate the PaymentIntent.
/// Call this method if you are using automatic confirmation.  - seealso: https://stripe.com/docs/payments/payment-intents/ios
/// \param paymentParams The params used to confirm the PaymentIntent. Note that this method overrides the value of <code>paymentParams.useStripeSDK</code> to <code>@YES</code>.
///
/// \param authenticationContext The authentication context used to authenticate the payment.
///
/// \param completion The completion block. If the status returned is <code>STPPaymentHandlerActionStatusSucceeded</code>, the PaymentIntent status is not necessarily STPPaymentIntentStatusSucceeded (e.g. some bank payment methods take days before the PaymentIntent succeeds).
///
- (void)confirmPayment:(STPPaymentIntentParams * _Nonnull)paymentParams withAuthenticationContext:(id <STPAuthenticationContext> _Nonnull)authenticationContext completion:(void (^ _Nonnull)(enum STPPaymentHandlerActionStatus, STPPaymentIntent * _Nullable, NSError * _Nullable))completion;
/// Handles any <code>nextAction</code> required to authenticate the PaymentIntent.
/// Call this method if you are using manual confirmation.  - seealso: https://stripe.com/docs/payments/payment-intents/ios
/// \param paymentIntentClientSecret The client secret of the PaymentIntent to handle next actions for.
///
/// \param authenticationContext The authentication context used to authenticate the payment.
///
/// \param returnURL An optional URL to redirect your customer back to after they authenticate or cancel in a webview. This should match the returnURL you specified during PaymentIntent confirmation.
///
/// \param completion The completion block. If the status returned is <code>STPPaymentHandlerActionStatusSucceeded</code>, the PaymentIntent status will always be either STPPaymentIntentStatusSucceeded, or STPPaymentIntentStatusRequiresConfirmation, or STPPaymentIntentStatusRequiresCapture if you are using manual capture. In the latter two cases, confirm or capture the PaymentIntent on your backend to complete the payment.
///
- (void)handleNextActionForPayment:(NSString * _Nonnull)paymentIntentClientSecret withAuthenticationContext:(id <STPAuthenticationContext> _Nonnull)authenticationContext returnURL:(NSString * _Nullable)returnURL completion:(void (^ _Nonnull)(enum STPPaymentHandlerActionStatus, STPPaymentIntent * _Nullable, NSError * _Nullable))completion;
/// Confirms the SetupIntent with the provided parameters and handles any <code>nextAction</code> required
/// to authenticate the SetupIntent.
/// seealso:
/// https://stripe.com/docs/payments/cards/saving-cards#saving-card-without-payment
/// \param setupIntentConfirmParams The params used to confirm the SetupIntent. Note that this method overrides the value of <code>setupIntentConfirmParams.useStripeSDK</code> to <code>@YES</code>.
///
/// \param authenticationContext The authentication context used to authenticate the SetupIntent.
///
/// \param completion The completion block. If the status returned is <code>STPPaymentHandlerActionStatusSucceeded</code>, the SetupIntent status will always be STPSetupIntentStatusSucceeded.
///
- (void)confirmSetupIntent:(STPSetupIntentConfirmParams * _Nonnull)setupIntentConfirmParams withAuthenticationContext:(id <STPAuthenticationContext> _Nonnull)authenticationContext completion:(void (^ _Nonnull)(enum STPPaymentHandlerActionStatus, STPSetupIntent * _Nullable, NSError * _Nullable))completion;
/// Handles any <code>nextAction</code> required to authenticate the SetupIntent.
/// Call this method if you are confirming the SetupIntent on your backend and get a status of requires_action.
/// \param setupIntentClientSecret The client secret of the SetupIntent to handle next actions for.
///
/// \param authenticationContext The authentication context used to authenticate the SetupIntent.
///
/// \param returnURL An optional URL to redirect your customer back to after they authenticate or cancel in a webview. This should match the returnURL you specified during SetupIntent confirmation.
///
/// \param completion The completion block. If the status returned is <code>STPPaymentHandlerActionStatusSucceeded</code>, the SetupIntent status will always be  STPSetupIntentStatusSucceeded.
///
- (void)handleNextActionForSetupIntent:(NSString * _Nonnull)setupIntentClientSecret withAuthenticationContext:(id <STPAuthenticationContext> _Nonnull)authenticationContext returnURL:(NSString * _Nullable)returnURL completion:(void (^ _Nonnull)(enum STPPaymentHandlerActionStatus, STPSetupIntent * _Nullable, NSError * _Nullable))completion;
/// :nodoc:
- (void)safariViewControllerDidFinish:(SFSafariViewController * _Nonnull)controller;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_AVAILABILITY(maccatalyst_app_extension,unavailable) SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface STPPaymentHandler (SWIFT_EXTENSION(Stripe)) <STPURLCallbackListener>
/// :nodoc:
- (BOOL)handleURLCallback:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
@end


/// <code>STPPaymentHandlerActionStatus</code> represents the possible outcomes of requesting an action by <code>STPPaymentHandler</code>. An action could be confirming and/or handling the next action for a PaymentIntent.
typedef SWIFT_ENUM(NSInteger, STPPaymentHandlerActionStatus, open) {
/// The action succeeded.
  STPPaymentHandlerActionStatusSucceeded = 0,
/// The action was cancelled by the cardholder/user.
  STPPaymentHandlerActionStatusCanceled = 1,
/// The action failed. See the error code for more details.
  STPPaymentHandlerActionStatusFailed = 2,
};

/// Error codes generated by <code>STPPaymentHandler</code>
typedef SWIFT_ENUM(NSInteger, STPPaymentHandlerErrorCode, open) {
/// Indicates that the action requires an authentication method not recognized or supported by the SDK.
  STPPaymentHandlerUnsupportedAuthenticationErrorCode SWIFT_COMPILE_NAME("unsupportedAuthenticationErrorCode") = 0,
/// Indicates that the action requires an authentication app, but either the app is not installed or the request to switch to the app was denied.
  STPPaymentHandlerRequiredAppNotAvailableErrorCode SWIFT_COMPILE_NAME("requiredAppNotAvailable") = 1,
/// Attach a payment method to the PaymentIntent or SetupIntent before using <code>STPPaymentHandler</code>.
  STPPaymentHandlerRequiresPaymentMethodErrorCode SWIFT_COMPILE_NAME("requiresPaymentMethodErrorCode") = 2,
/// The PaymentIntent or SetupIntent status cannot be resolved by <code>STPPaymentHandler</code>.
  STPPaymentHandlerIntentStatusErrorCode SWIFT_COMPILE_NAME("intentStatusErrorCode") = 3,
/// The action timed out.
  STPPaymentHandlerTimedOutErrorCode SWIFT_COMPILE_NAME("timedOutErrorCode") = 4,
/// There was an error in the Stripe3DS2 SDK.
  STPPaymentHandlerStripe3DS2ErrorCode SWIFT_COMPILE_NAME("stripe3DS2ErrorCode") = 5,
/// The transaction did not authenticate (e.g. user entered the wrong code).
  STPPaymentHandlerNotAuthenticatedErrorCode SWIFT_COMPILE_NAME("notAuthenticatedErrorCode") = 6,
/// <code>STPPaymentHandler</code> does not support concurrent actions.
  STPPaymentHandlerNoConcurrentActionsErrorCode SWIFT_COMPILE_NAME("noConcurrentActionsErrorCode") = 7,
/// Payment requires a valid <code>STPAuthenticationContext</code>.  Make sure your presentingViewController isn’t already presenting.
  STPPaymentHandlerRequiresAuthenticationContextErrorCode SWIFT_COMPILE_NAME("requiresAuthenticationContextErrorCode") = 8,
/// There was an error confirming the Intent.
/// Inspect the <code>paymentIntent.lastPaymentError</code> or <code>setupIntent.lastSetupError</code> property.
  STPPaymentHandlerPaymentErrorCode SWIFT_COMPILE_NAME("paymentErrorCode") = 9,
/// The provided PaymentIntent of SetupIntent client secret does not match the expected pattern for client secrets.
/// Make sure that your server is returning the correct value and that is being passed to <code>STPPaymentHandler</code>.
  STPPaymentHandlerInvalidClientSecret SWIFT_COMPILE_NAME("invalidClientSecret") = 10,
};

enum STPPaymentIntentCaptureMethod : NSInteger;
enum STPPaymentIntentConfirmationMethod : NSInteger;
enum STPPaymentIntentStatus : NSInteger;
enum STPPaymentIntentSetupFutureUsage : NSInteger;
@class STPPaymentIntentLastPaymentError;
@class STPPaymentIntentShippingDetails;

/// A PaymentIntent tracks the process of collecting a payment from your customer.
/// seealso:
/// https://stripe.com/docs/api#payment_intents
/// seealso:
/// https://stripe.com/docs/payments/dynamic-authentication
SWIFT_CLASS("_TtC6Stripe16STPPaymentIntent")
@interface STPPaymentIntent : NSObject
/// The Stripe ID of the PaymentIntent.
@property (nonatomic, readonly, copy) NSString * _Nonnull stripeId;
/// The client secret used to fetch this PaymentIntent
@property (nonatomic, readonly, copy) NSString * _Nonnull clientSecret;
/// Amount intended to be collected by this PaymentIntent.
@property (nonatomic, readonly) NSInteger amount;
/// If status is <code>.canceled</code>, when the PaymentIntent was canceled.
@property (nonatomic, readonly, copy) NSDate * _Nullable canceledAt;
/// Capture method of this PaymentIntent
@property (nonatomic, readonly) enum STPPaymentIntentCaptureMethod captureMethod;
/// Confirmation method of this PaymentIntent
@property (nonatomic, readonly) enum STPPaymentIntentConfirmationMethod confirmationMethod;
/// When the PaymentIntent was created.
@property (nonatomic, readonly, copy) NSDate * _Nonnull created;
/// The currency associated with the PaymentIntent.
@property (nonatomic, readonly, copy) NSString * _Nonnull currency;
/// The <code>description</code> field of the PaymentIntent.
/// An arbitrary string attached to the object. Often useful for displaying to users.
@property (nonatomic, readonly, copy) NSString * _Nullable stripeDescription;
/// Whether or not this PaymentIntent was created in livemode.
@property (nonatomic, readonly) BOOL livemode;
/// If <code>status == .requiresAction</code>, this
/// property contains the next action to take for this PaymentIntent.
@property (nonatomic, readonly, strong) STPIntentAction * _Nullable nextAction;
/// Email address that the receipt for the resulting payment will be sent to.
@property (nonatomic, readonly, copy) NSString * _Nullable receiptEmail;
/// The Stripe ID of the Source used in this PaymentIntent.
@property (nonatomic, readonly, copy) NSString * _Nullable sourceId;
/// The Stripe ID of the PaymentMethod used in this PaymentIntent.
@property (nonatomic, readonly, copy) NSString * _Nullable paymentMethodId;
/// Status of the PaymentIntent
@property (nonatomic, readonly) enum STPPaymentIntentStatus status;
/// The list of payment method types (e.g. <code>[NSNumber(value: STPPaymentMethodType.card.rawValue)]</code>) that this PaymentIntent is allowed to use.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull paymentMethodTypes;
/// When provided, this property indicates how you intend to use the payment method that your customer provides after the current payment completes. If applicable, additional authentication may be performed to comply with regional legislation or network rules required to enable the usage of the same payment method for additional payments.
/// Use on_session if you intend to only reuse the payment method when the customer is in your checkout flow. Use off_session if your customer may or may not be in your checkout flow.
@property (nonatomic, readonly) enum STPPaymentIntentSetupFutureUsage setupFutureUsage;
/// The payment error encountered in the previous PaymentIntent confirmation.
@property (nonatomic, readonly, strong) STPPaymentIntentLastPaymentError * _Nullable lastPaymentError;
/// Shipping information for this PaymentIntent.
@property (nonatomic, readonly, strong) STPPaymentIntentShippingDetails * _Nullable shipping;
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface STPPaymentIntent (SWIFT_EXTENSION(Stripe))
/// If <code>status == STPPaymentIntentStatusRequiresAction</code>, this
/// property contains the next source action to take for this PaymentIntent.
/// @deprecated Use nextAction instead
@property (nonatomic, readonly, strong) STPIntentAction * _Nullable nextSourceAction SWIFT_DEPRECATED_MSG("Use nextAction instead", "nextAction");
@end


@interface STPPaymentIntent (SWIFT_EXTENSION(Stripe)) <STPAPIResponseDecodable>
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
@end


/// Action details for an STPPaymentIntent. This is a container for
/// the various types that are available. Check the <code>type</code> to see which one
/// it is, and then use the related property for the details necessary to handle it.
/// @deprecated Use <code>STPIntentAction</code> instead.
SWIFT_CLASS("_TtC6Stripe22STPPaymentIntentAction") SWIFT_DEPRECATED_MSG("Use `STPIntentAction` instead.", "_TtC6Stripe15STPIntentAction")
@interface STPPaymentIntentAction : STPIntentAction
@end


/// Contains instructions for authenticating a payment by redirecting your customer to another page or application.
/// @deprecated Use <code>STPIntentActionRedirectToURL</code> instead.
SWIFT_CLASS("_TtC6Stripe35STPPaymentIntentActionRedirectToURL") SWIFT_UNAVAILABLE_MSG("'STPPaymentIntentActionRedirectToURL' has been renamed to '_TtC6Stripe28STPIntentActionRedirectToURL': Use `STPIntentActionRedirectToURL` instead.")
@interface STPPaymentIntentActionRedirectToURL : STPIntentActionRedirectToURL
@end

/// Types of Actions from a <code>STPPaymentIntent</code>, when the payment intent
/// status is <code>STPPaymentIntentStatusRequiresAction</code>.
typedef SWIFT_ENUM(NSInteger, STPPaymentIntentActionType, open) {
/// This is an unknown action, that’s been added since the SDK
/// was last updated.
/// Update your SDK, or use the <code>nextAction.allResponseFields</code>
/// for custom handling.
  STPPaymentIntentActionTypeUnknown = 0,
/// The payment intent needs to be authorized by the user. We provide
/// <code>STPRedirectContext</code> to handle the url redirections necessary.
  STPPaymentIntentActionTypeRedirectToURL = 1,
};

/// Capture methods for a STPPaymentIntent
typedef SWIFT_ENUM(NSInteger, STPPaymentIntentCaptureMethod, open) {
/// Unknown capture method
  STPPaymentIntentCaptureMethodUnknown = 0,
/// The PaymentIntent will be automatically captured
  STPPaymentIntentCaptureMethodAutomatic = 1,
/// The PaymentIntent must be manually captured once it has the status
/// <code>STPPaymentIntentStatusRequiresCapture</code>
  STPPaymentIntentCaptureMethodManual = 2,
};

/// Confirmation methods for a STPPaymentIntent
typedef SWIFT_ENUM(NSInteger, STPPaymentIntentConfirmationMethod, open) {
/// Unknown confirmation method
  STPPaymentIntentConfirmationMethodUnknown = 0,
/// Confirmed via publishable key
  STPPaymentIntentConfirmationMethodManual = 1,
/// Confirmed via secret key
  STPPaymentIntentConfirmationMethodAutomatic = 2,
};

enum STPPaymentIntentLastPaymentErrorType : NSInteger;

/// A value for <code>code</code> indicating the provided payment method failed authentication./// The payment error encountered in the previous PaymentIntent confirmation.
/// seealso:
/// https://stripe.com/docs/api/payment_intents/object#payment_intent_object-last_payment_error
SWIFT_CLASS("_TtC6Stripe32STPPaymentIntentLastPaymentError")
@interface STPPaymentIntentLastPaymentError : NSObject
/// A value for <code>code</code> indicating the provided payment method failed authentication.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ErrorCodeAuthenticationFailure;)
+ (NSString * _Nonnull)ErrorCodeAuthenticationFailure SWIFT_WARN_UNUSED_RESULT;
/// For some errors that could be handled programmatically, a short string indicating the error code reported.
/// seealso:
/// https://stripe.com/docs/error-codes
@property (nonatomic, readonly, copy) NSString * _Nullable code;
/// For card (<code>STPPaymentIntentLastPaymentErrorType.card</code>) errors resulting from a card issuer decline,
/// a short string indicating the card issuer’s reason for the decline if they provide one.
/// seealso:
/// https://stripe.com/docs/declines#issuer-declines
@property (nonatomic, readonly, copy) NSString * _Nullable declineCode;
/// A URL to more information about the error code reported.
/// seealso:
/// https://stripe.com/docs/error-codes
@property (nonatomic, readonly, copy) NSString * _Nullable docURL;
/// A human-readable message providing more details about the error.
/// For card (<code>STPPaymentIntentLastPaymentErrorType.card</code>) errors, these messages can be shown to your users.
@property (nonatomic, readonly, copy) NSString * _Nullable message;
/// If the error is parameter-specific, the parameter related to the error.
/// For example, you can use this to display a message near the correct form field.
@property (nonatomic, readonly, copy) NSString * _Nullable param;
/// The PaymentMethod object for errors returned on a request involving a PaymentMethod.
@property (nonatomic, readonly, strong) STPPaymentMethod * _Nullable paymentMethod;
/// The type of error.
@property (nonatomic, readonly) enum STPPaymentIntentLastPaymentErrorType type;
/// :nodoc:
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface STPPaymentIntentLastPaymentError (SWIFT_EXTENSION(Stripe)) <STPAPIResponseDecodable>
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
@end

/// The type of the error represented by <code>STPPaymentIntentLastPaymentError</code>.
/// Some STPPaymentIntentLastPaymentError properties are only populated for certain error types.
typedef SWIFT_ENUM(NSInteger, STPPaymentIntentLastPaymentErrorType, open) {
/// An unknown error type.
  STPPaymentIntentLastPaymentErrorTypeUnknown = 0,
/// An error connecting to Stripe’s API.
  STPPaymentIntentLastPaymentErrorTypeAPIConnection SWIFT_COMPILE_NAME("apiConnection") = 1,
/// An error with the Stripe API.
  STPPaymentIntentLastPaymentErrorTypeAPI SWIFT_COMPILE_NAME("api") = 2,
/// A failure to authenticate your customer.
  STPPaymentIntentLastPaymentErrorTypeAuthentication = 3,
/// Card errors are the most common type of error you should expect to handle.
/// They result when the user enters a card that can’t be charged for some reason.
/// Check the <code>declineCode</code> property for the decline code.  The <code>message</code> property contains a message you can show to your users.
  STPPaymentIntentLastPaymentErrorTypeCard = 4,
/// Keys for idempotent requests can only be used with the same parameters they were first used with.
  STPPaymentIntentLastPaymentErrorTypeIdempotency = 5,
/// Invalid request errors.  Typically, this is because your request has invalid parameters.
  STPPaymentIntentLastPaymentErrorTypeInvalidRequest = 6,
/// Too many requests hit the API too quickly.
  STPPaymentIntentLastPaymentErrorTypeRateLimit = 7,
};

@class STPSourceParams;
@class STPPaymentIntentShippingDetailsParams;

/// An object representing parameters used to confirm a PaymentIntent object.
/// A PaymentIntent must have a PaymentMethod or Source associated in order to successfully confirm it.
/// That PaymentMethod or Source can either be:
/// seealso:
/// https://stripe.com/docs/api#confirm_payment_intent
/// <ul>
///   <li>
///     created during confirmation, by passing in a <code>STPPaymentMethodParams</code> or <code>STPSourceParams</code> object in the <code>paymentMethodParams</code> or <code>sourceParams</code> field
///   </li>
///   <li>
///     a pre-existing PaymentMethod or Source can be associated by passing its id in the <code>paymentMethodId</code> or <code>sourceId</code> field
///   </li>
///   <li>
///     or already set via your backend, either when creating or updating the PaymentIntent
///   </li>
/// </ul>
SWIFT_CLASS("_TtC6Stripe22STPPaymentIntentParams")
@interface STPPaymentIntentParams : NSObject
/// Initialize this <code>STPPaymentIntentParams</code> with a <code>clientSecret</code>, which is the only required
/// field.
/// \param clientSecret the client secret for this PaymentIntent
///
- (nonnull instancetype)initWithClientSecret:(NSString * _Nonnull)clientSecret OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// The Stripe id of the PaymentIntent, extracted from the clientSecret.
@property (nonatomic, readonly, copy) NSString * _Nullable stripeId;
/// The client secret of the PaymentIntent. Required
@property (nonatomic, copy) NSString * _Nonnull clientSecret;
/// Provide a supported <code>STPPaymentMethodParams</code> object, and Stripe will create a
/// PaymentMethod during PaymentIntent confirmation.
/// @note alternative to <code>paymentMethodId</code>
@property (nonatomic, strong) STPPaymentMethodParams * _Nullable paymentMethodParams;
/// Provide an already created PaymentMethod’s id, and it will be used to confirm the PaymentIntent.
/// @note alternative to <code>paymentMethodParams</code>
@property (nonatomic, copy) NSString * _Nullable paymentMethodId;
/// Provide a supported <code>STPSourceParams</code> object into here, and Stripe will create a Source
/// during PaymentIntent confirmation.
/// @note alternative to <code>sourceId</code>
@property (nonatomic, strong) STPSourceParams * _Nullable sourceParams;
/// Provide an already created Source’s id, and it will be used to confirm the PaymentIntent.
/// @note alternative to <code>sourceParams</code>
@property (nonatomic, copy) NSString * _Nullable sourceId;
/// Email address that the receipt for the resulting payment will be sent to.
@property (nonatomic, copy) NSString * _Nullable receiptEmail;
/// <code>@YES</code> to save this PaymentIntent’s PaymentMethod or Source to the associated Customer,
/// if the PaymentMethod/Source is not already attached.
/// This should be a boolean NSNumber, so that it can be <code>nil</code>
@property (nonatomic, strong) NSNumber * _Nullable savePaymentMethod;
/// The URL to redirect your customer back to after they authenticate or cancel
/// their payment on the payment method’s app or site.
/// This should probably be a URL that opens your iOS app.
@property (nonatomic, copy) NSString * _Nullable returnURL;
/// When provided, this property indicates how you intend to use the payment method that your customer provides after the current payment completes.
/// If applicable, additional authentication may be performed to comply with regional legislation or network rules required to enable the usage of the same payment method for additional payments.
/// This property should only be used in Objective-C. In Swift, use <code>setupFutureUsage</code>.
/// seealso:
/// STPPaymentIntentSetupFutureUsage for more details on what values you can provide.
@property (nonatomic, strong) NSNumber * _Nullable setupFutureUsage;
/// A boolean number to indicate whether you intend to use the Stripe SDK’s functionality to handle any PaymentIntent next actions.
/// If set to false, STPPaymentIntent.nextAction will only ever contain a redirect url that can be opened in a webview or mobile browser.
/// When set to true, the nextAction may contain information that the Stripe SDK can use to perform native authentication within your
/// app.
@property (nonatomic, strong) NSNumber * _Nullable useStripeSDK;
/// Details about the Mandate to create.
/// @note If this value is null and the (self.paymentMethod.type == STPPaymentMethodTypeSEPADebit | | self.paymentMethodParams.type == STPPaymentMethodTypeAUBECSDebit || self.paymentMethodParams.type == STPPaymentMethodTypeBacsDebit) && self.mandate == nil`, the SDK will set this to an internal value indicating that the mandate data should be inferred from the current context.
@property (nonatomic, strong) STPMandateDataParams * _Nullable mandateData;
/// Options to update the associated PaymentMethod during confirmation.
/// seealso:
/// STPConfirmPaymentMethodOptions
@property (nonatomic, strong) STPConfirmPaymentMethodOptions * _Nullable paymentMethodOptions;
/// Shipping information.
@property (nonatomic, strong) STPPaymentIntentShippingDetailsParams * _Nullable shipping;
/// The URL to redirect your customer back to after they authenticate or cancel
/// their payment on the payment method’s app or site.
/// This property has been renamed to <code>returnURL</code> and deprecated.
@property (nonatomic, copy) NSString * _Nullable returnUrl SWIFT_DEPRECATED_MSG("", "returnURL");
/// <code>@YES</code> to save this PaymentIntent’s Source to the associated Customer,
/// if the Source is not already attached.
/// This should be a boolean NSNumber, so that it can be <code>nil</code>
/// This property has been renamed to <code>savePaymentMethod</code> and deprecated.
@property (nonatomic, strong) NSNumber * _Nullable saveSourceToCustomer SWIFT_DEPRECATED_MSG("", "savePaymentMethod");
/// :nodoc:
@property (nonatomic, copy) NSDictionary * _Nonnull additionalAPIParameters;
/// Provide an STPPaymentResult from STPPaymentContext, and this will populate
/// the proper field (either paymentMethodId or paymentMethodParams) for your PaymentMethod.
- (void)configureWith:(STPPaymentResult * _Nonnull)paymentResult;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


@interface STPPaymentIntentParams (SWIFT_EXTENSION(Stripe)) <NSCopying>
/// :nodoc:
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


@interface STPPaymentIntentParams (SWIFT_EXTENSION(Stripe)) <STPFormEncodable>
+ (NSString * _Nullable)rootObjectName SWIFT_WARN_UNUSED_RESULT;
+ (NSDictionary<NSString *, NSString *> * _Nonnull)propertyNamesToFormFieldNamesMapping SWIFT_WARN_UNUSED_RESULT;
@end

/// Indicates how you intend to use the payment method that your customer provides after the current payment completes.
/// If applicable, additional authentication may be performed to comply with regional legislation or network rules required to enable the usage of the same payment method for additional payments.
/// seealso:
/// https://stripe.com/docs/api/payment_intents/object#payment_intent_object-setup_future_usage
typedef SWIFT_ENUM(NSInteger, STPPaymentIntentSetupFutureUsage, open) {
/// Unknown value.  Update your SDK, or use <code>allResponseFields</code> for custom handling.
  STPPaymentIntentSetupFutureUsageUnknown = 0,
/// No value was provided.
  STPPaymentIntentSetupFutureUsageNone = 1,
/// Indicates you intend to only reuse the payment method when the customer is in your checkout flow.
  STPPaymentIntentSetupFutureUsageOnSession = 2,
/// Indicates you intend to reuse the payment method when the customer may or may not be in your checkout flow.
  STPPaymentIntentSetupFutureUsageOffSession = 3,
};

@class STPPaymentIntentShippingDetailsAddress;

/// Shipping information for a PaymentIntent
/// You cannot directly instantiate an <code>STPPaymentIntentShippingDetails</code>.
/// You should only use one that is part of an existing <code>STPPaymentMethod</code> object.
/// seealso:
/// https://stripe.com/docs/api/payment_intents/object#payment_intent_object-shipping
SWIFT_CLASS("_TtC6Stripe31STPPaymentIntentShippingDetails")
@interface STPPaymentIntentShippingDetails : NSObject
/// Shipping address.
@property (nonatomic, readonly, strong) STPPaymentIntentShippingDetailsAddress * _Nullable address;
/// Recipient name.
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc.
@property (nonatomic, readonly, copy) NSString * _Nullable carrier;
/// Recipient phone (including extension).
@property (nonatomic, readonly, copy) NSString * _Nullable phone;
/// The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas.
@property (nonatomic, readonly, copy) NSString * _Nullable trackingNumber;
/// :nodoc:
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface STPPaymentIntentShippingDetails (SWIFT_EXTENSION(Stripe)) <STPAPIResponseDecodable>
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
@end


/// Shipping address for a PaymentIntent’s shipping details.
/// You cannot directly instantiate an <code>STPPaymentIntentShippingDetailsAddress</code>.
/// You should only use one that is part of an existing <code>STPPaymentMethod</code> object.
/// seealso:
/// https://stripe.com/docs/api/payment_intents/object#payment_intent_object-shipping
SWIFT_CLASS("_TtC6Stripe38STPPaymentIntentShippingDetailsAddress")
@interface STPPaymentIntentShippingDetailsAddress : NSObject
/// City/District/Suburb/Town/Village.
@property (nonatomic, readonly, copy) NSString * _Nullable city;
/// Two-letter country code (ISO 3166-1 alpha-2).
@property (nonatomic, readonly, copy) NSString * _Nullable country;
/// Address line 1 (Street address/PO Box/Company name).
@property (nonatomic, readonly, copy) NSString * _Nullable line1;
/// Address line 2 (Apartment/Suite/Unit/Building).
@property (nonatomic, readonly, copy) NSString * _Nullable line2;
/// ZIP or postal code.
@property (nonatomic, readonly, copy) NSString * _Nullable postalCode;
/// State/County/Province/Region.
@property (nonatomic, readonly, copy) NSString * _Nullable state;
/// :nodoc:
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface STPPaymentIntentShippingDetailsAddress (SWIFT_EXTENSION(Stripe)) <STPAPIResponseDecodable>
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
@end


/// Shipping address for a PaymentIntent’s shipping details.
/// seealso:
/// https://stripe.com/docs/api/payment_intents/confirm#confirm_payment_intent-shipping-address
SWIFT_CLASS("_TtC6Stripe44STPPaymentIntentShippingDetailsAddressParams")
@interface STPPaymentIntentShippingDetailsAddressParams : NSObject
/// City/District/Suburb/Town/Village.
@property (nonatomic, copy) NSString * _Nullable city;
/// Two-letter country code (ISO 3166-1 alpha-2).
@property (nonatomic, copy) NSString * _Nullable country;
/// Address line 1 (Street address/PO Box/Company name).
@property (nonatomic, copy) NSString * _Nonnull line1;
/// Address line 2 (Apartment/Suite/Unit/Building).
@property (nonatomic, copy) NSString * _Nullable line2;
/// ZIP or postal code.
@property (nonatomic, copy) NSString * _Nullable postalCode;
/// State/County/Province/Region.
@property (nonatomic, copy) NSString * _Nullable state;
@property (nonatomic, copy) NSDictionary * _Nonnull additionalAPIParameters;
/// Initialize an <code>STPPaymentIntentShippingDetailsAddressParams</code> instance with required properties.
- (nonnull instancetype)initWithLine1:(NSString * _Nonnull)line1 OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface STPPaymentIntentShippingDetailsAddressParams (SWIFT_EXTENSION(Stripe)) <NSCopying>
/// :nodoc:
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


@interface STPPaymentIntentShippingDetailsAddressParams (SWIFT_EXTENSION(Stripe)) <STPFormEncodable>
+ (NSDictionary<NSString *, NSString *> * _Nonnull)propertyNamesToFormFieldNamesMapping SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)rootObjectName SWIFT_WARN_UNUSED_RESULT;
@end


/// Shipping information for a PaymentIntent
/// seealso:
/// https://stripe.com/docs/api/payment_intents/confirm#confirm_payment_intent-shipping
SWIFT_CLASS("_TtC6Stripe37STPPaymentIntentShippingDetailsParams")
@interface STPPaymentIntentShippingDetailsParams : NSObject
/// Shipping address.
@property (nonatomic, strong) STPPaymentIntentShippingDetailsAddressParams * _Nonnull address;
/// Recipient name.
@property (nonatomic, copy) NSString * _Nonnull name;
/// The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc.
@property (nonatomic, copy) NSString * _Nullable carrier;
/// Recipient phone (including extension).
@property (nonatomic, copy) NSString * _Nullable phone;
/// The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas.
@property (nonatomic, copy) NSString * _Nullable trackingNumber;
/// :nodoc:
@property (nonatomic, copy) NSDictionary * _Nonnull additionalAPIParameters;
/// Initialize an <code>STPPaymentIntentShippingDetailsParams</code> with required properties.
- (nonnull instancetype)initWithAddress:(STPPaymentIntentShippingDetailsAddressParams * _Nonnull)address name:(NSString * _Nonnull)name OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface STPPaymentIntentShippingDetailsParams (SWIFT_EXTENSION(Stripe)) <NSCopying>
/// :nodoc:
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


@interface STPPaymentIntentShippingDetailsParams (SWIFT_EXTENSION(Stripe)) <STPFormEncodable>
+ (NSDictionary<NSString *, NSString *> * _Nonnull)propertyNamesToFormFieldNamesMapping SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)rootObjectName SWIFT_WARN_UNUSED_RESULT;
@end


/// Source Action details for an STPPaymentIntent. This is a container for
/// the various types that are available. Check the <code>type</code> to see which one
/// it is, and then use the related property for the details necessary to handle
/// it.
/// @deprecated Use <code>STPIntentAction</code> instead.
SWIFT_CLASS("_TtC6Stripe28STPPaymentIntentSourceAction") SWIFT_UNAVAILABLE_MSG("'STPPaymentIntentSourceAction' has been renamed to '_TtC6Stripe15STPIntentAction': Use `STPIntentAction` instead.")
@interface STPPaymentIntentSourceAction : STPIntentAction
@end


/// The <code>STPPaymentIntentSourceAction</code> details when type is <code>STPPaymentIntentSourceActionTypeAuthorizeWithURL</code>.
/// These are created & owned by the containing <code>STPPaymentIntent</code>.
/// @deprecated Use <code>STPIntentActionRedirectToURL</code> instead.
SWIFT_CLASS("_TtC6Stripe44STPPaymentIntentSourceActionAuthorizeWithURL") SWIFT_UNAVAILABLE_MSG("'STPPaymentIntentSourceActionAuthorizeWithURL' has been renamed to '_TtC6Stripe28STPIntentActionRedirectToURL': Use `STPIntentActionRedirectToURL` instead.")
@interface STPPaymentIntentSourceActionAuthorizeWithURL : STPIntentActionRedirectToURL
@end

/// Types of Source Actions from a <code>STPPaymentIntent</code>, when the payment intent
/// status is <code>STPPaymentIntentStatusRequiresSourceAction</code>.
/// @deprecated Use<code>STPPaymentIntentActionType</code> instead.
typedef SWIFT_ENUM(NSInteger, STPPaymentIntentSourceActionType, open) {
/// This is an unknown source action, that’s been added since the SDK
/// was last updated.
/// Update your SDK, or use the <code>nextSourceAction.allResponseFields</code>
/// for custom handling.
  STPPaymentIntentSourceActionTypeUnknown = 0,
/// The payment intent needs to be authorized by the user. We provide
/// <code>STPRedirectContext</code> to handle the url redirections necessary.
  STPPaymentIntentSourceActionTypeAuthorizeWithURL = 1,
};

/// Status types for an STPPaymentIntent
typedef SWIFT_ENUM(NSInteger, STPPaymentIntentStatus, open) {
/// Unknown status
  STPPaymentIntentStatusUnknown = 0,
/// This PaymentIntent requires a PaymentMethod or Source
  STPPaymentIntentStatusRequiresPaymentMethod = 1,
/// This PaymentIntent requires a Source
/// Deprecated: Use STPPaymentIntentStatusRequiresPaymentMethod instead.
  STPPaymentIntentStatusRequiresSource = 2,
/// This PaymentIntent needs to be confirmed
  STPPaymentIntentStatusRequiresConfirmation = 3,
/// The selected PaymentMethod or Source requires additional authentication steps.
/// Additional actions found via <code>next_action</code>
  STPPaymentIntentStatusRequiresAction = 4,
/// The selected Source requires additional authentication steps.
/// Additional actions found via <code>next_source_action</code>
/// Deprecated: Use STPPaymentIntentStatusRequiresAction instead.
  STPPaymentIntentStatusRequiresSourceAction = 5,
/// Stripe is processing this PaymentIntent
  STPPaymentIntentStatusProcessing = 6,
/// The payment has succeeded
  STPPaymentIntentStatusSucceeded = 7,
/// Indicates the payment must be captured, for STPPaymentIntentCaptureMethodManual
  STPPaymentIntentStatusRequiresCapture = 8,
/// This PaymentIntent was canceled and cannot be changed.
  STPPaymentIntentStatusCanceled = 9,
};

enum STPPaymentMethodType : NSInteger;
@class STPPaymentMethodAlipay;
@class STPPaymentMethodGrabPay;
@class STPPaymentMethodCard;
@class STPPaymentMethodiDEAL;
@class STPPaymentMethodFPX;
@class STPPaymentMethodCardPresent;
@class STPPaymentMethodSEPADebit;
@class STPPaymentMethodBacsDebit;
@class STPPaymentMethodAUBECSDebit;
@class STPPaymentMethodGiropay;
@class STPPaymentMethodEPS;
@class STPPaymentMethodPrzelewy24;
@class STPPaymentMethodBancontact;
@class STPPaymentMethodNetBanking;
@class STPPaymentMethodOXXO;
@class STPPaymentMethodSofort;
@class STPPaymentMethodUPI;
@class STPPaymentMethodPayPal;
@class STPPaymentMethodAfterpayClearpay;
@class STPPaymentMethodBLIK;
@class STPPaymentMethodBoleto;
@class STPPaymentMethodLink;
@class STPPaymentMethodKlarna;

/// PaymentMethod objects represent your customer’s payment instruments. They can be used with PaymentIntents to collect payments.
/// seealso:
/// https://stripe.com/docs/api/payment_methods
SWIFT_CLASS("_TtC6Stripe16STPPaymentMethod")
@interface STPPaymentMethod : NSObject <STPAPIResponseDecodable, STPPaymentOption>
/// Unique identifier for the object.
@property (nonatomic, readonly, copy) NSString * _Nonnull stripeId;
/// Time at which the object was created. Measured in seconds since the Unix epoch.
@property (nonatomic, readonly, copy) NSDate * _Nullable created;
/// <code>YES</code> if the object exists in live mode or the value <code>NO</code> if the object exists in test mode.
@property (nonatomic, readonly) BOOL liveMode;
/// The type of the PaymentMethod.  The corresponding, similarly named property contains additional information specific to the PaymentMethod type.
/// e.g. if the type is <code>STPPaymentMethodTypeCard</code>, the <code>card</code> property is also populated.
@property (nonatomic, readonly) enum STPPaymentMethodType type;
/// Billing information associated with the PaymentMethod that may be used or required by particular types of payment methods.
@property (nonatomic, readonly, strong) STPPaymentMethodBillingDetails * _Nullable billingDetails;
/// If this is an Alipay PaymentMethod (ie <code>self.type == STPPaymentMethodTypeAlipay</code>), this contains additional detailsl
@property (nonatomic, readonly, strong) STPPaymentMethodAlipay * _Nullable alipay;
/// If this is a GrabPay PaymentMethod (ie <code>self.type == STPPaymentMethodTypeGrabPay</code>), this contains additional details.
@property (nonatomic, readonly, strong) STPPaymentMethodGrabPay * _Nullable grabPay;
/// If this is a card PaymentMethod (ie <code>self.type == STPPaymentMethodTypeCard</code>), this contains additional details.
@property (nonatomic, readonly, strong) STPPaymentMethodCard * _Nullable card;
/// If this is a iDEAL PaymentMethod (ie <code>self.type == STPPaymentMethodTypeiDEAL</code>), this contains additional details.
@property (nonatomic, readonly, strong) STPPaymentMethodiDEAL * _Nullable iDEAL;
/// If this is an FPX PaymentMethod (ie <code>self.type == STPPaymentMethodTypeFPX</code>), this contains additional details.
@property (nonatomic, readonly, strong) STPPaymentMethodFPX * _Nullable fpx;
/// If this is a card present PaymentMethod (ie <code>self.type == STPPaymentMethodTypeCardPresent</code>), this contains additional details.
@property (nonatomic, readonly, strong) STPPaymentMethodCardPresent * _Nullable cardPresent;
/// If this is a SEPA Debit PaymentMethod (ie <code>self.type == STPPaymentMethodTypeSEPADebit</code>), this contains additional details.
@property (nonatomic, readonly, strong) STPPaymentMethodSEPADebit * _Nullable sepaDebit;
/// If this is a Bacs Debit PaymentMethod (ie <code>self.type == STPPaymentMethodTypeBacsDebit</code>), this contains additional details.
@property (nonatomic, readonly, strong) STPPaymentMethodBacsDebit * _Nullable bacsDebit;
/// If this is an AU BECS Debit PaymentMethod (i.e. <code>self.type == STPPaymentMethodTypeAUBECSDebit</code>), this contains additional details.
@property (nonatomic, readonly, strong) STPPaymentMethodAUBECSDebit * _Nullable auBECSDebit;
/// If this is a giropay PaymentMethod (i.e. <code>self.type == STPPaymentMethodTypeGiropay</code>), this contains additional details.
@property (nonatomic, readonly, strong) STPPaymentMethodGiropay * _Nullable giropay;
/// If this is an EPS PaymentMethod (i.e. <code>self.type == STPPaymentMethodTypeEPS</code>), this contains additional details.
@property (nonatomic, readonly, strong) STPPaymentMethodEPS * _Nullable eps;
/// If this is a Przelewy24 PaymentMethod (i.e. <code>self.type == STPPaymentMethodTypePrzelewy24</code>), this contains additional details.
@property (nonatomic, readonly, strong) STPPaymentMethodPrzelewy24 * _Nullable przelewy24;
/// If this is a Bancontact PaymentMethod (i.e. <code>self.type == STPPaymentMethodTypeBancontact</code>), this contains additional details.
@property (nonatomic, readonly, strong) STPPaymentMethodBancontact * _Nullable bancontact;
/// If this is a NetBanking PaymentMethod (i.e. <code>self.type == STPPaymentMethodTypeNetBanking</code>), this contains additional details.
@property (nonatomic, readonly, strong) STPPaymentMethodNetBanking * _Nullable netBanking;
/// If this is an OXXO PaymentMethod (i.e. <code>self.type == STPPaymentMethodTypeOXXO</code>), this contains additional details.
@property (nonatomic, readonly, strong) STPPaymentMethodOXXO * _Nullable oxxo;
/// If this is a Sofort PaymentMethod (i.e. <code>self.type == STPPaymentMethodTypeSofort</code>), this contains additional details.
@property (nonatomic, readonly, strong) STPPaymentMethodSofort * _Nullable sofort;
/// If this is a UPI PaymentMethod (i.e. <code>self.type == STPPaymentMethodTypeUPI</code>), this contains additional details. :nodoc:
@property (nonatomic, readonly, strong) STPPaymentMethodUPI * _Nullable upi;
/// If this is a PayPal PaymentMethod (i.e. <code>self.type == STPPaymentMethodTypePayPal</code>), this contains additional details. :nodoc:
@property (nonatomic, readonly, strong) STPPaymentMethodPayPal * _Nullable payPal;
/// If this is an AfterpayClearpay PaymentMethod (i.e. <code>self.type == STPPaymentMethodTypeAfterpayClearpay</code>), this contains additional details. :nodoc:
@property (nonatomic, readonly, strong) STPPaymentMethodAfterpayClearpay * _Nullable afterpayClearpay;
/// If this is a BLIK PaymentMethod (i.e. <code>self.type == STPPaymentMethodTypeBLIK</code>), this contains additional details. :nodoc:
@property (nonatomic, readonly, strong) STPPaymentMethodBLIK * _Nullable blik;
/// If this is an Boleto PaymentMethod (i.e. <code>self.type == STPPaymentMethodTypeBoleto</code>), this contains additional details.
@property (nonatomic, readonly, strong) STPPaymentMethodBoleto * _Nullable boleto;
/// If this is a Link PaymentMethod (i.e. <code>self.type == STPPaymentMethodTypeLink</code>), this contains additional details.
@property (nonatomic, readonly, strong) STPPaymentMethodLink * _Nullable link;
/// If this is an Boleto PaymentMethod (i.e. <code>self.type == STPPaymentMethodTypeKlarna</code>), this contains additional details.
@property (nonatomic, readonly, strong) STPPaymentMethodKlarna * _Nullable klarna;
/// The ID of the Customer to which this PaymentMethod is saved. Nil when the PaymentMethod has not been saved to a Customer.
@property (nonatomic, readonly, copy) NSString * _Nullable customerId;
/// Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
/// @deprecated Metadata is no longer returned to clients using publishable keys. Retrieve them on your server using yoursecret key instead.
/// seealso:
/// https://stripe.com/docs/api#metadata
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable metadata SWIFT_DEPRECATED_MSG("Metadata is no longer returned to clients using publishable keys. Retrieve them on your server using your secret key instead.");
/// :nodoc:
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, strong) UIImage * _Nonnull image;
@property (nonatomic, readonly, strong) UIImage * _Nonnull templateImage;
@property (nonatomic, readonly, copy) NSString * _Nonnull label;
@property (nonatomic, readonly) BOOL isReusable;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end





/// An AU BECS Debit Payment Method.
/// seealso:
/// https://stripe.com/docs/api/payment_methods/object#payment_method_object-au_becs_debit
SWIFT_CLASS("_TtC6Stripe27STPPaymentMethodAUBECSDebit")
@interface STPPaymentMethodAUBECSDebit : NSObject <STPAPIResponseDecodable>
/// :nodoc:
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
/// Six-digit number identifying bank and branch associated with this bank account.
@property (nonatomic, readonly, copy) NSString * _Nonnull bsbNumber;
/// Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
@property (nonatomic, readonly, copy) NSString * _Nonnull fingerprint;
/// Last four digits of the bank account number.
@property (nonatomic, readonly, copy) NSString * _Nonnull last4;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An object representing parameters used to create an AU BECS Debit Payment Method
SWIFT_CLASS("_TtC6Stripe33STPPaymentMethodAUBECSDebitParams")
@interface STPPaymentMethodAUBECSDebitParams : NSObject <STPFormEncodable>
@property (nonatomic, copy) NSDictionary * _Nonnull additionalAPIParameters;
/// The account number to debit.
@property (nonatomic, copy) NSString * _Nullable accountNumber;
/// Six-digit number identifying bank and branch associated with this bank account.
@property (nonatomic, copy) NSString * _Nullable bsbNumber;
+ (NSString * _Nullable)rootObjectName SWIFT_WARN_UNUSED_RESULT;
+ (NSDictionary<NSString *, NSString *> * _Nonnull)propertyNamesToFormFieldNamesMapping SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The billing address, a property on <code>STPPaymentMethodBillingDetails</code>
SWIFT_CLASS("_TtC6Stripe23STPPaymentMethodAddress")
@interface STPPaymentMethodAddress : NSObject <STPAPIResponseDecodable, STPFormEncodable>
@property (nonatomic, copy) NSDictionary * _Nonnull additionalAPIParameters;
/// City/District/Suburb/Town/Village.
@property (nonatomic, copy) NSString * _Nullable city;
/// 2-letter country code.
@property (nonatomic, copy) NSString * _Nullable country;
/// Address line 1 (Street address/PO Box/Company name).
@property (nonatomic, copy) NSString * _Nullable line1;
/// Address line 2 (Apartment/Suite/Unit/Building).
@property (nonatomic, copy) NSString * _Nullable line2;
/// ZIP or postal code.
@property (nonatomic, copy) NSString * _Nullable postalCode;
/// State/County/Province/Region.
@property (nonatomic, copy) NSString * _Nullable state;
/// Convenience initializer for creating a STPPaymentMethodAddress from an STPAddress.
- (nonnull instancetype)initWithAddress:(STPAddress * _Nonnull)address OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
+ (NSDictionary<NSString *, NSString *> * _Nonnull)propertyNamesToFormFieldNamesMapping SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)rootObjectName SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
@end



/// An AfterpayClearpay Payment Method.
/// seealso:
/// https://stripe.com/docs/api/payment_methods/object#payment_method_object-afterpay_clearpay
SWIFT_CLASS("_TtC6Stripe32STPPaymentMethodAfterpayClearpay")
@interface STPPaymentMethodAfterpayClearpay : NSObject <STPAPIResponseDecodable>
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An object representing parameters used to create an AfterpayClearpay Payment Method
SWIFT_CLASS("_TtC6Stripe38STPPaymentMethodAfterpayClearpayParams")
@interface STPPaymentMethodAfterpayClearpayParams : NSObject <STPFormEncodable>
@property (nonatomic, copy) NSDictionary * _Nonnull additionalAPIParameters;
+ (NSString * _Nullable)rootObjectName SWIFT_WARN_UNUSED_RESULT;
+ (NSDictionary<NSString *, NSString *> * _Nonnull)propertyNamesToFormFieldNamesMapping SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Contains details for an Alipay Payment Method.
/// seealso:
/// https://stripe.com/docs/api/payment_methods/object#payment_method_object-alipay
SWIFT_CLASS("_TtC6Stripe22STPPaymentMethodAlipay")
@interface STPPaymentMethodAlipay : NSObject <STPAPIResponseDecodable>
/// :nodoc:
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// :nodoc:
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An object representing parameters used to create an Alipay Payment Method.
/// There are currently no parameters to pass.
/// seealso:
/// https://site-admin.stripe.com/docs/api/payment_methods/create#create_payment_method-alipay
SWIFT_CLASS("_TtC6Stripe28STPPaymentMethodAlipayParams")
@interface STPPaymentMethodAlipayParams : NSObject <STPFormEncodable>
@property (nonatomic, copy) NSDictionary * _Nonnull additionalAPIParameters;
+ (NSString * _Nullable)rootObjectName SWIFT_WARN_UNUSED_RESULT;
+ (NSDictionary<NSString *, NSString *> * _Nonnull)propertyNamesToFormFieldNamesMapping SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Contains details for a BLIK Payment Method.
/// seealso:
/// https://stripe.com/docs/api/payment_methods/object#payment_method_object-blik
SWIFT_CLASS("_TtC6Stripe20STPPaymentMethodBLIK")
@interface STPPaymentMethodBLIK : NSObject <STPAPIResponseDecodable>
/// :nodoc:
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// :nodoc:
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An object representing parameters used to create a BLIK Payment Method
/// There are currently no parameters to pass.
/// seealso:
/// https://site-admin.stripe.com/docs/api/payment_methods/create#create_payment_method-blik
SWIFT_CLASS("_TtC6Stripe26STPPaymentMethodBLIKParams")
@interface STPPaymentMethodBLIKParams : NSObject <STPFormEncodable>
@property (nonatomic, copy) NSDictionary * _Nonnull additionalAPIParameters;
+ (NSString * _Nullable)rootObjectName SWIFT_WARN_UNUSED_RESULT;
+ (NSDictionary<NSString *, NSString *> * _Nonnull)propertyNamesToFormFieldNamesMapping SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A Bacs Debit Payment Method.
/// seealso:
/// https://stripe.com/docs/api/payment_methods/object#payment_method_object-bacs_debit
SWIFT_CLASS("_TtC6Stripe25STPPaymentMethodBacsDebit")
@interface STPPaymentMethodBacsDebit : NSObject <STPAPIResponseDecodable>
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
/// This payment method’s fingerprint.
@property (nonatomic, readonly, copy) NSString * _Nullable fingerprint;
/// The last four digits of the bank account.
@property (nonatomic, readonly, copy) NSString * _Nullable last4;
/// The sort code of the bank account (eg 10-88-00)
@property (nonatomic, readonly, copy) NSString * _Nullable sortCode;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The user’s bank account details.
/// seealso:
/// https://stripe.com/docs/api/payment_methods/create#create_payment_method-bacs_debit
SWIFT_CLASS("_TtC6Stripe31STPPaymentMethodBacsDebitParams")
@interface STPPaymentMethodBacsDebitParams : NSObject <STPFormEncodable>
@property (nonatomic, copy) NSDictionary * _Nonnull additionalAPIParameters;
/// The bank account number (eg 00012345)
@property (nonatomic, copy) NSString * _Nullable accountNumber;
/// The sort code of the bank account (eg 10-88-00)
@property (nonatomic, copy) NSString * _Nullable sortCode;
+ (NSString * _Nullable)rootObjectName SWIFT_WARN_UNUSED_RESULT;
+ (NSDictionary<NSString *, NSString *> * _Nonnull)propertyNamesToFormFieldNamesMapping SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A Bancontact Payment Method.
/// seealso:
/// https://stripe.com/docs/payments/bancontact
SWIFT_CLASS("_TtC6Stripe26STPPaymentMethodBancontact")
@interface STPPaymentMethodBancontact : NSObject <STPAPIResponseDecodable>
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An object representing parameters used to create a Bancontact Payment Method
SWIFT_CLASS("_TtC6Stripe32STPPaymentMethodBancontactParams")
@interface STPPaymentMethodBancontactParams : NSObject <STPFormEncodable>
@property (nonatomic, copy) NSDictionary * _Nonnull additionalAPIParameters;
+ (NSString * _Nullable)rootObjectName SWIFT_WARN_UNUSED_RESULT;
+ (NSDictionary<NSString *, NSString *> * _Nonnull)propertyNamesToFormFieldNamesMapping SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Billing information associated with a <code>STPPaymentMethod</code> that may be used or required by particular types of payment methods.
/// seealso:
/// https://stripe.com/docs/api/payment_methods/object#payment_method_object-billing_details
SWIFT_CLASS("_TtC6Stripe30STPPaymentMethodBillingDetails")
@interface STPPaymentMethodBillingDetails : NSObject <STPAPIResponseDecodable, STPFormEncodable>
@property (nonatomic, copy) NSDictionary * _Nonnull additionalAPIParameters;
/// Billing address.
@property (nonatomic, strong) STPPaymentMethodAddress * _Nullable address;
/// Email address.
@property (nonatomic, copy) NSString * _Nullable email;
/// Full name.
@property (nonatomic, copy) NSString * _Nullable name;
/// Billing phone number (including extension).
@property (nonatomic, copy) NSString * _Nullable phone;
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (NSDictionary<NSString *, NSString *> * _Nonnull)propertyNamesToFormFieldNamesMapping SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)rootObjectName SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
@end




/// A Boleto Payment Method.
/// seealso:
/// https://stripe.com/docs/payments/boleto
SWIFT_CLASS("_TtC6Stripe22STPPaymentMethodBoleto")
@interface STPPaymentMethodBoleto : NSObject <STPAPIResponseDecodable>
/// The tax ID of the customer (CPF for individuals or CNPJ for businesses).
@property (nonatomic, readonly, copy) NSString * _Nonnull taxID;
/// :nodoc:
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An object representing parameters used to create a Boleto Payment Method
SWIFT_CLASS("_TtC6Stripe28STPPaymentMethodBoletoParams")
@interface STPPaymentMethodBoletoParams : NSObject <STPFormEncodable>
/// The tax ID of the customer (CPF for individuals or CNPJ for businesses).
/// Supported formats:
/// <ul>
///   <li>
///     <code>XXX.XXX.XXX-XX</code> or <code>XXXXXXXXXXX</code> for CPF
///   </li>
///   <li>
///     <code>XX.XXX.XXX/XXXX-XX</code> or <code>XXXXXXXXXXXXXX</code> for CNPJ
///   </li>
/// </ul>
@property (nonatomic, copy) NSString * _Nullable taxID;
/// :nodoc:
@property (nonatomic, copy) NSDictionary * _Nonnull additionalAPIParameters;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
+ (NSString * _Nullable)rootObjectName SWIFT_WARN_UNUSED_RESULT;
+ (NSDictionary<NSString *, NSString *> * _Nonnull)propertyNamesToFormFieldNamesMapping SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class STPPaymentMethodCardChecks;
@class STPPaymentMethodCardNetworks;
@class STPPaymentMethodThreeDSecureUsage;
@class STPPaymentMethodCardWallet;

/// Contains details about a user’s credit card.
/// seealso:
/// https://stripe.com/docs/api/payment_methods/object#payment_method_object-card
SWIFT_CLASS("_TtC6Stripe20STPPaymentMethodCard")
@interface STPPaymentMethodCard : NSObject <STPAPIResponseDecodable>
/// You cannot directly instantiate an <code>STPPaymentMethodCard</code>. You should only use one that is part of an existing <code>STPPaymentMethod</code> object.
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// The issuer of the card.
@property (nonatomic, readonly) enum STPCardBrand brand;
/// Checks on Card address and CVC if provided.
@property (nonatomic, readonly, strong) STPPaymentMethodCardChecks * _Nullable checks;
/// Two-letter ISO code representing the country of the card.
@property (nonatomic, readonly, copy) NSString * _Nullable country;
/// Two-digit number representing the card’s expiration month.
@property (nonatomic, readonly) NSInteger expMonth;
/// Four-digit number representing the card’s expiration year.
@property (nonatomic, readonly) NSInteger expYear;
/// Card funding type. Can be credit, debit, prepaid, or unknown.
@property (nonatomic, readonly, copy) NSString * _Nullable funding;
/// The last four digits of the card.
@property (nonatomic, readonly, copy) NSString * _Nullable last4;
/// Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example.
@property (nonatomic, readonly, copy) NSString * _Nullable fingerprint;
/// Contains information about card networks that can be used to process the payment.
@property (nonatomic, readonly, strong) STPPaymentMethodCardNetworks * _Nullable networks;
/// Contains details on how this Card maybe be used for 3D Secure authentication.
@property (nonatomic, readonly, strong) STPPaymentMethodThreeDSecureUsage * _Nullable threeDSecureUsage;
/// If this Card is part of a Card Wallet, this contains the details of the Card Wallet.
@property (nonatomic, readonly, strong) STPPaymentMethodCardWallet * _Nullable wallet;
/// Returns a string representation for the provided card brand;
/// i.e. <code>STPPaymentMethodCard.string(from brand:.visa) == "Visa"</code>.
/// \param brand the brand you want to convert to a string
///
///
/// returns:
/// A string representing the brand, suitable for displaying to a user.
+ (NSString * _Nonnull)stringFromBrand:(enum STPCardBrand)brand SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
@end

/// The result of a check on a Card address or CVC.
typedef SWIFT_ENUM(NSInteger, STPPaymentMethodCardCheckResult, open) {
/// The check passed.
  STPPaymentMethodCardCheckResultPass = 0,
/// The check failed.
  STPPaymentMethodCardCheckResultFailed = 1,
/// The check is unavailable.
  STPPaymentMethodCardCheckResultUnavailable = 2,
/// The value was not checked.
  STPPaymentMethodCardCheckResultUnchecked = 3,
/// Represents an unknown or null value.
  STPPaymentMethodCardCheckResultUnknown = 4,
};


/// Checks on Card address and CVC.
/// seealso:
/// https://stripe.com/docs/api/payment_methods/object#payment_method_object-card-checks
SWIFT_CLASS("_TtC6Stripe26STPPaymentMethodCardChecks")
@interface STPPaymentMethodCardChecks : NSObject <STPAPIResponseDecodable>
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// If a address line1 was provided, results of the check.
@property (nonatomic, readonly) enum STPPaymentMethodCardCheckResult addressLine1Check SWIFT_DEPRECATED_MSG("Card check values are no longer returned to clients using publishable keys. Retrieve them on your server using your secret key instead.");
/// If a address postal code was provided, results of the check.
/// deprecated Card check values are no longer returned to clients using publishable keys. Retrieve them on your server using yoursecret key instead.
@property (nonatomic, readonly) enum STPPaymentMethodCardCheckResult addressPostalCodeCheck SWIFT_DEPRECATED_MSG("Card check values are no longer returned to clients using publishable keys. Retrieve them on your server using your secret key instead.");
/// If a CVC was provided, results of the check.
/// deprecated Card check values are no longer returned to clients using publishable keys. Retrieve them on your server using yoursecret key instead.
@property (nonatomic, readonly) enum STPPaymentMethodCardCheckResult cvcCheck SWIFT_DEPRECATED_MSG("Card check values are no longer returned to clients using publishable keys. Retrieve them on your server using your secret key instead.");
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
@end


/// <code>STPPaymentMethodCardNetworks</code> contains information about card networks that can be used to process a payment.
SWIFT_CLASS("_TtC6Stripe28STPPaymentMethodCardNetworks")
@interface STPPaymentMethodCardNetworks : NSObject <STPAPIResponseDecodable>
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
/// All available networks for the card.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull available;
/// The preferred network for the card if one exists.
@property (nonatomic, readonly, copy) NSString * _Nullable preferred;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The user’s card details.
SWIFT_CLASS("_TtC6Stripe26STPPaymentMethodCardParams")
@interface STPPaymentMethodCardParams : NSObject <STPFormEncodable>
@property (nonatomic, copy) NSDictionary * _Nonnull additionalAPIParameters;
/// A convenience initializer for creating a payment method from a card source.
/// This should be used to help with migrations to Payment Methods from Sources.
- (nonnull instancetype)initWithCardSourceParams:(STPCardParams * _Nonnull)cardSourceParams;
/// Initializes an empty STPPaymentMethodCardParams.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// The card number, as a string without any separators. Ex. @“4242424242424242”
@property (nonatomic, copy) NSString * _Nullable number;
/// Number representing the card’s expiration month. Ex. @1
@property (nonatomic, strong) NSNumber * _Nullable expMonth;
/// Two- or four-digit number representing the card’s expiration year.
@property (nonatomic, strong) NSNumber * _Nullable expYear;
/// For backwards compatibility, you can alternatively set this as a Stripe token (e.g., for apple pay)
@property (nonatomic, copy) NSString * _Nullable token;
/// Card security code. It is highly recommended to always include this value.
@property (nonatomic, copy) NSString * _Nullable cvc;
/// The last 4 digits of the card.
@property (nonatomic, readonly, copy) NSString * _Nullable last4;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
+ (NSString * _Nullable)rootObjectName SWIFT_WARN_UNUSED_RESULT;
+ (NSDictionary<NSString *, NSString *> * _Nonnull)propertyNamesToFormFieldNamesMapping SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)other SWIFT_WARN_UNUSED_RESULT;
@end


/// Details about the Card Present payment method
SWIFT_CLASS("_TtC6Stripe27STPPaymentMethodCardPresent")
@interface STPPaymentMethodCardPresent : NSObject <STPAPIResponseDecodable>
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
@end

enum STPPaymentMethodCardWalletType : NSInteger;
@class STPPaymentMethodCardWalletMasterpass;
@class STPPaymentMethodCardWalletVisaCheckout;

/// A Card Wallet.
/// seealso:
/// https://stripe.com/docs/api/payment_methods/object#payment_method_object-card-wallet
SWIFT_CLASS("_TtC6Stripe26STPPaymentMethodCardWallet")
@interface STPPaymentMethodCardWallet : NSObject <STPAPIResponseDecodable>
/// The type of the Card Wallet. A matching property is populated if the type is <code>STPPaymentMethodCardWalletTypeMasterpass</code> or <code>STPPaymentMethodCardWalletTypeVisaCheckout</code> containing additional information specific to the Card Wallet type.
@property (nonatomic, readonly) enum STPPaymentMethodCardWalletType type;
/// Contains additional Masterpass information, if the type of the Card Wallet is <code>STPPaymentMethodCardWalletTypeMasterpass</code>
@property (nonatomic, readonly, strong) STPPaymentMethodCardWalletMasterpass * _Nullable masterpass;
/// Contains additional Visa Checkout information, if the type of the Card Wallet is <code>STPPaymentMethodCardWalletTypeVisaCheckout</code>
@property (nonatomic, readonly, strong) STPPaymentMethodCardWalletVisaCheckout * _Nullable visaCheckout;
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
@end



/// A Masterpass Card Wallet
/// seealso:
/// https://stripe.com/docs/masterpass
SWIFT_CLASS("_TtC6Stripe36STPPaymentMethodCardWalletMasterpass")
@interface STPPaymentMethodCardWalletMasterpass : NSObject <STPAPIResponseDecodable>
/// Owner’s verified email. Values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement.
@property (nonatomic, readonly, copy) NSString * _Nullable email;
/// Owner’s verified email. Values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement.
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// Owner’s verified billing address. Values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement.
@property (nonatomic, readonly, strong) STPPaymentMethodAddress * _Nullable billingAddress;
/// Owner’s verified shipping address. Values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement.
@property (nonatomic, readonly, strong) STPPaymentMethodAddress * _Nullable shippingAddress;
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
@end

/// The type of Card Wallet.
typedef SWIFT_ENUM(NSInteger, STPPaymentMethodCardWalletType, open) {
/// Amex Express Checkout
  STPPaymentMethodCardWalletTypeAmexExpressCheckout = 0,
/// Apple Pay
  STPPaymentMethodCardWalletTypeApplePay = 1,
/// Google Pay
  STPPaymentMethodCardWalletTypeGooglePay = 2,
/// Masterpass
  STPPaymentMethodCardWalletTypeMasterpass = 3,
/// Samsung Pay
  STPPaymentMethodCardWalletTypeSamsungPay = 4,
/// Visa Checkout
  STPPaymentMethodCardWalletTypeVisaCheckout = 5,
/// An unknown Card Wallet type.
  STPPaymentMethodCardWalletTypeUnknown = 6,
};


/// A Visa Checkout Card Wallet
/// seealso:
/// https://stripe.com/docs/visa-checkout
SWIFT_CLASS("_TtC6Stripe38STPPaymentMethodCardWalletVisaCheckout")
@interface STPPaymentMethodCardWalletVisaCheckout : NSObject <STPAPIResponseDecodable>
/// Owner’s verified email. Values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement.
@property (nonatomic, readonly, copy) NSString * _Nullable email;
/// Owner’s verified email. Values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement.
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// Owner’s verified billing address. Values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement.
@property (nonatomic, readonly, strong) STPPaymentMethodAddress * _Nullable billingAddress;
/// Owner’s verified shipping address. Values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement.
@property (nonatomic, readonly, strong) STPPaymentMethodAddress * _Nullable shippingAddress;
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
@end


/// An EPS Payment Method.
/// seealso:
/// https://stripe.com/docs/api/payment_methods/object#payment_method_object-eps
SWIFT_CLASS("_TtC6Stripe19STPPaymentMethodEPS")
@interface STPPaymentMethodEPS : NSObject <STPAPIResponseDecodable>
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An object representing parameters used to create a EPS Payment Method
SWIFT_CLASS("_TtC6Stripe25STPPaymentMethodEPSParams")
@interface STPPaymentMethodEPSParams : NSObject <STPFormEncodable>
@property (nonatomic, copy) NSDictionary * _Nonnull additionalAPIParameters;
+ (NSString * _Nullable)rootObjectName SWIFT_WARN_UNUSED_RESULT;
+ (NSDictionary<NSString *, NSString *> * _Nonnull)propertyNamesToFormFieldNamesMapping SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// An FPX Payment Method.
/// seealso:
/// https://stripe.com/docs/api/payment_methods/object#payment_method_object-fpx
SWIFT_CLASS("_TtC6Stripe19STPPaymentMethodFPX")
@interface STPPaymentMethodFPX : NSObject <STPAPIResponseDecodable>
/// The customer’s bank identifier code.
@property (nonatomic, readonly, copy) NSString * _Nullable bankIdentifierCode;
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
@end


/// An object representing parameters used to create an FPX Payment Method
SWIFT_CLASS("_TtC6Stripe25STPPaymentMethodFPXParams")
@interface STPPaymentMethodFPXParams : NSObject <STPFormEncodable>
@property (nonatomic, copy) NSDictionary * _Nonnull additionalAPIParameters;
/// The customer’s bank. Required.
@property (nonatomic) enum STPFPXBankBrand bank;
/// The raw underlying bank string sent to the server.
/// Generally you should use <code>bank</code> instead unless you have a reason not to.
/// You can use this if you want to create a param of a bank not yet supported
/// by the current version of the SDK’s <code>STPFPXBankBrand</code> enum.
/// Setting this to a value not known by the SDK causes <code>bank</code> to
/// return <code>STPFPXBankBrandUnknown</code>
@property (nonatomic, copy) NSString * _Nullable rawBankString;
+ (NSString * _Nullable)rootObjectName SWIFT_WARN_UNUSED_RESULT;
+ (NSDictionary<NSString *, NSString *> * _Nonnull)propertyNamesToFormFieldNamesMapping SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A giropay Payment Method.
/// seealso:
/// https://stripe.com/docs/api/payment_methods/object#payment_method_object-giropay
SWIFT_CLASS("_TtC6Stripe23STPPaymentMethodGiropay")
@interface STPPaymentMethodGiropay : NSObject <STPAPIResponseDecodable>
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An object representing parameters used to create a giropay Payment Method
SWIFT_CLASS("_TtC6Stripe29STPPaymentMethodGiropayParams")
@interface STPPaymentMethodGiropayParams : NSObject <STPFormEncodable>
@property (nonatomic, copy) NSDictionary * _Nonnull additionalAPIParameters;
+ (NSString * _Nullable)rootObjectName SWIFT_WARN_UNUSED_RESULT;
+ (NSDictionary<NSString *, NSString *> * _Nonnull)propertyNamesToFormFieldNamesMapping SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A GrabPay PaymentMethod
/// seealso:
/// https://stripe.com/docs/api/payment_methods/object#payment_method_object-grabpay
SWIFT_CLASS("_TtC6Stripe23STPPaymentMethodGrabPay")
@interface STPPaymentMethodGrabPay : NSObject <STPAPIResponseDecodable>
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An object representing parameters used to create a GrabPay Payment Method
SWIFT_CLASS("_TtC6Stripe29STPPaymentMethodGrabPayParams")
@interface STPPaymentMethodGrabPayParams : NSObject <STPFormEncodable>
@property (nonatomic, copy) NSDictionary * _Nonnull additionalAPIParameters;
+ (NSString * _Nullable)rootObjectName SWIFT_WARN_UNUSED_RESULT;
+ (NSDictionary<NSString *, NSString *> * _Nonnull)propertyNamesToFormFieldNamesMapping SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The Klarna Payment Method.
/// seealso:
/// https://stripe.com/docs/payments/klarna
SWIFT_CLASS("_TtC6Stripe22STPPaymentMethodKlarna")
@interface STPPaymentMethodKlarna : NSObject
/// :nodoc:
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An object representing parameters used to create an Klarna Payment Method
SWIFT_CLASS("_TtC6Stripe28STPPaymentMethodKlarnaParams")
@interface STPPaymentMethodKlarnaParams : NSObject <STPFormEncodable>
@property (nonatomic, copy) NSDictionary * _Nonnull additionalAPIParameters;
+ (NSString * _Nullable)rootObjectName SWIFT_WARN_UNUSED_RESULT;
+ (NSDictionary<NSString *, NSString *> * _Nonnull)propertyNamesToFormFieldNamesMapping SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A Link Payment Method.
SWIFT_CLASS("_TtC6Stripe20STPPaymentMethodLink")
@interface STPPaymentMethodLink : NSObject <STPAPIResponseDecodable>
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An object representing parameters used to create an Link Payment Method
SWIFT_CLASS("_TtC6Stripe26STPPaymentMethodLinkParams")
@interface STPPaymentMethodLinkParams : NSObject <STPFormEncodable>
@property (nonatomic, copy) NSDictionary * _Nonnull additionalAPIParameters;
+ (NSString * _Nullable)rootObjectName SWIFT_WARN_UNUSED_RESULT;
+ (NSDictionary<NSString *, NSString *> * _Nonnull)propertyNamesToFormFieldNamesMapping SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A NetBanking Payment Method.
/// seealso:
/// https://stripe.com/docs/api/payment_methods/object#payment_method_object-netbanking
SWIFT_CLASS("_TtC6Stripe26STPPaymentMethodNetBanking")
@interface STPPaymentMethodNetBanking : NSObject <STPAPIResponseDecodable>
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
/// Customer’s Bank Name
@property (nonatomic, readonly, copy) NSString * _Nonnull bank;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An object representing parameters used to create a NetBanking Payment Method
SWIFT_CLASS("_TtC6Stripe32STPPaymentMethodNetBankingParams")
@interface STPPaymentMethodNetBankingParams : NSObject <STPFormEncodable>
@property (nonatomic, copy) NSDictionary * _Nonnull additionalAPIParameters;
/// Customer’s Bank Name. Required.
@property (nonatomic, copy) NSString * _Nullable bank;
+ (NSString * _Nullable)rootObjectName SWIFT_WARN_UNUSED_RESULT;
+ (NSDictionary<NSString *, NSString *> * _Nonnull)propertyNamesToFormFieldNamesMapping SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// An OXXO Payment Method.
/// seealso:
/// https://stripe.com/docs/payments/oxxo
SWIFT_CLASS("_TtC6Stripe20STPPaymentMethodOXXO")
@interface STPPaymentMethodOXXO : NSObject <STPAPIResponseDecodable>
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
@end


/// An object representing parameters used to create an OXXO Payment Method
SWIFT_CLASS("_TtC6Stripe26STPPaymentMethodOXXOParams")
@interface STPPaymentMethodOXXOParams : NSObject <STPFormEncodable>
@property (nonatomic, copy) NSDictionary * _Nonnull additionalAPIParameters;
+ (NSString * _Nullable)rootObjectName SWIFT_WARN_UNUSED_RESULT;
+ (NSDictionary<NSString *, NSString *> * _Nonnull)propertyNamesToFormFieldNamesMapping SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class STPPaymentMethodiDEALParams;
@class STPPaymentMethodSEPADebitParams;
@class STPPaymentMethodPayPalParams;
@class STPPaymentMethodPrzelewy24Params;
@class STPPaymentMethodSofortParams;
@class STPPaymentMethodUPIParams;

/// An object representing parameters used to create a PaymentMethod object.
/// @note To create a PaymentMethod from an Apple Pay PKPaymentToken, see <code>STPAPIClient createPaymentMethodWithPayment:completion:</code>
/// seealso:
/// https://stripe.com/docs/api/payment_methods/create
SWIFT_CLASS("_TtC6Stripe22STPPaymentMethodParams")
@interface STPPaymentMethodParams : NSObject <STPFormEncodable, STPPaymentOption>
@property (nonatomic, copy) NSDictionary * _Nonnull additionalAPIParameters;
/// The type of payment method.  The associated property will contain additional information (e.g. <code>type == STPPaymentMethodTypeCard</code> means <code>card</code> should also be populated).
@property (nonatomic) enum STPPaymentMethodType type;
/// The raw underlying type string sent to the server.
/// Generally you should use <code>type</code> instead unless you have a reason not to.
/// You can use this if you want to create a param of a type not yet supported
/// by the current version of the SDK’s <code>STPPaymentMethodType</code> enum.
/// Setting this to a value not known by the SDK causes <code>type</code> to
/// return <code>STPPaymentMethodTypeUnknown</code>
@property (nonatomic, copy) NSString * _Nullable rawTypeString;
/// Billing information associated with the PaymentMethod that may be used or required by particular types of payment methods.
@property (nonatomic, strong) STPPaymentMethodBillingDetails * _Nullable billingDetails;
/// If this is a card PaymentMethod, this contains the user’s card details.
@property (nonatomic, strong) STPPaymentMethodCardParams * _Nullable card;
/// If this is an Alipay PaymentMethod, this contains additional details.
@property (nonatomic, strong) STPPaymentMethodAlipayParams * _Nullable alipay;
/// If this is a iDEAL PaymentMethod, this contains details about user’s bank.
@property (nonatomic, strong) STPPaymentMethodiDEALParams * _Nullable iDEAL;
/// If this is a FPX PaymentMethod, this contains details about user’s bank.
@property (nonatomic, strong) STPPaymentMethodFPXParams * _Nullable fpx;
/// If this is a SEPA Debit PaymentMethod, this contains details about the bank to debit.
@property (nonatomic, strong) STPPaymentMethodSEPADebitParams * _Nullable sepaDebit;
/// If this is a Bacs Debit PaymentMethod, this contains details about the bank account to debit.
@property (nonatomic, strong) STPPaymentMethodBacsDebitParams * _Nullable bacsDebit;
/// If this is an AU BECS Debit PaymentMethod, this contains details about the bank to debit.
@property (nonatomic, strong) STPPaymentMethodAUBECSDebitParams * _Nullable auBECSDebit;
/// If this is a giropay PaymentMethod, this contains additional details.
@property (nonatomic, strong) STPPaymentMethodGiropayParams * _Nullable giropay;
/// If this is a PayPal PaymentMethod, this contains additional details. :nodoc:
@property (nonatomic, strong) STPPaymentMethodPayPalParams * _Nullable payPal;
/// If this is a Przelewy24 PaymentMethod, this contains additional details.
@property (nonatomic, strong) STPPaymentMethodPrzelewy24Params * _Nullable przelewy24;
/// If this is an EPS PaymentMethod, this contains additional details.
@property (nonatomic, strong) STPPaymentMethodEPSParams * _Nullable eps;
/// If this is a Bancontact PaymentMethod, this contains additional details.
@property (nonatomic, strong) STPPaymentMethodBancontactParams * _Nullable bancontact;
/// If this is a NetBanking PaymentMethod, this contains additional details.
@property (nonatomic, strong) STPPaymentMethodNetBankingParams * _Nullable netBanking;
/// If this is an OXXO PaymentMethod, this contains additional details.
@property (nonatomic, strong) STPPaymentMethodOXXOParams * _Nullable oxxo;
/// If this is a Sofort PaymentMethod, this contains additional details.
@property (nonatomic, strong) STPPaymentMethodSofortParams * _Nullable sofort;
/// If this is a UPI PaymentMethod, this contains additional details.
@property (nonatomic, strong) STPPaymentMethodUPIParams * _Nullable upi;
/// If this is a GrabPay PaymentMethod, this contains additional details.
@property (nonatomic, strong) STPPaymentMethodGrabPayParams * _Nullable grabPay;
/// If this is a Afterpay PaymentMethod, this contains additional details.
@property (nonatomic, strong) STPPaymentMethodAfterpayClearpayParams * _Nullable afterpayClearpay;
/// If this is a BLIK PaymentMethod, this contains additional details.
@property (nonatomic, strong) STPPaymentMethodBLIKParams * _Nullable blik;
/// If this is an Boleto PaymentMethod, this contains additional details.
@property (nonatomic, strong) STPPaymentMethodBoletoParams * _Nullable boleto;
/// If this is a Link PaymentMethod, this contains additional details
@property (nonatomic, strong) STPPaymentMethodLinkParams * _Nullable link;
/// If this is an Klarna PaymentMethod, this contains additional details.
@property (nonatomic, strong) STPPaymentMethodKlarnaParams * _Nullable klarna;
/// Set of key-value pairs that you can attach to the PaymentMethod. This can be useful for storing additional information about the PaymentMethod in a structured format.
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable metadata;
/// Creates params for a card PaymentMethod.
/// \param card An object containing the user’s card details.
///
/// \param billingDetails An object containing the user’s billing details.
///
/// \param metadata Additional information to attach to the PaymentMethod.
///
- (nonnull instancetype)initWithCard:(STPPaymentMethodCardParams * _Nonnull)card billingDetails:(STPPaymentMethodBillingDetails * _Nullable)billingDetails metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata;
/// Creates params for an iDEAL PaymentMethod.
/// \param iDEAL An object containing the user’s iDEAL bank details.
///
/// \param billingDetails An object containing the user’s billing details.
///
/// \param metadata Additional information to attach to the PaymentMethod.
///
- (nonnull instancetype)initWithIDEAL:(STPPaymentMethodiDEALParams * _Nonnull)iDEAL billingDetails:(STPPaymentMethodBillingDetails * _Nullable)billingDetails metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata;
/// Creates params for an FPX PaymentMethod.
/// \param fpx An object containing the user’s FPX bank details.
///
/// \param billingDetails An object containing the user’s billing details.
///
/// \param metadata Additional information to attach to the PaymentMethod.
///
- (nonnull instancetype)initWithFpx:(STPPaymentMethodFPXParams * _Nonnull)fpx billingDetails:(STPPaymentMethodBillingDetails * _Nullable)billingDetails metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata;
/// Creates params for a SEPA Debit PaymentMethod;
/// \param sepaDebit An object containing the SEPA bank debit details.
///
/// \param billingDetails An object containing the user’s billing details. Note that <code>billingDetails.name</code> is required for SEPA Debit PaymentMethods.
///
/// \param metadata Additional information to attach to the PaymentMethod.
///
- (nonnull instancetype)initWithSepaDebit:(STPPaymentMethodSEPADebitParams * _Nonnull)sepaDebit billingDetails:(STPPaymentMethodBillingDetails * _Nonnull)billingDetails metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata;
/// Creates params for a Bacs Debit PaymentMethod;
/// \param bacsDebit An object containing the Bacs bank debit details.
///
/// \param billingDetails An object containing the user’s billing details. Note that name, email, and address are required for Bacs Debit PaymentMethods.
///
/// \param metadata Additional information to attach to the PaymentMethod.
///
- (nonnull instancetype)initWithBacsDebit:(STPPaymentMethodBacsDebitParams * _Nonnull)bacsDebit billingDetails:(STPPaymentMethodBillingDetails * _Nonnull)billingDetails metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata;
/// Creates params for an AU BECS Debit PaymentMethod;
/// \param auBECSDebit An object containing the AU BECS bank debit details.
///
/// \param billingDetails An object containing the user’s billing details. Note that <code>billingDetails.name</code> and <code>billingDetails.email</code> are required for AU BECS Debit PaymentMethods.
///
/// \param metadata Additional information to attach to the PaymentMethod.
///
- (nonnull instancetype)initWithAubecsDebit:(STPPaymentMethodAUBECSDebitParams * _Nonnull)auBECSDebit billingDetails:(STPPaymentMethodBillingDetails * _Nonnull)billingDetails metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata;
/// Creates params for a giropay PaymentMethod;
/// \param giropay An object containing additional giropay details.
///
/// \param billingDetails An object containing the user’s billing details. Note that <code>billingDetails.name</code> is required for giropay PaymentMethods.
///
/// \param metadata Additional information to attach to the PaymentMethod.
///
- (nonnull instancetype)initWithGiropay:(STPPaymentMethodGiropayParams * _Nonnull)giropay billingDetails:(STPPaymentMethodBillingDetails * _Nonnull)billingDetails metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata;
/// Creates params for an EPS PaymentMethod;
/// \param eps An object containing additional EPS details.
///
/// \param billingDetails An object containing the user’s billing details. Note that <code>billingDetails.name</code> is required for EPS PaymentMethods.
///
/// \param metadata Additional information to attach to the PaymentMethod.
///
- (nonnull instancetype)initWithEps:(STPPaymentMethodEPSParams * _Nonnull)eps billingDetails:(STPPaymentMethodBillingDetails * _Nonnull)billingDetails metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata;
/// Creates params for a Przelewy24 PaymentMethod;
/// \param przelewy24 An object containing additional Przelewy24 details.
///
/// \param billingDetails An object containing the user’s billing details. Note that <code>billingDetails.email</code> is required for Przelewy24 PaymentMethods.
///
/// \param metadata Additional information to attach to the PaymentMethod.
///
- (nonnull instancetype)initWithPrzelewy24:(STPPaymentMethodPrzelewy24Params * _Nonnull)przelewy24 billingDetails:(STPPaymentMethodBillingDetails * _Nonnull)billingDetails metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata;
/// Creates params for a Bancontact PaymentMethod;
/// \param bancontact An object containing additional Bancontact details.
///
/// \param billingDetails An object containing the user’s billing details. Note that <code>billingDetails.name</code> is required for Bancontact PaymentMethods.
///
/// \param metadata Additional information to attach to the PaymentMethod.
///
- (nonnull instancetype)initWithBancontact:(STPPaymentMethodBancontactParams * _Nonnull)bancontact billingDetails:(STPPaymentMethodBillingDetails * _Nonnull)billingDetails metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata;
/// Creates params for a NetBanking PaymentMethod;
/// \param netBanking An object containing additional NetBanking details.
///
/// \param billingDetails An object containing the user’s billing details.
///
/// \param metadata Additional information to attach to the PaymentMethod.
///
- (nonnull instancetype)initWithNetBanking:(STPPaymentMethodNetBankingParams * _Nonnull)netBanking billingDetails:(STPPaymentMethodBillingDetails * _Nonnull)billingDetails metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata;
/// Creates params for a GrabPay PaymentMethod;
/// \param grabPay An object containing additional GrabPay details.
///
/// \param billingDetails An object containing the user’s billing details.
///
/// \param metadata Additional information to attach to the PaymentMethod.
///
- (nonnull instancetype)initWithGrabPay:(STPPaymentMethodGrabPayParams * _Nonnull)grabPay billingDetails:(STPPaymentMethodBillingDetails * _Nullable)billingDetails metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata;
/// Creates params for an OXXO PaymentMethod;
/// \param oxxo An object containing additional OXXO details.
///
/// \param billingDetails An object containing the user’s billing details.
///
/// \param metadata Additional information to attach to the PaymentMethod.
///
- (nonnull instancetype)initWithOxxo:(STPPaymentMethodOXXOParams * _Nonnull)oxxo billingDetails:(STPPaymentMethodBillingDetails * _Nullable)billingDetails metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata;
/// Creates params for a Sofort PaymentMethod;
/// \param sofort An object containing additional Sofort details.
///
/// \param billingDetails An object containing the user’s billing details. Note that <code>billingDetails.name</code> and <code>billingDetails.email</code> are required to save bank details from a Sofort payment.
///
/// \param metadata Additional information to attach to the PaymentMethod.
///
- (nonnull instancetype)initWithSofort:(STPPaymentMethodSofortParams * _Nonnull)sofort billingDetails:(STPPaymentMethodBillingDetails * _Nullable)billingDetails metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata;
/// Creates params for a UPI PaymentMethod;
/// \param upi An object containing additional UPI details.
///
/// \param billingDetails An object containing the user’s billing details.
///
/// \param metadata Additional information to attach to the PaymentMethod.
///
- (nonnull instancetype)initWithUpi:(STPPaymentMethodUPIParams * _Nonnull)upi billingDetails:(STPPaymentMethodBillingDetails * _Nullable)billingDetails metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata;
/// Creates params for an Alipay PaymentMethod.
/// \param alipay An object containing additional Alipay details.
///
/// \param billingDetails An object containing the user’s billing details.
///
/// \param metadata Additional information to attach to the PaymentMethod.
///
- (nonnull instancetype)initWithAlipay:(STPPaymentMethodAlipayParams * _Nonnull)alipay billingDetails:(STPPaymentMethodBillingDetails * _Nullable)billingDetails metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata;
/// Creates params for a PayPal PaymentMethod. :nodoc:
/// \param payPal An object containing additional PayPal details.
///
/// \param billingDetails An object containing the user’s billing details.
///
/// \param metadata Additional information to attach to the PaymentMethod.
///
- (nonnull instancetype)initWithPayPal:(STPPaymentMethodPayPalParams * _Nonnull)payPal billingDetails:(STPPaymentMethodBillingDetails * _Nullable)billingDetails metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata;
/// Creates params for an AfterpayClearpay PaymentMethod. :nodoc:
/// \param afterpayClearpay An object containing additional AfterpayClearpay details.
///
/// \param billingDetails An object containing the user’s billing details.
///
/// \param metadata Additional information to attach to the PaymentMethod.
///
- (nonnull instancetype)initWithAfterpayClearpay:(STPPaymentMethodAfterpayClearpayParams * _Nonnull)afterpayClearpay billingDetails:(STPPaymentMethodBillingDetails * _Nullable)billingDetails metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata;
/// Creates params for a BLIK PaymentMethod.
/// \param blik An object containing additional BLIK details.
///
/// \param billingDetails An object containing the user’s billing details.
///
/// \param metadata Additional information to attach to the PaymentMethod.
///
- (nonnull instancetype)initWithBlik:(STPPaymentMethodBLIKParams * _Nonnull)blik billingDetails:(STPPaymentMethodBillingDetails * _Nullable)billingDetails metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata;
/// Creates params for an Boleto PaymentMethod;
/// \param boleto An object containing additional Boleto details.
///
/// \param billingDetails An object containing the user’s billing details.
///
/// \param metadata Additional information to attach to the PaymentMethod.
///
- (nonnull instancetype)initWithBoleto:(STPPaymentMethodBoletoParams * _Nonnull)boleto billingDetails:(STPPaymentMethodBillingDetails * _Nullable)billingDetails metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata;
/// Creates params for an Klarna PaymentMethod. :nodoc:
/// \param klarna An object containing additional Klarna details.
///
/// \param billingDetails An object containing the user’s billing details.
///
/// \param metadata Additional information to attach to the PaymentMethod.
///
- (nonnull instancetype)initWithKlarna:(STPPaymentMethodKlarnaParams * _Nonnull)klarna billingDetails:(STPPaymentMethodBillingDetails * _Nullable)billingDetails metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata;
/// Creates params from a single-use PaymentMethod. This is useful for recreating a new payment method
/// with similar settings. It will return nil if used with a reusable PaymentMethod.
/// \param paymentMethod An object containing the original single-use PaymentMethod.
///
- (nullable instancetype)initWithSingleUsePaymentMethod:(STPPaymentMethod * _Nonnull)paymentMethod;
+ (NSString * _Nullable)rootObjectName SWIFT_WARN_UNUSED_RESULT;
+ (NSDictionary<NSString *, NSString *> * _Nonnull)propertyNamesToFormFieldNamesMapping SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, strong) UIImage * _Nonnull image;
@property (nonatomic, readonly, strong) UIImage * _Nonnull templateImage;
@property (nonatomic, readonly, copy) NSString * _Nonnull label;
@property (nonatomic, readonly) BOOL isReusable;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end





@interface STPPaymentMethodParams (SWIFT_EXTENSION(Stripe))
/// Creates params for a card PaymentMethod.
/// \param card An object containing the user’s card details.
///
/// \param billingDetails An object containing the user’s billing details.
///
/// \param metadata Additional information to attach to the PaymentMethod.
///
+ (STPPaymentMethodParams * _Nonnull)paramsWithCard:(STPPaymentMethodCardParams * _Nonnull)card billingDetails:(STPPaymentMethodBillingDetails * _Nullable)billingDetails metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata SWIFT_WARN_UNUSED_RESULT;
/// Creates params for an iDEAL PaymentMethod.
/// \param iDEAL An object containing the user’s iDEAL bank details.
///
/// \param billingDetails An object containing the user’s billing details.
///
/// \param metadata Additional information to attach to the PaymentMethod.
///
+ (STPPaymentMethodParams * _Nonnull)paramsWithiDEAL:(STPPaymentMethodiDEALParams * _Nonnull)iDEAL billingDetails:(STPPaymentMethodBillingDetails * _Nullable)billingDetails metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata SWIFT_WARN_UNUSED_RESULT;
/// Creates params for an FPX PaymentMethod.
/// \param fpx An object containing the user’s FPX bank details.
///
/// \param billingDetails An object containing the user’s billing details.
///
/// \param metadata Additional information to attach to the PaymentMethod.
///
+ (STPPaymentMethodParams * _Nonnull)paramsWithFPX:(STPPaymentMethodFPXParams * _Nonnull)fpx billingDetails:(STPPaymentMethodBillingDetails * _Nullable)billingDetails metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata SWIFT_WARN_UNUSED_RESULT;
/// Creates params for a SEPA Debit PaymentMethod;
/// \param sepaDebit An object containing the SEPA bank debit details.
///
/// \param billingDetails An object containing the user’s billing details. Note that <code>billingDetails.name</code> is required for SEPA Debit PaymentMethods.
///
/// \param metadata Additional information to attach to the PaymentMethod.
///
+ (STPPaymentMethodParams * _Nonnull)paramsWithSEPADebit:(STPPaymentMethodSEPADebitParams * _Nonnull)sepaDebit billingDetails:(STPPaymentMethodBillingDetails * _Nonnull)billingDetails metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata SWIFT_WARN_UNUSED_RESULT;
/// Creates params for a Bacs Debit PaymentMethod;
/// \param bacsDebit An object containing the Bacs bank debit details.
///
/// \param billingDetails An object containing the user’s billing details. Note that name, email, and address are required for Bacs Debit PaymentMethods.
///
/// \param metadata Additional information to attach to the PaymentMethod.
///
+ (STPPaymentMethodParams * _Nonnull)paramsWithBacsDebit:(STPPaymentMethodBacsDebitParams * _Nonnull)bacsDebit billingDetails:(STPPaymentMethodBillingDetails * _Nonnull)billingDetails metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata SWIFT_WARN_UNUSED_RESULT;
/// Creates params for an AU BECS Debit PaymentMethod;
/// \param auBECSDebit An object containing the AU BECS bank debit details.
///
/// \param billingDetails An object containing the user’s billing details. Note that <code>billingDetails.name</code> and <code>billingDetails.email</code> are required for AU BECS Debit PaymentMethods.
///
/// \param metadata Additional information to attach to the PaymentMethod.
///
+ (STPPaymentMethodParams * _Nonnull)paramsWithAUBECSDebit:(STPPaymentMethodAUBECSDebitParams * _Nonnull)auBECSDebit billingDetails:(STPPaymentMethodBillingDetails * _Nonnull)billingDetails metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata SWIFT_WARN_UNUSED_RESULT;
/// Creates params for a giropay PaymentMethod;
/// \param giropay An object containing additional giropay details.
///
/// \param billingDetails An object containing the user’s billing details. Note that <code>billingDetails.name</code> is required for giropay PaymentMethods.
///
/// \param metadata Additional information to attach to the PaymentMethod.
///
+ (STPPaymentMethodParams * _Nonnull)paramsWithGiropay:(STPPaymentMethodGiropayParams * _Nonnull)giropay billingDetails:(STPPaymentMethodBillingDetails * _Nonnull)billingDetails metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata SWIFT_WARN_UNUSED_RESULT;
/// Creates params for an EPS PaymentMethod;
/// \param eps An object containing additional EPS details.
///
/// \param billingDetails An object containing the user’s billing details. Note that <code>billingDetails.name</code> is required for EPS PaymentMethods.
///
/// \param metadata Additional information to attach to the PaymentMethod.
///
+ (STPPaymentMethodParams * _Nonnull)paramsWithEPS:(STPPaymentMethodEPSParams * _Nonnull)eps billingDetails:(STPPaymentMethodBillingDetails * _Nonnull)billingDetails metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata SWIFT_WARN_UNUSED_RESULT;
/// Creates params for a Przelewy24 PaymentMethod;
/// \param przelewy24 An object containing additional Przelewy24 details.
///
/// \param billingDetails An object containing the user’s billing details. Note that <code>billingDetails.email</code> is required for Przelewy24 PaymentMethods.
///
/// \param metadata Additional information to attach to the PaymentMethod.
///
+ (STPPaymentMethodParams * _Nonnull)paramsWithPrzelewy24:(STPPaymentMethodPrzelewy24Params * _Nonnull)przelewy24 billingDetails:(STPPaymentMethodBillingDetails * _Nonnull)billingDetails metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata SWIFT_WARN_UNUSED_RESULT;
/// Creates params for a Bancontact PaymentMethod;
/// \param bancontact An object containing additional Bancontact details.
///
/// \param billingDetails An object containing the user’s billing details. Note that <code>billingDetails.name</code> is required for Bancontact PaymentMethods.
///
/// \param metadata Additional information to attach to the PaymentMethod.
///
+ (STPPaymentMethodParams * _Nonnull)paramsWithBancontact:(STPPaymentMethodBancontactParams * _Nonnull)bancontact billingDetails:(STPPaymentMethodBillingDetails * _Nonnull)billingDetails metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata SWIFT_WARN_UNUSED_RESULT;
/// Creates params for a NetBanking PaymentMethod;
/// \param netBanking An object containing additional NetBanking details.
///
/// \param billingDetails An object containing the user’s billing details. Note that <code>billingDetails.name</code> is required for Bancontact PaymentMethods.
///
/// \param metadata Additional information to attach to the PaymentMethod.
///
+ (STPPaymentMethodParams * _Nonnull)paramsWithNetBanking:(STPPaymentMethodNetBankingParams * _Nonnull)netBanking billingDetails:(STPPaymentMethodBillingDetails * _Nonnull)billingDetails metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata SWIFT_WARN_UNUSED_RESULT;
/// Creates params for an OXXO PaymentMethod;
/// \param oxxo An object containing additional OXXO details.
///
/// \param billingDetails An object containing the user’s billing details. Note that <code>billingDetails.name</code> is required for OXXO PaymentMethods.
///
/// \param metadata Additional information to attach to the PaymentMethod.
///
+ (STPPaymentMethodParams * _Nonnull)paramsWithOXXO:(STPPaymentMethodOXXOParams * _Nonnull)oxxo billingDetails:(STPPaymentMethodBillingDetails * _Nonnull)billingDetails metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata SWIFT_WARN_UNUSED_RESULT;
/// Creates params for a GrabPay PaymentMethod;
/// \param grabPay An object containing additional GrabPay details.
///
/// \param billingDetails An object containing the user’s billing details.
///
/// \param metadata Additional information to attach to the PaymentMethod.
///
+ (STPPaymentMethodParams * _Nonnull)paramsWithGrabPay:(STPPaymentMethodGrabPayParams * _Nonnull)grabPay billingDetails:(STPPaymentMethodBillingDetails * _Nullable)billingDetails metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata SWIFT_WARN_UNUSED_RESULT;
/// Creates params for a Sofort PaymentMethod;
/// \param sofort An object containing additional Sofort details.
///
/// \param billingDetails An object containing the user’s billing details. Note that <code>billingDetails.name</code> and <code>billingDetails.email</code> are required to save bank details from a Sofort payment.
///
/// \param metadata Additional information to attach to the PaymentMethod.
///
+ (STPPaymentMethodParams * _Nonnull)paramsWithSofort:(STPPaymentMethodSofortParams * _Nonnull)sofort billingDetails:(STPPaymentMethodBillingDetails * _Nullable)billingDetails metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata SWIFT_WARN_UNUSED_RESULT;
/// Creates params for a UPI PaymentMethod;
/// \param upi An object containing additional UPI details.
///
/// \param billingDetails An object containing the user’s billing details. Note that <code>billingDetails.name</code> and <code>billingDetails.email</code> are required to save bank details from a UPI payment.
///
/// \param metadata Additional information to attach to the PaymentMethod.
///
+ (STPPaymentMethodParams * _Nonnull)paramsWithUPI:(STPPaymentMethodUPIParams * _Nonnull)upi billingDetails:(STPPaymentMethodBillingDetails * _Nullable)billingDetails metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata SWIFT_WARN_UNUSED_RESULT;
/// Creates params for an Alipay PaymentMethod.
/// \param alipay An object containing additional Alipay details.
///
/// \param billingDetails An object containing the user’s billing details.
///
/// \param metadata Additional information to attach to the PaymentMethod.
///
+ (STPPaymentMethodParams * _Nonnull)paramsWithAlipay:(STPPaymentMethodAlipayParams * _Nonnull)alipay billingDetails:(STPPaymentMethodBillingDetails * _Nullable)billingDetails metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata SWIFT_WARN_UNUSED_RESULT;
/// Creates params for a PayPal PaymentMethod.
/// \param payPal An object containing additional PayPal details.
///
/// \param billingDetails An object containing the user’s billing details.
///
/// \param metadata Additional information to attach to the PaymentMethod.
///
+ (STPPaymentMethodParams * _Nonnull)paramsWithPayPal:(STPPaymentMethodPayPalParams * _Nonnull)payPal billingDetails:(STPPaymentMethodBillingDetails * _Nullable)billingDetails metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata SWIFT_WARN_UNUSED_RESULT;
/// Creates params for an AfterpayClearpay PaymentMethod.
/// \param afterpayClearpay An object containing additional AfterpayClearpay details.
///
/// \param billingDetails An object containing the user’s billing details.
///
/// \param metadata Additional information to attach to the PaymentMethod.
///
+ (STPPaymentMethodParams * _Nonnull)paramsWithAfterpayClearpay:(STPPaymentMethodAfterpayClearpayParams * _Nonnull)afterpayClearpay billingDetails:(STPPaymentMethodBillingDetails * _Nullable)billingDetails metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata SWIFT_WARN_UNUSED_RESULT;
/// Creates params for a BLIK PaymentMethod.
/// \param blik An object containing additional BLIK details.
///
/// \param billingDetails An object containing the user’s billing details.
///
/// \param metadata Additional information to attach to the PaymentMethod.
///
+ (STPPaymentMethodParams * _Nonnull)paramsWithBLIK:(STPPaymentMethodBLIKParams * _Nonnull)blik billingDetails:(STPPaymentMethodBillingDetails * _Nullable)billingDetails metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata SWIFT_WARN_UNUSED_RESULT;
/// Creates params for an Klarna PaymentMethod.
/// \param klarna An object containing additional Klarna details.
///
/// \param billingDetails An object containing the user’s billing details.
///
/// \param metadata Additional information to attach to the PaymentMethod.
///
+ (STPPaymentMethodParams * _Nonnull)paramsWithKlarna:(STPPaymentMethodKlarnaParams * _Nonnull)klarna billingDetails:(STPPaymentMethodBillingDetails * _Nullable)billingDetails metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata SWIFT_WARN_UNUSED_RESULT;
@end


/// A PayPal Payment Method. :nodoc:
/// seealso:
/// https://stripe.com/docs/payments/paypal
SWIFT_CLASS("_TtC6Stripe22STPPaymentMethodPayPal")
@interface STPPaymentMethodPayPal : NSObject <STPAPIResponseDecodable>
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An object representing parameters used to create a PayPal Payment Method :nodoc:
SWIFT_CLASS("_TtC6Stripe28STPPaymentMethodPayPalParams")
@interface STPPaymentMethodPayPalParams : NSObject <STPFormEncodable>
@property (nonatomic, copy) NSDictionary * _Nonnull additionalAPIParameters;
+ (NSString * _Nullable)rootObjectName SWIFT_WARN_UNUSED_RESULT;
+ (NSDictionary<NSString *, NSString *> * _Nonnull)propertyNamesToFormFieldNamesMapping SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A Przelewy24 Payment Method.
/// seealso:
/// https://stripe.com/docs/payments/p24
SWIFT_CLASS("_TtC6Stripe26STPPaymentMethodPrzelewy24")
@interface STPPaymentMethodPrzelewy24 : NSObject <STPAPIResponseDecodable>
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An object representing parameters used to create a Przelewy24 Payment Method
SWIFT_CLASS("_TtC6Stripe32STPPaymentMethodPrzelewy24Params")
@interface STPPaymentMethodPrzelewy24Params : NSObject <STPFormEncodable>
@property (nonatomic, copy) NSDictionary * _Nonnull additionalAPIParameters;
+ (NSString * _Nullable)rootObjectName SWIFT_WARN_UNUSED_RESULT;
+ (NSDictionary<NSString *, NSString *> * _Nonnull)propertyNamesToFormFieldNamesMapping SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A SEPA Debit Payment Method.
/// seealso:
/// https://stripe.com/docs/api/payment_methods/object#payment_method_object-sepa_debit
SWIFT_CLASS("_TtC6Stripe25STPPaymentMethodSEPADebit")
@interface STPPaymentMethodSEPADebit : NSObject <STPAPIResponseDecodable>
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
/// The last 4 digits of the account number.
@property (nonatomic, readonly, copy) NSString * _Nullable last4;
/// The account’s bank code.
@property (nonatomic, readonly, copy) NSString * _Nullable bankCode;
/// The account’s branch code
@property (nonatomic, readonly, copy) NSString * _Nullable branchCode;
/// Two-letter ISO code representing the country of the bank account.
@property (nonatomic, readonly, copy) NSString * _Nullable country;
/// The account’s fingerprint.
@property (nonatomic, readonly, copy) NSString * _Nullable fingerprint;
/// The reference of the mandate accepted by your customer. - seealso: https://stripe.com/docs/api/sources/create#create_source-mandate
@property (nonatomic, readonly, copy) NSString * _Nullable mandate;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An object representing parameters used to create a SEPA Debit Payment Method
SWIFT_CLASS("_TtC6Stripe31STPPaymentMethodSEPADebitParams")
@interface STPPaymentMethodSEPADebitParams : NSObject <STPFormEncodable>
@property (nonatomic, copy) NSDictionary * _Nonnull additionalAPIParameters;
/// The IBAN number for the bank account you wish to debit. Required.
@property (nonatomic, copy) NSString * _Nullable iban;
+ (NSString * _Nullable)rootObjectName SWIFT_WARN_UNUSED_RESULT;
+ (NSDictionary<NSString *, NSString *> * _Nonnull)propertyNamesToFormFieldNamesMapping SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A Sofort Payment Method.
/// seealso:
/// https://stripe.com/docs/api/payment_methods/object#payment_method_object-Sofort
SWIFT_CLASS("_TtC6Stripe22STPPaymentMethodSofort")
@interface STPPaymentMethodSofort : NSObject <STPAPIResponseDecodable>
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
/// Two-letter ISO code representing the country the bank account is located in.
@property (nonatomic, readonly, copy) NSString * _Nullable country;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An object representing parameters used to create a Sofort Payment Method
SWIFT_CLASS("_TtC6Stripe28STPPaymentMethodSofortParams")
@interface STPPaymentMethodSofortParams : NSObject <STPFormEncodable>
@property (nonatomic, copy) NSDictionary * _Nonnull additionalAPIParameters;
/// Two-letter ISO code representing the country the bank account is located in. Required.
@property (nonatomic, copy) NSString * _Nullable country;
+ (NSString * _Nullable)rootObjectName SWIFT_WARN_UNUSED_RESULT;
+ (NSDictionary<NSString *, NSString *> * _Nonnull)propertyNamesToFormFieldNamesMapping SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Contains details on how an <code>STPPaymentMethodCard</code> maybe be used for 3D Secure authentication.
SWIFT_CLASS("_TtC6Stripe33STPPaymentMethodThreeDSecureUsage")
@interface STPPaymentMethodThreeDSecureUsage : NSObject <STPAPIResponseDecodable>
/// <code>YES</code> if 3D Secure is supported on this card.
@property (nonatomic, readonly) BOOL supported;
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
@end

/// The type of the PaymentMethod.
typedef SWIFT_ENUM(NSInteger, STPPaymentMethodType, open) {
/// A card payment method.
  STPPaymentMethodTypeCard = 0,
/// An Alipay payment method.
  STPPaymentMethodTypeAlipay = 1,
/// A GrabPay payment method.
  STPPaymentMethodTypeGrabPay = 2,
/// An iDEAL payment method.
  STPPaymentMethodTypeiDEAL SWIFT_COMPILE_NAME("iDEAL") = 3,
/// An FPX payment method.
  STPPaymentMethodTypeFPX = 4,
/// A card present payment method.
  STPPaymentMethodTypeCardPresent = 5,
/// A SEPA Debit payment method.
  STPPaymentMethodTypeSEPADebit SWIFT_COMPILE_NAME("SEPADebit") = 6,
/// An AU BECS Debit payment method.
  STPPaymentMethodTypeAUBECSDebit SWIFT_COMPILE_NAME("AUBECSDebit") = 7,
/// A Bacs Debit payment method.
  STPPaymentMethodTypeBacsDebit = 8,
/// A giropay payment method.
  STPPaymentMethodTypeGiropay = 9,
/// A Przelewy24 Debit payment method.
  STPPaymentMethodTypePrzelewy24 = 10,
/// An EPS payment method.
  STPPaymentMethodTypeEPS SWIFT_COMPILE_NAME("EPS") = 11,
/// A Bancontact payment method.
  STPPaymentMethodTypeBancontact = 12,
/// A NetBanking payment method.
  STPPaymentMethodTypeNetBanking = 13,
/// An OXXO payment method.
  STPPaymentMethodTypeOXXO SWIFT_COMPILE_NAME("OXXO") = 14,
/// A Sofort payment method.
  STPPaymentMethodTypeSofort = 15,
/// A UPI payment method.
  STPPaymentMethodTypeUPI = 16,
/// A PayPal payment method. :nodoc:
  STPPaymentMethodTypePayPal = 17,
/// An AfterpayClearpay payment method
  STPPaymentMethodTypeAfterpayClearpay = 18,
/// A BLIK payment method
  STPPaymentMethodTypeBLIK SWIFT_COMPILE_NAME("blik") = 19,
/// A WeChat Pay payment method
  STPPaymentMethodTypeWeChatPay = 20,
/// A Boleto payment method.
  STPPaymentMethodTypeBoleto = 21,
/// A Link payment method
  STPPaymentMethodTypeLink = 22,
/// A Klarna payment method.
  STPPaymentMethodTypeKlarna = 23,
/// A Link Instant Debit payment method
  STPPaymentMethodTypeLinkInstantDebit = 24,
/// An unknown type.
  STPPaymentMethodTypeUnknown = 25,
};


/// A UPI Payment Method.
/// seealso:
/// https://stripe.com/docs/api/payment_methods/object#payment_method_object-upi
SWIFT_CLASS("_TtC6Stripe19STPPaymentMethodUPI")
@interface STPPaymentMethodUPI : NSObject <STPAPIResponseDecodable>
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
/// Customer’s Virtual Payment Address (VPA).
@property (nonatomic, readonly, copy) NSString * _Nonnull vpa;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An object representing parameters used to create a UPI Payment Method
SWIFT_CLASS("_TtC6Stripe25STPPaymentMethodUPIParams")
@interface STPPaymentMethodUPIParams : NSObject <STPFormEncodable>
@property (nonatomic, copy) NSDictionary * _Nonnull additionalAPIParameters;
/// Customer’s Virtual Payment Address (VPA). Required.
@property (nonatomic, copy) NSString * _Nullable vpa;
+ (NSString * _Nullable)rootObjectName SWIFT_WARN_UNUSED_RESULT;
+ (NSDictionary<NSString *, NSString *> * _Nonnull)propertyNamesToFormFieldNamesMapping SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// An iDEAL Payment Method.
/// seealso:
/// https://stripe.com/docs/api/payment_methods/object#payment_method_object-ideal
SWIFT_CLASS("_TtC6Stripe21STPPaymentMethodiDEAL")
@interface STPPaymentMethodiDEAL : NSObject <STPAPIResponseDecodable>
/// The customer’s bank.
@property (nonatomic, readonly, copy) NSString * _Nullable bankName;
/// The Bank Identifier Code of the customer’s bank.
@property (nonatomic, readonly, copy) NSString * _Nullable bankIdentifierCode;
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
@end


/// An object representing parameters used to create an iDEAL Payment Method
SWIFT_CLASS("_TtC6Stripe27STPPaymentMethodiDEALParams")
@interface STPPaymentMethodiDEALParams : NSObject <STPFormEncodable>
@property (nonatomic, copy) NSDictionary * _Nonnull additionalAPIParameters;
/// The customer’s bank.
@property (nonatomic, copy) NSString * _Nullable bankName;
+ (NSString * _Nullable)rootObjectName SWIFT_WARN_UNUSED_RESULT;
+ (NSDictionary<NSString *, NSString *> * _Nonnull)propertyNamesToFormFieldNamesMapping SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// This view controller presents a list of payment method options to the user,
/// which they can select between. They can also add credit cards to the list.
/// It must be displayed inside a <code>UINavigationController</code>, so you can either
/// create a <code>UINavigationController</code> with an <code>STPPaymentOptionsViewController</code>
/// as the <code>rootViewController</code> and then present the <code>UINavigationController</code>,
/// or push a new <code>STPPaymentOptionsViewController</code> onto an existing
/// <code>UINavigationController</code>’s stack. You can also have <code>STPPaymentContext</code> do this
/// for you automatically, by calling <code>presentPaymentOptionsViewController</code>
/// or <code>pushPaymentOptionsViewController</code> on it.
SWIFT_CLASS("_TtC6Stripe31STPPaymentOptionsViewController")
@interface STPPaymentOptionsViewController : STPCoreViewController <STPAddCardViewControllerDelegate>
/// Creates a new payment methods view controller.
/// \param paymentContext A payment context to power the view controller’s view.
/// The payment context will in turn use its backend API adapter to fetch the
/// information it needs from your application.
///
///
/// returns:
/// an initialized view controller.
- (nonnull instancetype)initWithPaymentContext:(STPPaymentContext * _Nonnull)paymentContext;
/// Initializes a new payment methods view controller without using a
/// payment context.
/// \param configuration The configuration to use to determine what types of
/// payment method to offer your user. - seealso: STPPaymentConfiguration.h
///
/// \param theme The theme to inform the appearance of the UI.
///
/// \param customerContext The customer context the view controller will use to
/// fetch and modify its Stripe customer
///
/// \param delegate A delegate that will be notified when the payment
/// methods view controller’s selection changes.
///
///
/// returns:
/// an initialized view controller.
- (nonnull instancetype)initWithConfiguration:(STPPaymentConfiguration * _Nonnull)configuration theme:(STPTheme * _Nonnull)theme customerContext:(STPCustomerContext * _Nonnull)customerContext delegate:(id <STPPaymentOptionsViewControllerDelegate> _Nonnull)delegate;
/// Note: Instead of providing your own backend API adapter, we recommend using
/// <code>STPCustomerContext</code>, which will manage retrieving and updating a
/// Stripe customer for you. - seealso: STPCustomerContext.h
/// Initializes a new payment methods view controller without using
/// a payment context.
/// \param configuration The configuration to use to determine what types of
/// payment method to offer your user.
///
/// \param theme The theme to inform the appearance of the UI.
///
/// \param apiAdapter The API adapter to use to retrieve a customer’s stored
/// payment methods and save new ones.
///
/// \param delegate A delegate that will be notified when the payment methods
/// view controller’s selection changes.
///
- (nonnull instancetype)initWithConfiguration:(STPPaymentConfiguration * _Nonnull)configuration theme:(STPTheme * _Nonnull)theme apiAdapter:(id <STPBackendAPIAdapter> _Nonnull)apiAdapter delegate:(id <STPPaymentOptionsViewControllerDelegate> _Nonnull)delegate OBJC_DESIGNATED_INITIALIZER;
/// If you’ve already collected some information from your user, you can set it
/// here and it’ll be automatically filled out when possible/appropriate in any UI
/// that the payment context creates.
@property (nonatomic, strong) STPUserInformation * _Nullable prefilledInformation;
/// @note This is no longer recommended as of v18.3.0 - the SDK automatically saves the Stripe ID of the last selected
/// payment method using NSUserDefaults and displays it as the default pre-selected option.  You can override this behavior
/// by setting this property.
/// The Stripe ID of a payment method to display as the default pre-selected option.
/// @note Setting this after the view controller’s view has loaded has no effect.
@property (nonatomic, copy) NSString * _Nullable defaultPaymentMethod;
/// A view that will be placed as the footer of the view controller when it is
/// showing a list of saved payment methods to select from.
/// When the footer view needs to be resized, it will be sent a
/// <code>sizeThatFits:</code> call. The view should respond correctly to this method in order
/// to be sized and positioned properly.
@property (nonatomic, strong) UIView * _Nullable paymentOptionsViewControllerFooterView;
/// A view that will be placed as the footer of the view controller when it is
/// showing the add card view.
/// When the footer view needs to be resized, it will be sent a
/// <code>sizeThatFits:</code> call. The view should respond correctly to this method in order
/// to be sized and positioned properly.
@property (nonatomic, strong) UIView * _Nullable addCardViewControllerFooterView;
/// The STPAPIClient instance to use to make API requests.
/// Defaults to <code>STPAPIClient.shared</code>.
@property (nonatomic, strong) STPAPIClient * _Nonnull apiClient;
/// If you’re pushing <code>STPPaymentOptionsViewController</code> onto an existing
/// <code>UINavigationController</code>‘s stack, you should use this method to dismiss it,
/// since it may have pushed an additional add card view controller onto the
/// navigation controller’s stack.
/// \param completion The callback to run after the view controller is dismissed.
/// You may specify nil for this parameter.
///
- (void)dismissWithCompletion:(void (^ _Nullable)(void))completion;
/// Use one of the initializers declared in this interface.
- (nonnull instancetype)initWithTheme:(STPTheme * _Nullable)theme OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("Use one of the initializers declared in this interface instead.");
/// Use one of the initializers declared in this interface.
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("Use one of the initializers declared in this interface instead.");
/// Use one of the initializers declared in this interface.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("Use one of the initializers declared in this interface instead.");
/// :nodoc:
- (void)viewDidLayoutSubviews;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
- (void)addCardViewControllerDidCancel:(STPAddCardViewController * _Nonnull)addCardViewController;
- (void)addCardViewController:(STPAddCardViewController * _Nonnull)addCardViewController didCreatePaymentMethod:(STPPaymentMethod * _Nonnull)paymentMethod completion:(void (^ _Nonnull)(NSError * _Nullable))completion;
@end




/// When you’re using <code>STPPaymentContext</code> to request your user’s payment details, this is the object that will be returned to your application when they’ve successfully made a payment.
/// See https://stripe.com/docs/mobile/ios/standard#submit-payment-intents.
SWIFT_CLASS("_TtC6Stripe16STPPaymentResult")
@interface STPPaymentResult : NSObject
/// The payment method that the user has selected. This may come from a variety of different payment methods, such as an Apple Pay payment or a stored credit card. - seealso: STPPaymentMethod.h
/// If paymentMethod is nil, paymentMethodParams will be populated instead.
@property (nonatomic, readonly, strong) STPPaymentMethod * _Nullable paymentMethod;
/// The parameters for a payment method that the user has selected. This is
/// populated for non-reusable payment methods, such as FPX and iDEAL. - seealso: STPPaymentMethodParams.h
/// If paymentMethodParams is nil, paymentMethod will be populated instead.
@property (nonatomic, readonly, strong) STPPaymentMethodParams * _Nullable paymentMethodParams;
/// The STPPaymentOption that was used to initialize this STPPaymentResult, either an STPPaymentMethod or an STPPaymentMethodParams.
@property (nonatomic, readonly, weak) id <STPPaymentOption> _Nullable paymentOption;
/// Initializes the payment result with a given payment option. This is invoked by <code>STPPaymentContext</code> internally; you shouldn’t have to call it directly.
- (nonnull instancetype)initWithPaymentOption:(id <STPPaymentOption> _Nullable)paymentOption OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// An enum representing the status of a payment requested from the user.
typedef SWIFT_ENUM(NSInteger, STPPaymentStatus, open) {
/// The payment succeeded.
  STPPaymentStatusSuccess = 0,
/// The payment failed due to an unforeseen error, such as the user’s Internet connection being offline.
  STPPaymentStatusError = 1,
/// The user cancelled the payment (for example, by hitting “cancel” in the Apple Pay dialog).
  STPPaymentStatusUserCancellation = 2,
};

enum STPPinStatus : NSInteger;

/// STPAPIClient extensions to manage PIN on Stripe Issuing cards
SWIFT_CLASS("_TtC6Stripe23STPPinManagementService")
@interface STPPinManagementService : NSObject
/// The STPAPIClient instance to use to make API requests to Stripe.
/// Defaults to <code>STPAPIClient.shared</code>.
@property (nonatomic, strong) STPAPIClient * _Nonnull apiClient;
/// Create a STPPinManagementService, you must provide an implementation of STPIssuingCardEphemeralKeyProvider
- (nonnull instancetype)initWithKeyProvider:(id <STPIssuingCardEphemeralKeyProvider> _Nonnull)keyProvider OBJC_DESIGNATED_INITIALIZER;
/// Retrieves a PIN number for a given card,
/// this call is asynchronous, implement the completion block to receive the updates
- (void)retrievePin:(NSString * _Nonnull)cardId verificationId:(NSString * _Nonnull)verificationId oneTimeCode:(NSString * _Nonnull)oneTimeCode completion:(void (^ _Nonnull)(STPIssuingCardPin * _Nullable, enum STPPinStatus, NSError * _Nullable))completion;
/// Updates a PIN number for a given card,
/// this call is asynchronous, implement the completion block to receive the updates
- (void)updatePin:(NSString * _Nonnull)cardId newPin:(NSString * _Nonnull)newPin verificationId:(NSString * _Nonnull)verificationId oneTimeCode:(NSString * _Nonnull)oneTimeCode completion:(void (^ _Nonnull)(STPIssuingCardPin * _Nullable, enum STPPinStatus, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// An enum representing the success and error states of PIN management
typedef SWIFT_ENUM(NSInteger, STPPinStatus, open) {
/// The verification object was already redeemed
  STPPinStatusSuccess = 0,
/// The verification object was already redeemed
  STPPinStatusErrorVerificationAlreadyRedeemed = 1,
/// The one-time code was incorrect
  STPPinStatusErrorVerificationCodeIncorrect = 2,
/// The verification object was expired
  STPPinStatusErrorVerificationExpired = 3,
/// The verification object has been attempted too many times
  STPPinStatusErrorVerificationTooManyAttempts = 4,
/// An error occured while retrieving the ephemeral key
  STPPinStatusEphemeralKeyError = 5,
/// An unknown error occured
  STPPinStatusUnknownError = 6,
};

@class PKAddPaymentPassViewController;
@class PKAddPaymentPassRequest;

/// This class makes it easier to implement “Push Provisioning”, the process by which an end-user can add a card to their Apple Pay wallet without having to type their number. This process is mediated by an Apple class called <code>PKAddPaymentPassViewController</code>; this class will help you implement that class’ delegate methods. Note that this flow requires a special entitlement from Apple; for more information please see https://stripe.com/docs/issuing/cards/digital-wallets .
SWIFT_CLASS("_TtC6Stripe26STPPushProvisioningContext")
@interface STPPushProvisioningContext : NSObject
/// The STPAPIClient instance to use to make API requests to Stripe.
/// Defaults to <code>STPAPIClient.shared</code>.
@property (nonatomic, strong) STPAPIClient * _Nonnull apiClient;
/// This is a helper method to generate a PKAddPaymentPassRequestConfiguration that will work with
/// Stripe’s Issuing APIs. Pass the returned configuration object to <code>PKAddPaymentPassViewController</code>’s <code>initWithRequestConfiguration:delegate:</code> initializer.
/// \param name Your cardholder’s name. Example: John Appleseed
///
/// \param description A localized description of your card’s name. This will appear in Apple’s UI as “{description} will be available in Wallet”. Example: Platinum Rewards Card
///
/// \param last4 The last 4 of the card to be added to the user’s Apple Pay wallet. Example: 4242
///
/// \param brand The brand of the card. Example: <code>STPCardBrandVisa</code>
///
+ (PKAddPaymentPassRequestConfiguration * _Nonnull)requestConfigurationWithName:(NSString * _Nonnull)name description:(NSString * _Nullable)description last4:(NSString * _Nullable)last4 brand:(enum STPCardBrand)brand SWIFT_WARN_UNUSED_RESULT;
/// In order to retreive the encrypted payload that PKAddPaymentPassViewController expects, the Stripe SDK must talk to the Stripe API. As this requires privileged access, you must write a “key provider” that generates an Ephemeral Key on your backend and provides it to the SDK when requested. For more information, see https://stripe.com/docs/mobile/ios/basic#ephemeral-key
- (nonnull instancetype)initWithKeyProvider:(id <STPIssuingCardEphemeralKeyProvider> _Nonnull)keyProvider OBJC_DESIGNATED_INITIALIZER;
/// This method lines up with the method of the same name on <code>PKAddPaymentPassViewControllerDelegate</code>. You should implement that protocol in your own app, and when that method is called, call this method on your <code>STPPushProvisioningContext</code>. This in turn will first initiate a call to your <code>keyProvider</code> (see above) to obtain an Ephemeral Key, then make a call to the Stripe Issuing API to fetch an encrypted payload for the card in question, then return that payload to iOS.
- (void)addPaymentPassViewController:(PKAddPaymentPassViewController * _Nonnull)controller generateRequestWithCertificateChain:(NSArray<NSData *> * _Nonnull)certificates nonce:(NSData * _Nonnull)nonce nonceSignature:(NSData * _Nonnull)nonceSignature completionHandler:(void (^ _Nonnull)(PKAddPaymentPassRequest * _Nonnull))handler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A helper class for turning the raw certificate array, nonce, and nonce signature emitted by PKAddPaymentPassViewController into a format that is understandable by the Stripe API.
/// If you are using STPPushProvisioningContext to implement your integration, you do not need to use this class.
SWIFT_CLASS("_TtC6Stripe32STPPushProvisioningDetailsParams")
@interface STPPushProvisioningDetailsParams : NSObject
/// The Stripe ID of the Issuing card object to retrieve details for.
@property (nonatomic, readonly, copy) NSString * _Nonnull cardId;
/// An array of certificates that should be used to encrypt the card details.
@property (nonatomic, readonly, copy) NSArray<NSData *> * _Nonnull certificates;
/// A nonce that should be used during the encryption of the card details.
@property (nonatomic, readonly, copy) NSData * _Nonnull nonce;
/// A nonce signature that should be used during the encryption of the card details.
@property (nonatomic, readonly, copy) NSData * _Nonnull nonceSignature;
/// Implemented for convenience - the Stripe API expects the certificate chain as an array of base64-encoded strings.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull certificatesBase64;
/// Implemented for convenience - the Stripe API expects the nonce as a hex-encoded string.
@property (nonatomic, readonly, copy) NSString * _Nonnull nonceHex;
/// Implemented for convenience - the Stripe API expects the nonce signature as a hex-encoded string.
@property (nonatomic, readonly, copy) NSString * _Nonnull nonceSignatureHex;
/// Instantiates a new params object with the provided attributes.
- (nonnull instancetype)initWithCardId:(NSString * _Nonnull)cardId certificates:(NSArray<NSData *> * _Nonnull)certificates nonce:(NSData * _Nonnull)nonce nonceSignature:(NSData * _Nonnull)nonceSignature OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A <a href="https://stripe.com/docs/radar/radar-session">Radar Session</a>.
/// note:
/// This API and the guide linked above require special permissions to use. Contact support@stripe.com if you’re interested.
SWIFT_CLASS("_TtC6Stripe15STPRadarSession")
@interface STPRadarSession : NSObject <STPAPIResponseDecodable>
/// The Stripe identifier of the RadarSession
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
+ (STPRadarSession * _Nullable)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum STPRedirectContextState : NSInteger;
@class UIPresentationController;

/// This is a helper class for handling redirects associated with STPSource and
/// STPPaymentIntents.
/// Init and retain an instance with the Source or PaymentIntent you want to handle,
/// then choose a redirect method. The context will fire the completion handler
/// when the redirect completes.
/// Due to the nature of iOS, very little concrete information can be gained
/// during this process, as all actions take place in either the Safari app
/// or the sandboxed SFSafariViewController class. The context attempts to
/// detect when the user has completed the necessary redirect action by listening
/// for both app foregrounds and url callbacks received in the app delegate.
/// However, it is possible the when the redirect is “completed”, the user may
/// have not actually completed the necessary actions to authorize the charge.
/// You should not use either this class, nor <code>STPAPIClient</code>, as a way
/// to determine when you should charge the Source or to determine if the redirect
/// was successful. Use Stripe webhooks on your backend server to listen for Source
/// state changes and to make the charge.
/// @note You must retain this instance for the duration of the redirect flow.
/// This class dismisses any presented view controller upon deallocation.
/// See https://stripe.com/docs/sources/best-practices
SWIFT_CLASS("_TtC6Stripe18STPRedirectContext") SWIFT_AVAILABILITY(maccatalyst_app_extension,unavailable) SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface STPRedirectContext : NSObject <SFSafariViewControllerDelegate, UIViewControllerTransitioningDelegate>
/// The domain for NSErrors specific to <code>STPRedirectContext</code>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull STPRedirectContextErrorDomain;)
+ (NSString * _Nonnull)STPRedirectContextErrorDomain SWIFT_WARN_UNUSED_RESULT;
/// The current state of the context.
@property (nonatomic, readonly) enum STPRedirectContextState state;
/// Initializer for context from an <code>STPSource</code>.
/// @note You must ensure that the returnURL set up in the created source
/// correctly goes to your app so that users can be returned once
/// they complete the redirect in the web broswer.
/// \param source The source that needs user redirect action to be taken.
///
/// \param completion A block to fire when the action is believed to have
/// been completed.
///
///
/// returns:
/// nil if the specified source is not a redirect-flow source. Otherwise
/// a new context object.
/// @note Execution of the completion block does not necessarily mean the user
/// successfully performed the redirect action. You should listen for source status
/// change webhooks on your backend to determine the result of a redirect.
- (nullable instancetype)initWithSource:(STPSource * _Nonnull)source completion:(void (^ _Nonnull)(NSString * _Nonnull, NSString * _Nullable, NSError * _Nullable))completion;
/// Initializer for context from an <code>STPPaymentIntent</code>.
/// This should be used when the <code>status</code> is <code>STPPaymentIntentStatusRequiresAction</code>.
/// If the next action involves a redirect, this init method will return a non-nil object.
/// \param paymentIntent The STPPaymentIntent that needs a redirect.
///
/// \param completion A block to fire when the action is believed to have
/// been completed.
///
///
/// returns:
/// nil if the provided PaymentIntent does not need a redirect. Otherwise
/// a new context object.
/// @note Execution of the completion block does not necessarily mean the user
/// successfully performed the redirect action.
- (nullable instancetype)initWithPaymentIntent:(STPPaymentIntent * _Nonnull)paymentIntent completion:(void (^ _Nonnull)(NSString * _Nonnull, NSError * _Nullable))completion;
/// Starts a redirect flow.
/// You must ensure that your app delegate listens for  the <code>returnURL</code> that you
/// set on the Stripe object, and forwards it to the Stripe SDK so that the
/// context can be notified when the redirect is completed and dismiss the
/// view controller. See <code>StripeAPI.handleURLCallback(with url:)</code>
/// The context will listen for both received URLs and app open notifications
/// and fire its completion block when either the URL is received, or the next
/// time the app is foregrounded.
/// The context will initiate the flow by presenting a SFSafariViewController
/// instance from the passsed in view controller. If you want more manual control
/// over the redirect method, you can use <code>startSafariViewControllerRedirectFlowFromViewController</code>
/// or <code>startSafariAppRedirectFlow</code>
/// If the redirect supports a native app, and that app is is installed on the user’s
/// device, this call will do a direct app-to-app redirect instead of showing
/// a web url.
/// @note This method does nothing if the context is not in the
/// <code>STPRedirectContextStateNotStarted</code> state.
/// \param presentingViewController The view controller to present the Safari
/// view controller from.
///
- (void)startRedirectFlowFromViewController:(UIViewController * _Nonnull)presentingViewController;
/// Starts a redirect flow by presenting an SFSafariViewController in your app
/// from the passed in view controller.
/// You must ensure that your app delegate listens for  the <code>returnURL</code> that you
/// set on the Stripe object, and forwards it to the Stripe SDK so that the
/// context can be notified when the redirect is completed and dismiss the
/// view controller. See <code>StripeAPI.handleStripeURLCallback(with url:)]</code>
/// The context will listen for both received URLs and app open notifications
/// and fire its completion block when either the URL is received, or the next
/// time the app is foregrounded.
/// @note This method does nothing if the context is not in the
/// <code>STPRedirectContextStateNotStarted</code> state.
/// \param presentingViewController The view controller to present the Safari
/// view controller from.
///
- (void)startSafariViewControllerRedirectFlowFromViewController:(UIViewController * _Nonnull)presentingViewController;
/// Starts a redirect flow by calling <code>openURL</code> to bounce the user out to
/// the Safari app.
/// The context will listen for app open notifications and fire its completion
/// block the next time the user re-opens the app (either manually or via url)
/// @note This method does nothing if the context is not in the
/// <code>STPRedirectContextStateNotStarted</code> state.
- (void)startSafariAppRedirectFlow;
/// Dismisses any presented views and stops listening for any
/// app opens or callbacks. The completion block will not be fired.
- (void)cancel;
/// :nodoc:
- (void)safariViewControllerDidFinish:(SFSafariViewController * _Nonnull)controller;
/// :nodoc:
- (void)safariViewController:(SFSafariViewController * _Nonnull)controller didCompleteInitialLoad:(BOOL)didLoadSuccessfully;
/// :nodoc:
- (void)safariViewController:(SFSafariViewController * _Nonnull)controller initialLoadDidRedirectToURL:(NSURL * _Nonnull)URL;
/// :nodoc:
- (UIPresentationController * _Nullable)presentationControllerForPresentedViewController:(UIViewController * _Nonnull)presented presentingViewController:(UIViewController * _Nullable)presenting sourceViewController:(UIViewController * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_AVAILABILITY(maccatalyst_app_extension,unavailable) SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface STPRedirectContext (SWIFT_EXTENSION(Stripe)) <STPURLCallbackListener>
/// :nodoc:
- (BOOL)handleURLCallback:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
@end

/// Error codes specific to <code>STPRedirectContext</code>
typedef SWIFT_ENUM(NSInteger, STPRedirectContextError, open) {
/// <code>STPRedirectContext</code> failed to redirect to the app to complete the payment.
/// This could be because the app is not installed on the user’s device.
  STPRedirectContextAppRedirectError SWIFT_COMPILE_NAME("appRedirectError") = 0,
};

/// Possible states for the redirect context to be in
typedef SWIFT_ENUM(NSInteger, STPRedirectContextState, open) {
/// Initialized, but redirect not started.
  STPRedirectContextStateNotStarted = 0,
/// Redirect is in progress.
  STPRedirectContextStateInProgress = 1,
/// Redirect has been cancelled programmatically before completing.
  STPRedirectContextStateCancelled = 2,
/// Redirect has completed.
  STPRedirectContextStateCompleted = 3,
};

enum STPSetupIntentStatus : NSInteger;
enum STPSetupIntentUsage : NSInteger;
@class STPSetupIntentLastSetupError;

/// A SetupIntent guides you through the process of setting up a customer’s payment credentials for future payments.
/// seealso:
/// https://stripe.com/docs/api/setup_intents
SWIFT_CLASS("_TtC6Stripe14STPSetupIntent")
@interface STPSetupIntent : NSObject <STPAPIResponseDecodable>
/// The Stripe ID of the SetupIntent.
@property (nonatomic, readonly, copy) NSString * _Nonnull stripeID;
/// The client secret of this SetupIntent. Used for client-side retrieval using a publishable key.
@property (nonatomic, readonly, copy) NSString * _Nonnull clientSecret;
/// Time at which the object was created.
@property (nonatomic, readonly, copy) NSDate * _Nonnull created;
/// ID of the Customer this SetupIntent belongs to, if one exists.
@property (nonatomic, readonly, copy) NSString * _Nullable customerID;
/// An arbitrary string attached to the object. Often useful for displaying to users.
@property (nonatomic, readonly, copy) NSString * _Nullable stripeDescription;
/// Has the value <code>YES</code> if the object exists in live mode or the value <code>NO</code> if the object exists in test mode.
@property (nonatomic, readonly) BOOL livemode;
/// If present, this property tells you what actions you need to take in order for your customer to set up this payment method.
@property (nonatomic, readonly, strong) STPIntentAction * _Nullable nextAction;
/// ID of the payment method used with this SetupIntent.
@property (nonatomic, readonly, copy) NSString * _Nullable paymentMethodID;
/// The list of payment method types (e.g. <code>[STPPaymentMethodType.card]</code>) that this SetupIntent is allowed to set up.
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull paymentMethodTypes;
/// Status of this SetupIntent.
@property (nonatomic, readonly) enum STPSetupIntentStatus status;
/// Indicates how the payment method is intended to be used in the future.
@property (nonatomic, readonly) enum STPSetupIntentUsage usage;
/// The setup error encountered in the previous SetupIntent confirmation.
@property (nonatomic, readonly, strong) STPSetupIntentLastSetupError * _Nullable lastSetupError;
/// Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
/// @deprecated Metadata is not  returned to clients using publishable keys. Retrieve them on your server using yoursecret key instead.
/// seealso:
/// https://stripe.com/docs/api#metadata
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable metadata SWIFT_DEPRECATED_MSG("Metadata is not returned to clients using publishable keys. Retrieve them on your server using your secret key instead.");
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An object representing parameters to confirm a SetupIntent object.
/// For example, you would confirm a SetupIntent when a customer hits the “Save” button on a payment method management view in your app.
/// If the selected payment method does not require any additional steps from the customer, the SetupIntent’s status will transition to <code>STPSetupIntentStatusSucceeded</code>.  Otherwise, it will transition to <code>STPSetupIntentStatusRequiresAction</code>, and suggest additional actions via <code>nextAction</code>.
/// Instead of passing this to <code>STPAPIClient.confirmSetupIntent(...)</code> directly, we recommend using <code>STPPaymentHandler</code> to handle any additional steps for you.
/// seealso:
/// https://stripe.com/docs/api/setup_intents/confirm
SWIFT_CLASS("_TtC6Stripe27STPSetupIntentConfirmParams")
@interface STPSetupIntentConfirmParams : NSObject <NSCopying, STPFormEncodable>
@property (nonatomic, copy) NSDictionary * _Nonnull additionalAPIParameters;
/// Initialize this <code>STPSetupIntentConfirmParams</code> with a <code>clientSecret</code>.
/// \param clientSecret the client secret for this SetupIntent
///
- (nonnull instancetype)initWithClientSecret:(NSString * _Nonnull)clientSecret OBJC_DESIGNATED_INITIALIZER;
/// The client secret of the SetupIntent. Required.
@property (nonatomic, copy) NSString * _Nonnull clientSecret;
/// Provide a supported <code>STPPaymentMethodParams</code> object, and Stripe will create a
/// PaymentMethod during PaymentIntent confirmation.
/// @note alternative to <code>paymentMethodId</code>
@property (nonatomic, strong) STPPaymentMethodParams * _Nullable paymentMethodParams;
/// Provide an already created PaymentMethod’s id, and it will be used to confirm the SetupIntent.
/// @note alternative to <code>paymentMethodParams</code>
@property (nonatomic, copy) NSString * _Nullable paymentMethodID;
/// The URL to redirect your customer back to after they authenticate or cancel
/// their payment on the payment method’s app or site.
/// This should probably be a URL that opens your iOS app.
@property (nonatomic, copy) NSString * _Nullable returnURL;
/// A boolean number to indicate whether you intend to use the Stripe SDK’s functionality to handle any SetupIntent next actions.
/// If set to false, STPSetupIntent.nextAction will only ever contain a redirect url that can be opened in a webview or mobile browser.
/// When set to true, the nextAction may contain information that the Stripe SDK can use to perform native authentication within your
/// app.
@property (nonatomic, strong) NSNumber * _Nullable useStripeSDK;
/// Details about the Mandate to create.
/// @note If this value is null and the <code>(self.paymentMethod.type == STPPaymentMethodTypeSEPADebit | | self.paymentMethodParams.type == STPPaymentMethodTypeAUBECSDebit || self.paymentMethodParams.type == STPPaymentMethodTypeBacsDebit) && self.mandate == nil</code>, the SDK will set this to an internal value indicating that the mandate data should be inferred from the current context.
@property (nonatomic, strong) STPMandateDataParams * _Nullable mandateData;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// :nodoc:
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)rootObjectName SWIFT_WARN_UNUSED_RESULT;
+ (NSDictionary<NSString *, NSString *> * _Nonnull)propertyNamesToFormFieldNamesMapping SWIFT_WARN_UNUSED_RESULT;
@end

enum STPSetupIntentLastSetupErrorType : NSUInteger;

/// A value for <code>code</code> indicating the provided payment method failed authentication./// The error encountered in the previous SetupIntent confirmation.
/// seealso:
/// https://stripe.com/docs/api/setup_intents/object#setup_intent_object-last_setup_error
SWIFT_CLASS("_TtC6Stripe28STPSetupIntentLastSetupError")
@interface STPSetupIntentLastSetupError : NSObject <STPAPIResponseDecodable>
/// For some errors that could be handled programmatically, a short string indicating the error code reported.
/// seealso:
/// https://stripe.com/docs/error-codes
@property (nonatomic, readonly, copy) NSString * _Nullable code;
/// For card (<code>STPSetupIntentLastSetupErrorTypeCard</code>) errors resulting from a card issuer decline,
/// a short string indicating the card issuer’s reason for the decline if they provide one.
/// seealso:
/// https://stripe.com/docs/declines#issuer-declines
@property (nonatomic, readonly, copy) NSString * _Nullable declineCode;
/// A URL to more information about the error code reported.
/// seealso:
/// https://stripe.com/docs/error-codes
@property (nonatomic, readonly, copy) NSString * _Nullable docURL;
/// A human-readable message providing more details about the error.
/// For card (<code>STPSetupIntentLastSetupErrorTypeCard</code>) errors, these messages can be shown to your users.
@property (nonatomic, readonly, copy) NSString * _Nullable message;
/// If the error is parameter-specific, the parameter related to the error.
/// For example, you can use this to display a message near the correct form field.
@property (nonatomic, readonly, copy) NSString * _Nullable param;
/// The PaymentMethod object for errors returned on a request involving a PaymentMethod.
@property (nonatomic, readonly, strong) STPPaymentMethod * _Nullable paymentMethod;
/// The type of error.
@property (nonatomic, readonly) enum STPSetupIntentLastSetupErrorType type;
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
@end


@interface STPSetupIntentLastSetupError (SWIFT_EXTENSION(Stripe))
/// A possible value for the <code>error</code> property.  The provided payment method has failed authentication. Provide a new payment method to attempt to fulfill this SetupIntent again.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CodeAuthenticationFailure;)
+ (NSString * _Nonnull)CodeAuthenticationFailure SWIFT_WARN_UNUSED_RESULT;
@end

/// The type of the error represented by <code>STPSetupIntentLastSetupError</code>.
/// Some STPSetupIntentLastError properties are only populated for certain error types.
typedef SWIFT_ENUM(NSUInteger, STPSetupIntentLastSetupErrorType, open) {
/// An unknown error type.
  STPSetupIntentLastSetupErrorTypeUnknown = 0,
/// An error connecting to Stripe’s API.
  STPSetupIntentLastSetupErrorTypeAPIConnection SWIFT_COMPILE_NAME("apiConnection") = 1,
/// An error with the Stripe API.
  STPSetupIntentLastSetupErrorTypeAPI = 2,
/// A failure to authenticate your customer.
  STPSetupIntentLastSetupErrorTypeAuthentication = 3,
/// Card errors are the most common type of error you should expect to handle.
/// They result when the user enters a card that can’t be charged for some reason.
/// Check the <code>declineCode</code> property for the decline code.  The <code>message</code> property contains a message you can show to your users.
  STPSetupIntentLastSetupErrorTypeCard = 4,
/// Keys for idempotent requests can only be used with the same parameters they were first used with.
  STPSetupIntentLastSetupErrorTypeIdempotency = 5,
/// Invalid request errors.  Typically, this is because your request has invalid parameters.
  STPSetupIntentLastSetupErrorTypeInvalidRequest = 6,
/// Too many requests hit the API too quickly.
  STPSetupIntentLastSetupErrorTypeRateLimit = 7,
};

/// Status types for an STPSetupIntent
typedef SWIFT_ENUM(NSInteger, STPSetupIntentStatus, open) {
/// Unknown status
  STPSetupIntentStatusUnknown = 0,
/// This SetupIntent requires a PaymentMethod
  STPSetupIntentStatusRequiresPaymentMethod = 1,
/// This SetupIntent needs to be confirmed
  STPSetupIntentStatusRequiresConfirmation = 2,
/// The selected PaymentMethod requires additional authentication steps.
/// Additional actions found via the <code>nextAction</code> property of <code>STPSetupIntent</code>
  STPSetupIntentStatusRequiresAction = 3,
/// Stripe is processing this SetupIntent
  STPSetupIntentStatusProcessing = 4,
/// The SetupIntent has succeeded
  STPSetupIntentStatusSucceeded = 5,
/// This SetupIntent was canceled and cannot be changed.
  STPSetupIntentStatusCanceled = 6,
};

/// Indicates how the payment method is intended to be used in the future.
/// seealso:
/// https://stripe.com/docs/api/setup_intents/create#create_setup_intent-usage
typedef SWIFT_ENUM(NSInteger, STPSetupIntentUsage, open) {
/// Unknown value.  Update your SDK, or use <code>allResponseFields</code> for custom handling.
  STPSetupIntentUsageUnknown = 0,
/// No value was provided.
  STPSetupIntentUsageNone = 1,
/// Indicates you intend to only reuse the payment method when the customer is in your checkout flow.
  STPSetupIntentUsageOnSession = 2,
/// Indicates you intend to reuse the payment method when the customer may or may not be in your checkout flow.
  STPSetupIntentUsageOffSession = 3,
};


/// This view controller contains a shipping address collection form. It renders a right bar button item that submits the form, so it must be shown inside a <code>UINavigationController</code>. Depending on your configuration’s shippingType, the view controller may present a shipping method selection form after the user enters an address.
SWIFT_CLASS("_TtC6Stripe32STPShippingAddressViewController")
@interface STPShippingAddressViewController : STPCoreTableViewController
/// A convenience initializer; equivalent to calling <code>init(configuration: STPPaymentConfiguration.shared theme: STPTheme.defaultTheme currency:"" shippingAddress:nil selectedShippingMethod:nil prefilledInformation:nil)</code>.
- (nonnull instancetype)init;
/// Initializes a new <code>STPShippingAddressViewController</code> with the given payment context and sets the payment context as its delegate.
/// \param paymentContext The payment context to use.
///
- (nonnull instancetype)initWithPaymentContext:(STPPaymentContext * _Nonnull)paymentContext;
/// Initializes a new <code>STPShippingAddressCardViewController</code> with the provided parameters.
/// \param configuration The configuration to use (this determines the required shipping address fields and shipping type). - seealso: STPPaymentConfiguration
///
/// \param theme The theme to use to inform the view controller’s visual appearance. - seealso: STPTheme
///
/// \param currency The currency to use when displaying amounts for shipping methods. The default is USD.
///
/// \param shippingAddress If set, the shipping address view controller will be pre-filled with this address. - seealso: STPAddress
///
/// \param selectedShippingMethod If set, the shipping methods view controller will use this method as the selected shipping method. If <code>selectedShippingMethod</code> is nil, the first shipping method in the array of methods returned by your delegate will be selected.
///
/// \param prefilledInformation If set, the shipping address view controller will be pre-filled with this information. - seealso: STPUserInformation
///
- (nonnull instancetype)initWithConfiguration:(STPPaymentConfiguration * _Nonnull)configuration theme:(STPTheme * _Nonnull)theme currency:(NSString * _Nullable)currency shippingAddress:(STPAddress * _Nullable)shippingAddress selectedShippingMethod:(PKShippingMethod * _Nullable)selectedShippingMethod prefilledInformation:(STPUserInformation * _Nullable)prefilledInformation OBJC_DESIGNATED_INITIALIZER;
/// The view controller’s delegate. This must be set before showing the view controller in order for it to work properly. - seealso: STPShippingAddressViewControllerDelegate
@property (nonatomic, weak) id <STPShippingAddressViewControllerDelegate> _Nullable delegate;
/// If you’re pushing <code>STPShippingAddressViewController</code> onto an existing <code>UINavigationController</code>‘s stack, you should use this method to dismiss it, since it may have pushed an additional shipping method view controller onto the navigation controller’s stack.
/// \param completion The callback to run after the view controller is dismissed. You may specify nil for this parameter.
///
- (void)dismissWithCompletion:(void (^ _Nullable)(void))completion;
/// Use one of the initializers declared in this interface.
- (nonnull instancetype)initWithTheme:(STPTheme * _Nullable)theme OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("Use one of the initializers declared in this interface instead.");
/// Use one of the initializers declared in this interface.
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("Use one of the initializers declared in this interface instead.");
/// Use one of the initializers declared in this interface.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
@end



@interface STPShippingAddressViewController (SWIFT_EXTENSION(Stripe)) <UITableViewDataSource, UITableViewDelegate>
/// :nodoc:
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (void)tableView:(UITableView * _Nonnull)tableView willDisplayCell:(UITableViewCell * _Nonnull)cell forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
/// :nodoc:
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForFooterInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (UIView * _Nullable)tableView:(UITableView * _Nonnull)tableView viewForFooterInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (UIView * _Nullable)tableView:(UITableView * _Nonnull)tableView viewForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
@end


/// An enum representing the status of a shipping address validation.
typedef SWIFT_ENUM(NSInteger, STPShippingStatus, open) {
/// The shipping address is valid.
  STPShippingStatusValid = 0,
/// The shipping address is invalid.
  STPShippingStatusInvalid = 1,
};

/// These values control the labels used in the shipping info collection form.
typedef SWIFT_ENUM(NSInteger, STPShippingType, open) {
/// Shipping the purchase to the provided address using a third-party
/// shipping company.
  STPShippingTypeShipping = 0,
/// Delivering the purchase by the seller.
  STPShippingTypeDelivery = 1,
};

enum STPSourceFlow : NSInteger;
@class STPSourceOwner;
@class STPSourceReceiver;
@class STPSourceRedirect;
enum STPSourceStatus : NSInteger;
enum STPSourceType : NSInteger;
enum STPSourceUsage : NSInteger;
@class STPSourceVerification;
@class STPSourceCardDetails;
@class STPSourceKlarnaDetails;
@class STPSourceSEPADebitDetails;
@class STPSourceWeChatPayDetails;

/// Representation of a customer’s payment instrument created with the Stripe API. - seealso: https://stripe.com/docs/api#sources
SWIFT_CLASS("_TtC6Stripe9STPSource")
@interface STPSource : NSObject <STPAPIResponseDecodable, STPPaymentOption, STPSourceProtocol>
/// You cannot directly instantiate an <code>STPSource</code>. You should only use one that
/// has been returned from an <code>STPAPIClient</code> callback.
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// The amount associated with the source.
@property (nonatomic, readonly, strong) NSNumber * _Nullable amount;
/// The client secret of the source. Used for client-side fetching of a source
/// using a publishable key.
@property (nonatomic, readonly, copy) NSString * _Nullable clientSecret;
/// When the source was created.
@property (nonatomic, readonly, copy) NSDate * _Nullable created;
/// The currency associated with the source.
@property (nonatomic, readonly, copy) NSString * _Nullable currency;
/// The authentication flow of the source.
@property (nonatomic, readonly) enum STPSourceFlow flow;
/// Whether or not this source was created in livemode.
@property (nonatomic, readonly) BOOL livemode;
/// Information about the owner of the payment instrument.
@property (nonatomic, readonly, strong) STPSourceOwner * _Nullable owner;
/// Information related to the receiver flow. Present if the source’s flow
/// is receiver.
@property (nonatomic, readonly, strong) STPSourceReceiver * _Nullable receiver;
/// Information related to the redirect flow. Present if the source’s flow
/// is redirect.
@property (nonatomic, readonly, strong) STPSourceRedirect * _Nullable redirect;
/// The status of the source.
@property (nonatomic, readonly) enum STPSourceStatus status;
/// The type of the source.
@property (nonatomic, readonly) enum STPSourceType type;
/// Whether this source should be reusable or not.
@property (nonatomic, readonly) enum STPSourceUsage usage;
/// Information related to the verification flow. Present if the source’s flow
/// is verification.
@property (nonatomic, readonly, strong) STPSourceVerification * _Nullable verification;
/// Information about the source specific to its type
@property (nonatomic, readonly, copy) NSDictionary * _Nullable details;
/// If this is a card source, this property provides typed access to the
/// contents of the <code>details</code> dictionary.
@property (nonatomic, readonly, strong) STPSourceCardDetails * _Nullable cardDetails;
/// If this is a Klarna source, this property provides typed access to the
/// contents of the <code>details</code> dictionary.
@property (nonatomic, readonly, strong) STPSourceKlarnaDetails * _Nullable klarnaDetails;
/// If this is a SEPA Debit source, this property provides typed access to the
/// contents of the <code>details</code> dictionary.
@property (nonatomic, readonly, strong) STPSourceSEPADebitDetails * _Nullable sepaDebitDetails;
/// If this is a WeChat Pay source, this property provides typed access to the
/// contents of the <code>details</code> dictionary.
@property (nonatomic, readonly, strong) STPSourceWeChatPayDetails * _Nullable weChatPayDetails;
/// A set of key/value pairs associated with the source object.
/// @deprecated Metadata is no longer returned to clients using publishable keys. Retrieve them on your server using yoursecret key instead.
/// seealso:
/// https://stripe.com/docs/api#metadata
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable metadata SWIFT_DEPRECATED_MSG("Metadata is no longer returned to clients using publishable keys. Retrieve them on your server using yoursecret key instead.");
@property (nonatomic, copy) NSString * _Nonnull stripeID;
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
@property (nonatomic, readonly) NSUInteger hash;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, strong) UIImage * _Nonnull image;
@property (nonatomic, readonly, strong) UIImage * _Nonnull templateImage;
@property (nonatomic, readonly, copy) NSString * _Nonnull label;
@property (nonatomic, readonly) BOOL isReusable;
@end

/// The status of this card’s 3D Secure support.
/// seealso:
/// https://stripe.com/docs/sources/three-d-secure#check-requirement
typedef SWIFT_ENUM(NSInteger, STPSourceCard3DSecureStatus, open) {
/// 3D Secure is required. This card must be converted into a 3D Secure
/// source for a charge on it to be successful.
  STPSourceCard3DSecureStatusRequired = 0,
/// 3D Secure is optional. It is not required nor recommended for successful charging,
/// but can be performed to help reduce the likelihood of fraud.
  STPSourceCard3DSecureStatusOptional = 1,
/// 3D Secure is not supported on this card.
  STPSourceCard3DSecureStatusNotSupported = 2,
/// 3D Secure is recommended. The process is not required, but it is highly recommended
/// and has minimal impact to your conversion rate.
  STPSourceCard3DSecureStatusRecommended = 3,
/// The status of 3D Secure support on this card is unknown.
  STPSourceCard3DSecureStatusUnknown = 4,
};


/// This class provides typed access to the contents of an STPSource <code>details</code>
/// dictionary for card sources.
SWIFT_CLASS("_TtC6Stripe20STPSourceCardDetails")
@interface STPSourceCardDetails : NSObject <STPAPIResponseDecodable>
/// The last 4 digits of the card.
@property (nonatomic, readonly, copy) NSString * _Nullable last4;
/// The card’s expiration month. 1-indexed (i.e. 1 == January)
@property (nonatomic, readonly) NSUInteger expMonth;
/// The card’s expiration year.
@property (nonatomic, readonly) NSUInteger expYear;
/// The issuer of the card.
@property (nonatomic, readonly) enum STPCardBrand brand;
/// The funding source for the card (credit, debit, prepaid, or other)
@property (nonatomic, readonly) enum STPCardFundingType funding;
/// Two-letter ISO code representing the issuing country of the card.
@property (nonatomic, readonly, copy) NSString * _Nullable country;
/// Whether 3D Secure is supported or required by the card.
@property (nonatomic, readonly) enum STPSourceCard3DSecureStatus threeDSecure;
/// True if this card was created through Apple Pay, false otherwise.
@property (nonatomic, readonly) BOOL isApplePayCard;
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Authentication flows for a Source
typedef SWIFT_ENUM(NSInteger, STPSourceFlow, open) {
/// No action is required from your customer.
/// @note WeChat Pay Sources also have this flow type.
  STPSourceFlowNone = 0,
/// Your customer must be redirected to their online banking service (either a website or mobile banking app) to approve the payment.
  STPSourceFlowRedirect = 1,
/// Your customer must verify ownership of their account by providing a code that you post to the Stripe API for authentication.
  STPSourceFlowCodeVerification = 2,
/// Your customer must push funds to the account information provided.
  STPSourceFlowReceiver = 3,
/// The source’s flow is unknown.
  STPSourceFlowUnknown = 4,
};


/// Details of a Klarna source.
SWIFT_CLASS("_TtC6Stripe22STPSourceKlarnaDetails")
@interface STPSourceKlarnaDetails : NSObject <STPAPIResponseDecodable>
/// The Klarna-specific client token. This may be used with the Klarna SDK.
/// seealso:
/// https://developers.klarna.com/documentation/in-app/ios/steps-klarna-payments-native/#initialization
@property (nonatomic, readonly, copy) NSString * _Nullable clientToken;
/// The ISO-3166 2-letter country code of the customer’s location.
@property (nonatomic, readonly, copy) NSString * _Nullable purchaseCountry;
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
@end


/// Information about a source’s owner.
SWIFT_CLASS("_TtC6Stripe14STPSourceOwner")
@interface STPSourceOwner : NSObject <STPAPIResponseDecodable>
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Owner’s address.
@property (nonatomic, readonly, strong) STPAddress * _Nullable address;
/// Owner’s email address.
@property (nonatomic, readonly, copy) NSString * _Nullable email;
/// Owner’s full name.
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// Owner’s phone number.
@property (nonatomic, readonly, copy) NSString * _Nullable phone;
/// Verified owner’s address.
@property (nonatomic, readonly, strong) STPAddress * _Nullable verifiedAddress;
/// Verified owner’s email address.
@property (nonatomic, readonly, copy) NSString * _Nullable verifiedEmail;
/// Verified owner’s full name.
@property (nonatomic, readonly, copy) NSString * _Nullable verifiedName;
/// Verified owner’s phone number.
@property (nonatomic, readonly, copy) NSString * _Nullable verifiedPhone;
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
@end


/// An object representing parameters used to create a Source object.
/// seealso:
/// https://stripe.com/docs/api#create_source
SWIFT_CLASS("_TtC6Stripe15STPSourceParams")
@interface STPSourceParams : NSObject <NSCopying, STPFormEncodable>
@property (nonatomic, copy) NSDictionary * _Nonnull additionalAPIParameters;
/// The type of the source to create. Required.
@property (nonatomic) enum STPSourceType type;
/// The raw underlying type string sent to the server.
/// Generally you should use <code>type</code> instead unless you have a reason not to.
/// You can use this if you want to create a param of a type not yet supported
/// by the current version of the SDK’s <code>STPSourceType</code> enum.
/// Setting this to a value not known by the SDK causes <code>type</code> to
/// return <code>STPSourceTypeUnknown</code>
@property (nonatomic, copy) NSString * _Nullable rawTypeString;
/// A positive integer in the smallest currency unit representing the
/// amount to charge the customer (e.g., @1099 for a €10.99 payment).
/// Required for <code>single_use</code> sources.
@property (nonatomic, strong) NSNumber * _Nullable amount;
/// The currency associated with the source. This is the currency for which the source
/// will be chargeable once ready.
@property (nonatomic, copy) NSString * _Nullable currency;
/// The authentication flow of the source to create. <code>flow</code> may be “redirect”,
/// “receiver”, “verification”, or “none”. It is generally inferred unless a type
/// supports multiple flows.
@property (nonatomic) enum STPSourceFlow flow;
/// A set of key/value pairs that you can attach to a source object.
@property (nonatomic, copy) NSDictionary * _Nullable metadata;
/// Information about the owner of the payment instrument. May be used or required
/// by particular source types.
@property (nonatomic, copy) NSDictionary * _Nullable owner;
/// Parameters required for the redirect flow. Required if the source is
/// authenticated by a redirect (<code>flow</code> is “redirect”).
@property (nonatomic, copy) NSDictionary * _Nullable redirect;
/// An optional token used to create the source. When passed, token properties will
/// override source parameters.
@property (nonatomic, copy) NSString * _Nullable token;
/// Whether this source should be reusable or not. <code>usage</code> may be “reusable” or
/// “single_use”. Some source types may or may not be reusable by construction,
/// while other may leave the option at creation.
@property (nonatomic) enum STPSourceUsage usage;
/// Initializes an empty STPSourceParams.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STPSourceParams (SWIFT_EXTENSION(Stripe))
/// Creates params for a Bancontact source.
/// seealso:
/// https://stripe.com/docs/bancontact#create-source
/// \param amount The amount to charge the customer in EUR.
///
/// \param name The full name of the account holder.
///
/// \param returnURL The URL the customer should be redirected to after
/// they have successfully verified the payment.
///
/// \param statementDescriptor (Optional) A custom statement descriptor for
/// the payment.
/// @note The currency for Bancontact must be “eur”. This will be set automatically
/// for you.
///
///
/// returns:
/// an STPSourceParams object populated with the provided values.
+ (STPSourceParams * _Nonnull)bancontactParamsWithAmount:(NSInteger)amount name:(NSString * _Nonnull)name returnURL:(NSString * _Nonnull)returnURL statementDescriptor:(NSString * _Nullable)statementDescriptor SWIFT_WARN_UNUSED_RESULT;
/// Creates params for a Card source.
/// seealso:
/// https://stripe.com/docs/sources/cards#create-source
/// \param card An object containing the user’s card details
///
///
/// returns:
/// an STPSourceParams object populated with the provided card details.
+ (STPSourceParams * _Nonnull)cardParamsWithCard:(STPCardParams * _Nonnull)card SWIFT_WARN_UNUSED_RESULT;
/// Creates params for a Giropay source.
/// seealso:
/// https://stripe.com/docs/sources/giropay#create-source
/// \param amount The amount to charge the customer in EUR.
///
/// \param name The full name of the account holder.
///
/// \param returnURL The URL the customer should be redirected to after
/// they have successfully verified the payment.
///
/// \param statementDescriptor (Optional) A custom statement descriptor for
/// the payment.
/// @note The currency for Giropay must be “eur”. This will be set automatically
/// for you.
///
///
/// returns:
/// an STPSourceParams object populated with the provided values.
+ (STPSourceParams * _Nonnull)giropayParamsWithAmount:(NSInteger)amount name:(NSString * _Nonnull)name returnURL:(NSString * _Nonnull)returnURL statementDescriptor:(NSString * _Nullable)statementDescriptor SWIFT_WARN_UNUSED_RESULT;
/// Creates params for an iDEAL source.
/// seealso:
/// https://stripe.com/docs/sources/ideal#create-source
/// \param amount The amount to charge the customer in EUR.
///
/// \param name (Optional) The full name of the account holder.
///
/// \param returnURL The URL the customer should be redirected to after
/// they have successfully verified the payment.
///
/// \param statementDescriptor (Optional) A custom statement descriptor for t
/// he payment.
///
/// \param bank (Optional) The customer’s bank.
/// @note The currency for iDEAL must be “eur”. This will be set automatically
/// for you.
///
///
/// returns:
/// an STPSourceParams object populated with the provided values.
+ (STPSourceParams * _Nonnull)idealParamsWithAmount:(NSInteger)amount name:(NSString * _Nullable)name returnURL:(NSString * _Nonnull)returnURL statementDescriptor:(NSString * _Nullable)statementDescriptor bank:(NSString * _Nullable)bank SWIFT_WARN_UNUSED_RESULT;
/// Creates params for a SEPA Debit source.
/// seealso:
/// https://stripe.com/docs/sources/sepa-debit#create-source
/// \param name The full name of the account holder.
///
/// \param iban The IBAN number for the bank account you wish to debit.
///
/// \param addressLine1 (Optional) The bank account holder’s first address line.
///
/// \param city (Optional) The bank account holder’s city.
///
/// \param postalCode (Optional) The bank account holder’s postal code.
///
/// \param country (Optional) The bank account holder’s two-letter
/// country code.
/// @note The currency for SEPA Debit must be “eur”. This will be set automatically
/// for you.
///
///
/// returns:
/// an STPSourceParams object populated with the provided values.
+ (STPSourceParams * _Nonnull)sepaDebitParamsWithName:(NSString * _Nonnull)name iban:(NSString * _Nonnull)iban addressLine1:(NSString * _Nullable)addressLine1 city:(NSString * _Nullable)city postalCode:(NSString * _Nullable)postalCode country:(NSString * _Nullable)country SWIFT_WARN_UNUSED_RESULT;
/// Creates params for a Sofort source.
/// seealso:
/// https://stripe.com/docs/sources/sofort#create-source
/// \param amount The amount to charge the customer in EUR.
///
/// \param returnURL The URL the customer should be redirected to after
/// they have successfully verified the payment.
///
/// \param country The country code of the customer’s bank.
///
/// \param statementDescriptor (Optional) A custom statement descriptor for
/// the payment.
/// @note The currency for Sofort must be “eur”. This will be set automatically
/// for you.
///
///
/// returns:
/// an STPSourceParams object populated with the provided values.
+ (STPSourceParams * _Nonnull)sofortParamsWithAmount:(NSInteger)amount returnURL:(NSString * _Nonnull)returnURL country:(NSString * _Nonnull)country statementDescriptor:(NSString * _Nullable)statementDescriptor SWIFT_WARN_UNUSED_RESULT;
/// Creates params for a Klarna source.
/// seealso:
/// https://stripe.com/docs/sources/klarna#create-source
/// \param returnURL The URL the customer should be redirected to after
/// they have successfully verified the payment.
///
/// \param currency The currency the payment is being created in.
///
/// \param purchaseCountry The ISO-3166 2-letter country code of the customer’s location.
///
/// \param items An array of STPKlarnaLineItems. Klarna will present these on the confirmation
/// page. The total amount charged will be a sum of the <code>totalAmount</code> of each of these items.
///
/// \param customPaymentMethods Required for customers located in the US. This determines whether Pay Later and/or Slice It
/// is offered to a US customer.
///
/// \param address An STPAddress for the customer. At a minimum, an <code>email</code>, <code>line1</code>, <code>postalCode</code>, <code>city</code>, and <code>country</code> must be provided.
/// The address’ <code>name</code> will be ignored in favor of the <code>firstName and </code>lastName` parameters.
///
/// \param firstName The customer’s first name.
///
/// \param lastName The customer’s last name.
/// If the provided information is missing a line1, postal code, city, email, or first/last name, or if the country code is
/// outside the specified country, no address information will be sent to Klarna, and Klarna will prompt the customer to provide their address.
///
/// \param dateOfBirth The customer’s date of birth. This will be used by Klarna for a credit check in some EU countries.
/// The optional fields (address, firstName, lastName, and dateOfBirth) can be provided to skip Klarna’s customer information form.
/// If this information is missing, Klarna will prompt the customer for these values during checkout.
/// Be careful with this option: If the provided information is invalid,
/// Klarna may reject the transaction without giving the customer a chance to correct it.
///
///
/// returns:
/// an STPSourceParams object populated with the provided values.
+ (STPSourceParams * _Nonnull)klarnaParamsWithReturnURL:(NSString * _Nonnull)returnURL currency:(NSString * _Nonnull)currency purchaseCountry:(NSString * _Nonnull)purchaseCountry items:(NSArray<STPKlarnaLineItem *> * _Nonnull)items customPaymentMethods:(NSArray<NSNumber *> * _Nonnull)customPaymentMethods billingAddress:(STPAddress * _Nullable)address billingFirstName:(NSString * _Nullable)firstName billingLastName:(NSString * _Nullable)lastName billingDOB:(STPDateOfBirth * _Nullable)dateOfBirth SWIFT_WARN_UNUSED_RESULT;
/// Creates params for a Klarna source.
/// seealso:
/// https://stripe.com/docs/sources/klarna#create-source
/// \param returnURL The URL the customer should be redirected to after
/// they have successfully verified the payment.
///
/// \param currency The currency the payment is being created in.
///
/// \param purchaseCountry The ISO-3166 2-letter country code of the customer’s location.
///
/// \param items An array of STPKlarnaLineItems. Klarna will present these in the confirmation
/// dialog. The total amount charged will be a sum of the <code>totalAmount</code> of each of these items.
///
/// \param customPaymentMethods Required for customers located in the US. This determines whether Pay Later and/or Slice It
/// is offered to a US customer.
///
///
/// returns:
/// an STPSourceParams object populated with the provided values.
+ (STPSourceParams * _Nonnull)klarnaParamsWithReturnURL:(NSString * _Nonnull)returnURL currency:(NSString * _Nonnull)currency purchaseCountry:(NSString * _Nonnull)purchaseCountry items:(NSArray<STPKlarnaLineItem *> * _Nonnull)items customPaymentMethods:(NSArray<NSNumber *> * _Nonnull)customPaymentMethods SWIFT_WARN_UNUSED_RESULT;
/// Creates params for a 3DS source.
/// seealso:
/// https://stripe.com/docs/sources/three-d-secure#create-3ds-source
/// \param amount The amount to charge the customer.
///
/// \param currency The currency the payment is being created in.
///
/// \param returnURL The URL the customer should be redirected to after they have
/// successfully verified the payment.
///
/// \param card The ID of the card source.
///
///
/// returns:
/// an STPSourceParams object populated with the provided card details.
+ (STPSourceParams * _Nonnull)threeDSecureParamsWithAmount:(NSInteger)amount currency:(NSString * _Nonnull)currency returnURL:(NSString * _Nonnull)returnURL card:(NSString * _Nonnull)card SWIFT_WARN_UNUSED_RESULT;
/// Creates params for a single-use Alipay source
/// seealso:
/// https://stripe.com/docs/sources/alipay#create-source
/// \param amount The amount to charge the customer.
///
/// \param currency The currency the payment is being created in.
///
/// \param returnURL The URL the customer should be redirected to after they have
/// successfully verified the payment.
///
///
/// returns:
/// An STPSourceParams object populated with the provided values
+ (STPSourceParams * _Nonnull)alipayParamsWithAmount:(NSInteger)amount currency:(NSString * _Nonnull)currency returnURL:(NSString * _Nonnull)returnURL SWIFT_WARN_UNUSED_RESULT;
/// Creates params for a reusable Alipay source
/// seealso:
/// https://stripe.com/docs/sources/alipay#create-source
/// \param currency The currency the payment is being created in.
///
/// \param returnURL The URL the customer should be redirected to after they have
/// successfully verified the payment.
///
///
/// returns:
/// An STPSourceParams object populated with the provided values
+ (STPSourceParams * _Nonnull)alipayReusableParamsWithCurrency:(NSString * _Nonnull)currency returnURL:(NSString * _Nonnull)returnURL SWIFT_WARN_UNUSED_RESULT;
/// Creates params for a P24 source
/// seealso:
/// https://stripe.com/docs/sources/p24#create-source
/// \param amount The amount to charge the customer.
///
/// \param currency The currency the payment is being created in (this must be
/// EUR or PLN)
///
/// \param email The email address of the account holder.
///
/// \param name The full name of the account holder (optional).
///
/// \param returnURL The URL the customer should be redirected to after they have
///
///
/// returns:
/// An STPSourceParams object populated with the provided values.
+ (STPSourceParams * _Nonnull)p24ParamsWithAmount:(NSInteger)amount currency:(NSString * _Nonnull)currency email:(NSString * _Nonnull)email name:(NSString * _Nullable)name returnURL:(NSString * _Nonnull)returnURL SWIFT_WARN_UNUSED_RESULT;
/// Creates params for a card source created from Visa Checkout.
/// seealso:
/// https://stripe.com/docs/visa-checkout
/// @note Creating an STPSource with these params will give you a
/// source with type == STPSourceTypeCard
/// \param callId The callId property from a <code>VisaCheckoutResult</code> object.
///
///
/// returns:
/// An STPSourceParams object populated with the provided values.
+ (STPSourceParams * _Nonnull)visaCheckoutParamsWithCallId:(NSString * _Nonnull)callId SWIFT_WARN_UNUSED_RESULT;
/// Creates params for a card source created from Masterpass.
/// seealso:
/// https://stripe.com/docs/masterpass
/// @note Creating an STPSource with these params will give you a
/// source with type == STPSourceTypeCard
/// \param cartId The cartId from a <code>MCCCheckoutResponse</code> object.
///
/// \param transactionId The transactionid from a <code>MCCCheckoutResponse</code> object.
///
///
/// returns:
/// An STPSourceParams object populated with the provided values.
+ (STPSourceParams * _Nonnull)masterpassParamsWithCartId:(NSString * _Nonnull)cartId transactionId:(NSString * _Nonnull)transactionId SWIFT_WARN_UNUSED_RESULT;
/// Create params for an EPS source
/// seealso:
/// https://stripe.com/docs/sources/eps
/// \param amount The amount to charge the customer.
///
/// \param name The full name of the account holder.
///
/// \param returnURL The URL the customer should be redirected to
/// after the authorization process.
///
/// \param statementDescriptor A custom statement descriptor for the
/// payment (optional).
///
///
/// returns:
/// An STPSourceParams object populated with the provided values.
+ (STPSourceParams * _Nonnull)epsParamsWithAmount:(NSInteger)amount name:(NSString * _Nonnull)name returnURL:(NSString * _Nonnull)returnURL statementDescriptor:(NSString * _Nullable)statementDescriptor SWIFT_WARN_UNUSED_RESULT;
/// Create params for a Multibanco source
/// seealso:
/// https://stripe.com/docs/sources/multibanco
/// \param amount The amount to charge the customer.
///
/// \param returnURL The URL the customer should be redirected to after the
/// authorization process.
///
/// \param email The full email address of the customer.
///
///
/// returns:
/// An STPSourceParams object populated with the provided values.
+ (STPSourceParams * _Nonnull)multibancoParamsWithAmount:(NSInteger)amount returnURL:(NSString * _Nonnull)returnURL email:(NSString * _Nonnull)email SWIFT_WARN_UNUSED_RESULT;
/// Create params for a WeChat Pay native app redirect source
/// @note This feature is in private beta. For participating users, see
/// https://stripe.com/docs/sources/wechat-pay/ios
/// \param amount The amount to charge the customer.
///
/// \param currency The currency of the payment
///
/// \param appId Your WeChat-provided application id. WeChat Pay uses
/// this as the redirect URL scheme
///
/// \param statementDescriptor A custom statement descriptor for the payment (optional).
///
///
/// returns:
/// An STPSourceParams object populated with the provided values.
+ (STPSourceParams * _Nonnull)wechatPayParamsWithAmount:(NSInteger)amount currency:(NSString * _Nonnull)currency appId:(NSString * _Nonnull)appId statementDescriptor:(NSString * _Nullable)statementDescriptor SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Private setter allows for setting the name of the app in the returnURL so
/// that it can be displayed on hooks.stripe.com if the automatic redirect back
/// to the app fails.
/// We intercept the reading of redirect dictionary from STPFormEncoder and replace
/// the value of return_url if necessary
- (NSDictionary * _Nonnull)redirectDictionaryWithMerchantNameIfNecessary SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)rootObjectName SWIFT_WARN_UNUSED_RESULT;
+ (NSDictionary<NSString *, NSString *> * _Nonnull)propertyNamesToFormFieldNamesMapping SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end



/// Information related to a source’s receiver flow.
SWIFT_CLASS("_TtC6Stripe17STPSourceReceiver")
@interface STPSourceReceiver : NSObject <STPAPIResponseDecodable>
/// The address of the receiver source. This is the value that should be communicated to the customer to send their funds to.
@property (nonatomic, readonly, copy) NSString * _Nullable address;
/// The total amount charged by you.
@property (nonatomic, readonly, strong) NSNumber * _Nullable amountCharged;
/// The total amount received by the receiver source.
@property (nonatomic, readonly, strong) NSNumber * _Nullable amountReceived;
/// The total amount that was returned to the customer.
@property (nonatomic, readonly, strong) NSNumber * _Nullable amountReturned;
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum STPSourceRedirectStatus : NSInteger;

/// Information related to a source’s redirect flow.
SWIFT_CLASS("_TtC6Stripe17STPSourceRedirect")
@interface STPSourceRedirect : NSObject <STPAPIResponseDecodable>
/// The URL you provide to redirect the customer to after they authenticated their payment.
@property (nonatomic, readonly, copy) NSURL * _Nonnull returnURL;
/// The status of the redirect.
@property (nonatomic, readonly) enum STPSourceRedirectStatus status;
/// The URL provided to you to redirect a customer to as part of a redirect authentication flow.
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Redirect status types for a Source.
typedef SWIFT_ENUM(NSInteger, STPSourceRedirectStatus, open) {
/// The redirect is pending.
  STPSourceRedirectStatusPending = 0,
/// The redirect has succeeded.
  STPSourceRedirectStatusSucceeded = 1,
/// The redirect has failed.
  STPSourceRedirectStatusFailed = 2,
/// The redirect should not be used.
  STPSourceRedirectStatusNotRequired = 3,
/// The state of the redirect is unknown.
  STPSourceRedirectStatusUnknown = 4,
};


/// This class provides typed access to the contents of an STPSource <code>details</code>
/// dictionary for SEPA Debit sources.
SWIFT_CLASS("_TtC6Stripe25STPSourceSEPADebitDetails")
@interface STPSourceSEPADebitDetails : NSObject <STPAPIResponseDecodable>
/// You cannot directly instantiate an <code>STPSourceSEPADebitDetails</code>.
/// You should only use one that is part of an existing <code>STPSource</code> object.
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// The last 4 digits of the account number.
@property (nonatomic, readonly, copy) NSString * _Nullable last4;
/// The account’s bank code.
@property (nonatomic, readonly, copy) NSString * _Nullable bankCode;
/// Two-letter ISO code representing the country of the bank account.
@property (nonatomic, readonly, copy) NSString * _Nullable country;
/// The account’s fingerprint.
@property (nonatomic, readonly, copy) NSString * _Nullable fingerprint;
/// The reference of the mandate accepted by your customer.
@property (nonatomic, readonly, copy) NSString * _Nullable mandateReference;
/// The details of the mandate accepted by your customer.
@property (nonatomic, readonly, copy) NSURL * _Nullable mandateURL;
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
@end

/// Status types for a Source
typedef SWIFT_ENUM(NSInteger, STPSourceStatus, open) {
/// The source has been created and is awaiting customer action.
  STPSourceStatusPending = 0,
/// The source is ready to use. The customer action has been completed or the
/// payment method requires no customer action.
  STPSourceStatusChargeable = 1,
/// The source has been used. This status only applies to single-use sources.
  STPSourceStatusConsumed = 2,
/// The source, which was chargeable, has expired because it was not used to
/// make a charge request within a specified amount of time.
  STPSourceStatusCanceled = 3,
/// Your customer has not taken the required action or revoked your access
/// (e.g., did not authorize the payment with their bank or canceled their
/// mandate acceptance for SEPA direct debits).
  STPSourceStatusFailed = 4,
/// The source status is unknown.
  STPSourceStatusUnknown = 5,
};

/// Types for a Source
/// seealso:
/// https://stripe.com/docs/sources
typedef SWIFT_ENUM(NSInteger, STPSourceType, open) {
/// A Bancontact source. - seealso: https://stripe.com/docs/sources/bancontact
  STPSourceTypeBancontact = 0,
/// A card source. - seealso: https://stripe.com/docs/sources/cards
  STPSourceTypeCard = 1,
/// A Giropay source. - seealso: https://stripe.com/docs/sources/giropay
  STPSourceTypeGiropay = 2,
/// An iDEAL source. - seealso: https://stripe.com/docs/sources/ideal
  STPSourceTypeiDEAL SWIFT_COMPILE_NAME("iDEAL") = 3,
/// A SEPA Direct Debit source. - seealso: https://stripe.com/docs/sources/sepa-debit
  STPSourceTypeSEPADebit = 4,
/// A Sofort source. - seealso: https://stripe.com/docs/sources/sofort
  STPSourceTypeSofort = 5,
/// A 3DS card source. - seealso: https://stripe.com/docs/sources/three-d-secure
  STPSourceTypeThreeDSecure = 6,
/// An Alipay source. - seealso: https://stripe.com/docs/sources/alipay
  STPSourceTypeAlipay = 7,
/// A P24 source. - seealso: https://stripe.com/docs/sources/p24
  STPSourceTypeP24 = 8,
/// An EPS source. - seealso: https://stripe.com/docs/sources/eps
  STPSourceTypeEPS = 9,
/// A Multibanco source. - seealso: https://stripe.com/docs/sources/multibanco
  STPSourceTypeMultibanco = 10,
/// A WeChat Pay source. - seealso: https://stripe.com/docs/sources/wechat-pay
  STPSourceTypeWeChatPay = 11,
/// A Klarna source. - seealso: https://stripe.com/docs/sources/klarna
  STPSourceTypeKlarna = 12,
/// An unknown type of source.
  STPSourceTypeUnknown = 13,
};

/// Usage types for a Source
typedef SWIFT_ENUM(NSInteger, STPSourceUsage, open) {
/// The source can be reused.
  STPSourceUsageReusable = 0,
/// The source can only be used once.
  STPSourceUsageSingleUse = 1,
/// The source’s usage is unknown.
  STPSourceUsageUnknown = 2,
};

enum STPSourceVerificationStatus : NSInteger;

/// Information related to a source’s verification flow.
SWIFT_CLASS("_TtC6Stripe21STPSourceVerification")
@interface STPSourceVerification : NSObject <STPAPIResponseDecodable>
/// The number of attempts remaining to authenticate the source object with a
/// verification code.
@property (nonatomic, readonly, strong) NSNumber * _Nullable attemptsRemaining;
/// The status of the verification.
@property (nonatomic, readonly) enum STPSourceVerificationStatus status;
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
@end

/// Verification status types for a Source.
typedef SWIFT_ENUM(NSInteger, STPSourceVerificationStatus, open) {
/// The verification is pending.
  STPSourceVerificationStatusPending = 0,
/// The verification has succeeeded.
  STPSourceVerificationStatusSucceeded = 1,
/// The verification has failed.
  STPSourceVerificationStatusFailed = 2,
/// The state of the verification is unknown.
  STPSourceVerificationStatusUnknown = 3,
};


/// Details of a WeChat Pay Source.
SWIFT_CLASS("_TtC6Stripe25STPSourceWeChatPayDetails")
@interface STPSourceWeChatPayDetails : NSObject <STPAPIResponseDecodable>
/// A URL to the WeChat App.
/// Use <code>STPRedirectContext</code> instead of redirecting users yourself.
@property (nonatomic, readonly, copy) NSString * _Nullable weChatAppURL;
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS("_TtC6Stripe22STPStringFromCardBrand") SWIFT_DEPRECATED_MSG("STPStringFromCardBrand has been replaced with STPCardBrandUtilities.stringFrom(brand)")
@interface STPStringFromCardBrand : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// STPTheme objects can be used to visually style Stripe-provided UI. See https://stripe.com/docs/mobile/ios/standard#theming for more information.
SWIFT_CLASS("_TtC6Stripe8STPTheme")
@interface STPTheme : NSObject
/// The default theme used by all Stripe UI. All themable UI classes, such as <code>STPAddCardViewController</code>, have one initializer that takes a <code>theme</code> and one that does not. If you use the one that does not, the default theme will be used to customize that view controller’s appearance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) STPTheme * _Nonnull defaultTheme;)
+ (STPTheme * _Nonnull)defaultTheme SWIFT_WARN_UNUSED_RESULT;
/// The primary background color of the theme. This will be used as the <code>backgroundColor</code> for any views with this theme.
@property (nonatomic, strong) UIColor * _Nonnull primaryBackgroundColor;
/// The secondary background color of this theme. This will be used as the <code>backgroundColor</code> for any supplemental views inside a view with this theme - for example, a <code>UITableView</code> will set it’s cells’ background color to this value.
@property (nonatomic, strong) UIColor * _Nonnull secondaryBackgroundColor;
/// This color is automatically derived by reducing the alpha of the <code>primaryBackgroundColor</code> and is used as a section border color in table view cells.
@property (nonatomic, readonly, strong) UIColor * _Nonnull tertiaryBackgroundColor;
/// This color is automatically derived by reducing the brightness of the <code>primaryBackgroundColor</code> and is used as a separator color in table view cells.
@property (nonatomic, readonly, strong) UIColor * _Nonnull quaternaryBackgroundColor;
/// The primary foreground color of this theme. This will be used as the text color for any important labels in a view with this theme (such as the text color for a text field that the user needs to fill out).
@property (nonatomic, strong) UIColor * _Nonnull primaryForegroundColor;
/// The secondary foreground color of this theme. This will be used as the text color for any supplementary labels in a view with this theme (such as the placeholder color for a text field that the user needs to fill out).
@property (nonatomic, strong) UIColor * _Nonnull secondaryForegroundColor;
/// This color is automatically derived from the <code>secondaryForegroundColor</code> with a lower alpha component, used for disabled text.
@property (nonatomic, readonly, strong) UIColor * _Nonnull tertiaryForegroundColor;
/// The accent color of this theme - it will be used for any buttons and other elements on a view that are important to highlight.
@property (nonatomic, strong) UIColor * _Nonnull accentColor;
/// The error color of this theme - it will be used for rendering any error messages or views.
@property (nonatomic, strong) UIColor * _Nonnull errorColor;
/// The font to be used for all views using this theme. Make sure to select an appropriate size.
@property (nonatomic, strong) UIFont * _Nonnull font;
/// The medium-weight font to be used for all bold text in views using this theme. Make sure to select an appropriate size.
@property (nonatomic, strong) UIFont * _Nonnull emphasisFont;
/// The navigation bar style to use for any view controllers presented modally
/// by the SDK. The default value will be determined based on the brightness
/// of the theme’s <code>secondaryBackgroundColor</code>.
@property (nonatomic) UIBarStyle barStyle;
/// A Boolean value indicating whether the navigation bar for any view controllers
/// presented modally by the SDK should be translucent. The default value is YES.
@property (nonatomic) BOOL translucentNavigationBar;
/// This font is automatically derived from the font, with a slightly lower point size, and will be used for supplementary labels.
@property (nonatomic, readonly, strong) UIFont * _Nonnull smallFont;
/// This font is automatically derived from the font, with a larger point size, and will be used for large labels such as SMS code entry.
@property (nonatomic, readonly, strong) UIFont * _Nonnull largeFont;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface STPTheme (SWIFT_EXTENSION(Stripe)) <NSCopying>
/// :nodoc:
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end

enum STPThreeDSCustomizationButtonType : NSInteger;
enum STPThreeDSButtonTitleStyle : NSInteger;

/// A customization object to use to configure the UI of a button.
SWIFT_CLASS("_TtC6Stripe29STPThreeDSButtonCustomization")
@interface STPThreeDSButtonCustomization : NSObject
/// The default settings for the provided button type.
+ (STPThreeDSButtonCustomization * _Nonnull)defaultSettingsForButtonType:(enum STPThreeDSCustomizationButtonType)type SWIFT_WARN_UNUSED_RESULT;
/// Initializes an instance of STDSButtonCustomization with the given backgroundColor and colorRadius.
- (nonnull instancetype)initWithBackgroundColor:(UIColor * _Nonnull)backgroundColor cornerRadius:(CGFloat)cornerRadius OBJC_DESIGNATED_INITIALIZER;
/// The background color of the button.
/// The default for .resend and .cancel is clear.
/// The default for .submit, .continue, and .next is blue.
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
/// The corner radius of the button. Defaults to 8.
@property (nonatomic) CGFloat cornerRadius;
/// The capitalization style of the button title.
@property (nonatomic) enum STPThreeDSButtonTitleStyle titleStyle;
/// The font of the title.
@property (nonatomic, strong) UIFont * _Nullable font;
/// The text color of the title.
@property (nonatomic, strong) UIColor * _Nullable textColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// An enumeration of the case transformations that can be applied to the button’s title
typedef SWIFT_ENUM(NSInteger, STPThreeDSButtonTitleStyle, open) {
/// Default style, doesn’t modify the title
  STPThreeDSButtonTitleStyleDefault = 0,
/// Applies localizedUppercaseString to the title
  STPThreeDSButtonTitleStyleUppercase = 1,
/// Applies localizedLowercaseString to the title
  STPThreeDSButtonTitleStyleLowercase = 2,
/// Applies localizedCapitalizedString to the title
  STPThreeDSButtonTitleStyleSentenceCapitalized = 3,
};

/// An enum that defines the different types of buttons that are able to be customized.
typedef SWIFT_ENUM(NSInteger, STPThreeDSCustomizationButtonType, open) {
/// The submit button type.
  STPThreeDSCustomizationButtonTypeSubmit = 0,
/// The continue button type.
  STPThreeDSCustomizationButtonTypeContinue = 1,
/// The next button type.
  STPThreeDSCustomizationButtonTypeNext = 2,
/// The cancel button type.
  STPThreeDSCustomizationButtonTypeCancel = 3,
/// The resend button type.
  STPThreeDSCustomizationButtonTypeResend = 4,
};

@class STPThreeDSUICustomization;

/// <code>STPThreeDSCustomizationSettings</code> provides customization options for 3DS2 authentication flows in your app.
SWIFT_CLASS("_TtC6Stripe31STPThreeDSCustomizationSettings")
@interface STPThreeDSCustomizationSettings : NSObject
/// Returns an <code>STPThreeDSCustomizationSettings</code> preconfigured with the default
/// Stripe UI settings and a 10 minute <code>authenticationTimeout</code>.
/// @deprecated Use STPThreeDSCustomizationSettings() instead. The default settings are the same.
+ (STPThreeDSCustomizationSettings * _Nonnull)defaultSettings SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use STPThreeDSCustomizationSettings() instead of STPThreeDSCustomizationSettings.defaultSettings().");
/// <code>uiCustomization</code> can be used to provide custom UI settings for the authentication
/// challenge screens presented during a Three Domain Secure authentication. For more information see
/// our guide on supporting 3DS2 in your iOS application.
/// Note: It’s important to configure this object appropriately before calling any <code>STPPaymentHandler</code> APIs.
/// The API makes a copy of the customization settings you provide; it ignores any subsequent changes you
/// make to your <code>STPThreeDSUICustomization</code> instance.
/// Defaults to <code>STPThreeDSUICustomization.defaultSettings()</code>.
@property (nonatomic, strong) STPThreeDSUICustomization * _Nonnull uiCustomization;
/// <code>authenticationTimeout</code> is the total time allowed for a user to complete a 3DS2 authentication
/// interaction, in minutes.  This value <em>must</em> be at least 5 minutes.
/// Defaults to 10 minutes.
@property (nonatomic) NSInteger authenticationTimeout;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The Challenge view displays a footer with additional details that
/// expand when tapped. This object configures the appearance of that view.
SWIFT_CLASS("_TtC6Stripe29STPThreeDSFooterCustomization")
@interface STPThreeDSFooterCustomization : NSObject
/// The default settings.
+ (STPThreeDSFooterCustomization * _Nonnull)defaultSettings SWIFT_WARN_UNUSED_RESULT;
/// The background color of the footer.
/// Defaults to gray.
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
/// The color of the chevron. Defaults to a dark gray.
@property (nonatomic, strong) UIColor * _Nonnull chevronColor;
/// The color of the heading text. Defaults to black.
@property (nonatomic, strong) UIColor * _Nonnull headingTextColor;
/// The font to use for the heading text.
@property (nonatomic, strong) UIFont * _Nonnull headingFont;
/// The font of the text.
@property (nonatomic, strong) UIFont * _Nullable font;
/// The color of the text.
@property (nonatomic, strong) UIColor * _Nullable textColor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A customization object to use to configure the UI of a text label.
SWIFT_CLASS("_TtC6Stripe28STPThreeDSLabelCustomization")
@interface STPThreeDSLabelCustomization : NSObject
/// The default settings.
+ (STPThreeDSLabelCustomization * _Nonnull)defaultSettings SWIFT_WARN_UNUSED_RESULT;
/// The font to use for heading text.
@property (nonatomic, strong) UIFont * _Nonnull headingFont;
/// The color of heading text. Defaults to black.
@property (nonatomic, strong) UIColor * _Nonnull headingTextColor;
/// The font to use for non-heading text.
@property (nonatomic, strong) UIFont * _Nullable font;
/// The color to use for non-heading text. Defaults to black.
@property (nonatomic, strong) UIColor * _Nullable textColor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A customization object to use to configure a UINavigationBar.
SWIFT_CLASS("_TtC6Stripe36STPThreeDSNavigationBarCustomization")
@interface STPThreeDSNavigationBarCustomization : NSObject
/// The default settings.
+ (STPThreeDSNavigationBarCustomization * _Nonnull)defaultSettings SWIFT_WARN_UNUSED_RESULT;
/// The tint color of the navigation bar background.
/// Defaults to nil.
@property (nonatomic, strong) UIColor * _Nullable barTintColor;
/// The navigation bar style.
/// Defaults to UIBarStyleDefault.
/// @note This property controls the <code>UIStatusBarStyle</code>. Set this to <code>UIBarStyleBlack</code>
/// to change the <code>statusBarStyle</code> to <code>UIStatusBarStyleLightContent</code> - even if you also set
/// <code>barTintColor</code> to change the actual color of the navigation bar.
@property (nonatomic) UIBarStyle barStyle;
/// A Boolean value indicating whether the navigation bar is translucent or not.
/// Defaults to YES.
@property (nonatomic) BOOL translucent;
/// The text to display in the title of the navigation bar.
/// Defaults to “Secure checkout”.
@property (nonatomic, copy) NSString * _Nonnull headerText;
/// The text to display for the button in the navigation bar.
/// Defaults to “Cancel”.
@property (nonatomic, copy) NSString * _Nonnull buttonText;
/// The font to use for the title. Defaults to nil.
@property (nonatomic, strong) UIFont * _Nullable font;
/// The color to use for the title. Defaults to nil.
@property (nonatomic, strong) UIColor * _Nullable textColor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A customization object that configures the appearance of
/// radio buttons and checkboxes.
SWIFT_CLASS("_TtC6Stripe32STPThreeDSSelectionCustomization")
@interface STPThreeDSSelectionCustomization : NSObject
/// The default settings.
+ (STPThreeDSSelectionCustomization * _Nonnull)defaultSettings SWIFT_WARN_UNUSED_RESULT;
/// The primary color of the selected state.
/// Defaults to blue.
@property (nonatomic, strong) UIColor * _Nonnull primarySelectedColor;
/// The secondary color of the selected state (e.g. the checkmark color).
/// Defaults to white.
@property (nonatomic, strong) UIColor * _Nonnull secondarySelectedColor;
/// The background color displayed in the unselected state.
/// Defaults to light blue.
@property (nonatomic, strong) UIColor * _Nonnull unselectedBackgroundColor;
/// The color of the border drawn around the view in the unselected state.
/// Defaults to blue.
@property (nonatomic, strong) UIColor * _Nonnull unselectedBorderColor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A customization object to use to configure the UI of a text field.
SWIFT_CLASS("_TtC6Stripe32STPThreeDSTextFieldCustomization")
@interface STPThreeDSTextFieldCustomization : NSObject
/// The default settings.
+ (STPThreeDSTextFieldCustomization * _Nonnull)defaultSettings SWIFT_WARN_UNUSED_RESULT;
/// The border width of the text field. Defaults to 2.
@property (nonatomic) CGFloat borderWidth;
/// The color of the border of the text field. Defaults to clear.
@property (nonatomic, strong) UIColor * _Nonnull borderColor;
/// The corner radius of the edges of the text field. Defaults to 8.
@property (nonatomic) CGFloat cornerRadius;
/// The appearance of the keyboard. Defaults to UIKeyboardAppearanceDefault.
@property (nonatomic) UIKeyboardAppearance keyboardAppearance;
/// The color of the placeholder text. Defaults to light gray.
@property (nonatomic, strong) UIColor * _Nonnull placeholderTextColor;
/// The font to use for text.
@property (nonatomic, strong) UIFont * _Nullable font;
/// The color to use for the text. Defaults to black.
@property (nonatomic, strong) UIColor * _Nullable textColor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The <code>STPThreeDSUICustomization</code> provides configuration for UI elements displayed during 3D Secure authentication.
/// Note: It’s important to configure this object appropriately before calling any <code>STPPaymentHandler</code> APIs.
/// The API makes a copy of the customization settings you provide; it ignores any subsequent changes you
/// make to your <code>STPThreeDSUICustomization</code> instance.
/// seealso:
/// https://stripe.com/docs/mobile/ios/authentication
SWIFT_CLASS("_TtC6Stripe25STPThreeDSUICustomization")
@interface STPThreeDSUICustomization : NSObject
/// The default settings.  See individual properties for their default values.
+ (STPThreeDSUICustomization * _Nonnull)defaultSettings SWIFT_WARN_UNUSED_RESULT;
/// Provides custom settings for the UINavigationBar of all UIViewControllers displayed during 3D Secure authentication.
/// The default is <code>STPThreeDSNavigationBarCustomization.defaultSettings()</code>.
@property (nonatomic, strong) STPThreeDSNavigationBarCustomization * _Nonnull navigationBarCustomization;
/// Provides custom settings for labels.
/// The default is <code>STPThreeDSLabelCustomization.defaultSettings()</code>.
@property (nonatomic, strong) STPThreeDSLabelCustomization * _Nonnull labelCustomization;
/// Provides custom settings for text fields.
/// The default is <code>STPThreeDSTextFieldCustomization.defaultSettings()</code>.
@property (nonatomic, strong) STPThreeDSTextFieldCustomization * _Nonnull textFieldCustomization;
/// The primary background color of all UIViewControllers displayed during 3D Secure authentication.
/// Defaults to white.
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
/// Provides custom settings for the footer the challenge view can display containing additional details.
/// The default is <code>STPThreeDSFooterCustomization.defaultSettings()</code>.
@property (nonatomic, strong) STPThreeDSFooterCustomization * _Nonnull footerCustomization;
/// Sets a given button customization for the specified type.
/// \param buttonCustomization The buttom customization to use.
///
/// \param buttonType The type of button to use the customization for.
///
- (void)setButtonCustomization:(STPThreeDSButtonCustomization * _Nonnull)buttonCustomization forType:(enum STPThreeDSCustomizationButtonType)buttonType;
/// Retrieves a button customization object for the given button type.
/// seealso:
/// STPThreeDSButtonCustomization
/// \param buttonType The button type to retrieve a customization object for.
///
///
/// returns:
/// A button customization object, or the default if none was set.
- (STPThreeDSButtonCustomization * _Nonnull)buttonCustomizationForButtonType:(enum STPThreeDSCustomizationButtonType)buttonType SWIFT_WARN_UNUSED_RESULT;
/// Provides custom settings for radio buttons and checkboxes.
/// The default is <code>STPThreeDSSelectionCustomization.defaultSettings()</code>.
@property (nonatomic, strong) STPThreeDSSelectionCustomization * _Nonnull selectionCustomization;
/// The style of <code>UIActivityIndicatorView</code>s displayed.
/// This should contrast with <code>backgroundColor</code>.  Defaults to gray.
@property (nonatomic) UIActivityIndicatorViewStyle activityIndicatorViewStyle;
/// The style of the <code>UIBlurEffect</code> displayed underneath the <code>UIActivityIndicatorView</code>.
/// Defaults to <code>UIBlurEffectStyleLight</code>.
@property (nonatomic) UIBlurEffectStyle blurStyle;
/// :nodoc:
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum STPTokenType : NSInteger;

/// A token returned from submitting payment details to the Stripe API. You should not have to instantiate one of these directly.
SWIFT_CLASS("_TtC6Stripe8STPToken")
@interface STPToken : NSObject <STPAPIResponseDecodable, STPSourceProtocol>
/// You cannot directly instantiate an <code>STPToken</code>. You should only use one that has been returned from an <code>STPAPIClient</code> callback.
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// The value of the token. You can store this value on your server and use it to make charges and customers.
/// seealso:
/// https://stripe.com/docs/charges
@property (nonatomic, readonly, copy) NSString * _Nonnull tokenId;
/// Whether or not this token was created in livemode. Will be YES if you used your Live Publishable Key, and NO if you used your Test Publishable Key.
@property (nonatomic, readonly) BOOL livemode;
/// The type of this token.
@property (nonatomic, readonly) enum STPTokenType type;
/// The credit card details that were used to create the token. Will only be set if the token was created via a credit card or Apple Pay, otherwise it will be
/// nil.
@property (nonatomic, readonly, strong) STPCard * _Nullable card;
/// The bank account details that were used to create the token. Will only be set if the token was created with a bank account, otherwise it will be nil.
@property (nonatomic, readonly, strong) STPBankAccount * _Nullable bankAccount;
/// When the token was created.
@property (nonatomic, readonly, copy) NSDate * _Nullable created;
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull allResponseFields;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
@property (nonatomic, readonly) NSUInteger hash;
@property (nonatomic, readonly, copy) NSString * _Nonnull stripeID;
+ (nullable instancetype)decodedObjectFromAPIResponse:(NSDictionary * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
@end

/// Possible Token types
typedef SWIFT_ENUM(NSInteger, STPTokenType, open) {
/// Account token type
  STPTokenTypeAccount = 0,
/// Bank account token type
  STPTokenTypeBankAccount = 1,
/// Card token type
  STPTokenTypeCard = 2,
/// PII token type
  STPTokenTypePII = 3,
/// CVC update token type
  STPTokenTypeCvcUpdate = 4,
};


/// You can use this class to specify information that you’ve already collected
/// from your user. You can then set the <code>prefilledInformation</code> property on
/// <code>STPPaymentContext</code>, <code>STPAddCardViewController</code>, etc and it will pre-fill
/// this information whenever possible.
SWIFT_CLASS("_TtC6Stripe18STPUserInformation")
@interface STPUserInformation : NSObject <NSCopying>
/// The user’s billing address. When set, the add card form will be filled with
/// this address. The user will also have the option to fill their shipping address
/// using this address.
/// @note Set this using <code>setBillingAddressWithBillingDetails:</code> to use the billing
/// details from an <code>STPPaymentMethod</code> or <code>STPPaymentMethodParams</code> instance.
@property (nonatomic, strong) STPAddress * _Nullable billingAddress;
/// The user’s shipping address. When set, the shipping address form will be filled
/// with this address. The user will also have the option to fill their billing
/// address using this address.
@property (nonatomic, strong) STPAddress * _Nullable shippingAddress;
/// A convenience method to populate <code>billingAddress</code> with a PaymentMethod’s billing details.
/// @note Calling this overwrites the value of <code>billingAddress</code>.
- (void)setBillingAddressWithBillingDetails:(STPPaymentMethodBillingDetails * _Nonnull)billingDetails;
/// :nodoc:
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end









@interface UINavigationBar (SWIFT_EXTENSION(Stripe))
/// Sets the navigation bar’s appearance to the desired theme. This will affect the
/// bar’s <code>tintColor</code> and <code>barTintColor</code> properties, as well as the color of the
/// single-pixel line at the bottom of the navbar.
/// \param theme the theme to use to style the navigation bar. - seealso: STPTheme.h
/// @deprecated Use the <code>stp_theme</code> property instead
///
- (void)stp_setTheme:(STPTheme * _Nonnull)theme SWIFT_DEPRECATED_MSG("Use the `stp_theme` property instead");
/// Sets the navigation bar’s appearance to the desired theme. This will affect the bar’s <code>tintColor</code> and <code>barTintColor</code> properties, as well as the color of the single-pixel line at the bottom of the navbar.
/// Stripe view controllers will use their navigation bar’s theme for their UIBarButtonItems instead of their own theme if it is not nil.
/// seealso:
/// STPTheme.h
@property (nonatomic, strong) STPTheme * _Nullable stp_theme;
@end


















@class PKPaymentRequest;
@protocol STPApplePayContextDelegate;
@class UIWindow;

/// An Objective-C bridge for STPApplePayContext.
/// :nodoc:
SWIFT_CLASS_NAMED("_stpobjc_APContext")
@interface STPApplePayContext : NSObject
/// Initializes this class.
/// @note This may return nil if the request is invalid e.g. the user is restricted by parental controls, or can’t make payments on any of the request’s supported networks
/// \param paymentRequest The payment request to use with Apple Pay.
///
/// \param delegate The delegate.
///
- (nullable instancetype)initWithPaymentRequest:(PKPaymentRequest * _Nonnull)paymentRequest delegate:(id <STPApplePayContextDelegate> _Nullable)delegate OBJC_DESIGNATED_INITIALIZER;
/// Presents the Apple Pay sheet from the specified view controller, starting the payment process.
/// @note This method should only be called once; create a new instance of STPApplePayContext every time you present Apple Pay.
/// @deprecated A presenting UIViewController is no longer needed. Use presentApplePay(completion:) instead.
/// \param viewController The UIViewController instance to present the Apple Pay sheet on
///
/// \param completion Called after the Apple Pay sheet is presented
///
- (void)presentApplePayOnViewController:(UIViewController * _Nonnull)viewController completion:(void (^ _Nullable)(void))completion SWIFT_DEPRECATED_MSG("Use `presentApplePay(completion:)` instead.", "presentApplePayWithCompletion:");
/// Presents the Apple Pay sheet from the key window, starting the payment process.
/// @note This method should only be called once; create a new instance of STPApplePayContext every time you present Apple Pay.
/// \param completion Called after the Apple Pay sheet is presented
///
- (void)presentApplePayWithCompletion:(void (^ _Nullable)(void))completion SWIFT_AVAILABILITY(maccatalyst_app_extension,unavailable,message="Use `presentApplePay(from:completion:)` in App Extensions.") SWIFT_AVAILABILITY(ios_app_extension,unavailable,message="Use `presentApplePay(from:completion:)` in App Extensions.");
/// Presents the Apple Pay sheet from the specified window, starting the payment process.
/// @note This method should only be called once; create a new instance of STPApplePayContext every time you present Apple Pay.
/// \param window The UIWindow to host the Apple Pay sheet
///
/// \param completion Called after the Apple Pay sheet is presented
///
- (void)presentApplePayFromWindow:(UIWindow * _Nullable)window withCompletion:(void (^ _Nullable)(void))completion;
/// The STPAPIClient instance to use to make API requests to Stripe.
/// Defaults to <code>STPAPIClient.shared</code>.
@property (nonatomic, strong) STPAPIClient * _Nonnull apiClient;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class PKPaymentRequestShippingMethodUpdate;
@class PKPaymentRequestShippingContactUpdate;

/// Implement the required methods of this delegate to supply a PaymentIntent to STPApplePayContext and be notified of the completion of the Apple Pay payment.
/// You may also implement the optional delegate methods to handle shipping methods and shipping address changes e.g. to verify you can ship to the address, or update the payment amount.
/// :nodoc:
SWIFT_PROTOCOL_NAMED("_stpobjc_APContextDelegate")
@protocol STPApplePayContextDelegate <NSObject>
/// Called after the customer has authorized Apple Pay.  Implement this method to call the completion block with the client secret of a PaymentIntent or SetupIntent.
/// \param paymentMethod The PaymentMethod that represents the customer’s Apple Pay payment method.
/// If you create the PaymentIntent with confirmation_method=manual, pass <code>paymentMethod.stripeId</code> as the payment_method and confirm=true. Otherwise, you can ignore this parameter.
///
/// \param paymentInformation The underlying PKPayment created by Apple Pay.
/// If you create the PaymentIntent with confirmation_method=manual, you can collect shipping information using its <code>shippingContact</code> and <code>shippingMethod</code> properties.
///
/// \param completion Call this with the PaymentIntent or SetupIntent client secret, or the error that occurred creating the PaymentIntent or SetupIntent.
///
- (void)applePayContext:(STPApplePayContext * _Nonnull)context didCreatePaymentMethod:(STPPaymentMethod * _Nonnull)paymentMethod paymentInformation:(PKPayment * _Nonnull)paymentInformation completion:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completion;
/// Called after the Apple Pay sheet is dismissed with the result of the payment.
/// Your implementation could stop a spinner and display a receipt view or error to the customer, for example.
/// \param status The status of the payment
///
/// \param error The error that occurred, if any.
///
- (void)applePayContext:(STPApplePayContext * _Nonnull)context didCompleteWithStatus:(enum STPPaymentStatus)status error:(NSError * _Nullable)error;
@optional
/// Called when the user selects a new shipping method.  The delegate should determine
/// shipping costs based on the shipping method and either the shipping address supplied in the original
/// PKPaymentRequest or the address fragment provided by the last call to paymentAuthorizationController:
/// didSelectShippingContact:completion:.
/// You must invoke the completion block with an updated array of PKPaymentSummaryItem objects.
- (void)applePayContext:(STPApplePayContext * _Nonnull)context didSelectShippingMethod:(PKShippingMethod * _Nonnull)shippingMethod handler:(void (^ _Nonnull)(PKPaymentRequestShippingMethodUpdate * _Nonnull))handler;
/// Called when the user has selected a new shipping address.  You should inspect the
/// address and must invoke the completion block with an updated array of PKPaymentSummaryItem objects.
/// @note To maintain privacy, the shipping information is anonymized. For example, in the United States it only includes the city, state, and zip code. This provides enough information to calculate shipping costs, without revealing sensitive information until the user actually approves the purchase.
/// Receive full shipping information in the paymentInformation passed to <code>applePayContext:didCreatePaymentMethod:paymentInformation:completion:</code>
- (void)applePayContext:(STPApplePayContext * _Nonnull)context didSelectShippingContact:(PKContact * _Nonnull)contact handler:(void (^ _Nonnull)(PKPaymentRequestShippingContactUpdate * _Nonnull))handler;
@end

@class STPAppInfo;

/// An Objective-C bridge for STPAPIClient.
/// :nodoc:
SWIFT_CLASS_NAMED("_stpobjc_STPAPIClient")
@interface STPAPIClient : NSObject
/// The current version of this library.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull STPSDKVersion;)
+ (NSString * _Nonnull)STPSDKVersion SWIFT_WARN_UNUSED_RESULT;
/// A shared singleton API client.
/// By default, the SDK uses this instance to make API requests
/// eg in STPPaymentHandler, STPPaymentContext, STPCustomerContext, etc.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) STPAPIClient * _Nonnull sharedClient;)
+ (STPAPIClient * _Nonnull)sharedClient SWIFT_WARN_UNUSED_RESULT;
/// The client’s publishable key.
/// The default value is <code>StripeAPI.defaultPublishableKey</code>.
@property (nonatomic, copy) NSString * _Nullable publishableKey;
/// The client’s configuration.
/// Defaults to <code>STPPaymentConfiguration.shared</code>.
@property (nonatomic, strong) STPPaymentConfiguration * _Nonnull configuration;
/// In order to perform API requests on behalf of a connected account, e.g. to
/// create a Source or Payment Method on a connected account, set this property to the ID of the
/// account for which this request is being made.
/// seealso:
/// https://stripe.com/docs/connect/authentication#authentication-via-the-stripe-account-header
@property (nonatomic, copy) NSString * _Nullable stripeAccount;
/// Libraries wrapping the Stripe SDK should set this, so that Stripe can contact you about future issues or critical updates.
/// seealso:
/// https://stripe.com/docs/building-plugins#setappinfo
@property (nonatomic, strong) STPAppInfo * _Nullable appInfo;
/// The API version used to communicate with Stripe.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull apiVersion;)
+ (NSString * _Nonnull)apiVersion SWIFT_WARN_UNUSED_RESULT;
/// Initializes an API client with the given publishable key.
/// \param publishableKey The publishable key to use.
///
///
/// returns:
/// An instance of STPAPIClient.
- (nonnull instancetype)initWithPublishableKey:(NSString * _Nonnull)publishableKey OBJC_DESIGNATED_INITIALIZER;
/// Initializes an API client with the given configuration.
/// \param configuration The configuration to use.
///
///
/// returns:
/// An instance of STPAPIClient.
- (nonnull instancetype)initWithConfiguration:(STPPaymentConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("This initializer previously configured publishableKey and stripeAccount via the STPPaymentConfiguration instance. This behavior is deprecated; set the STPAPIClient configuration, publishableKey, and stripeAccount properties directly on the STPAPIClient instead.");
/// Converts an STPBankAccount object into a Stripe token using the Stripe API.
/// \param bankAccount The user’s bank account details. Cannot be nil. - seealso: https://stripe.com/docs/api#create_bank_account_token
///
/// \param completion The callback to run with the returned Stripe token (and any errors that may have occurred).
///
- (void)createTokenWithBankAccount:(STPBankAccountParams * _Nonnull)bankAccount completion:(void (^ _Nonnull)(STPToken * _Nullable, NSError * _Nullable))completion;
/// Converts a personal identification number into a Stripe token using the Stripe API.
/// \param pii The user’s personal identification number. Cannot be nil. - seealso: https://stripe.com/docs/api#create_pii_token
///
/// \param completion The callback to run with the returned Stripe token (and any errors that may have occurred).
///
- (void)createTokenWithPersonalIDNumber:(NSString * _Nonnull)pii completion:(void (^ _Nullable)(STPToken * _Nullable, NSError * _Nullable))completion;
/// Converts the last 4 SSN digits into a Stripe token using the Stripe API.
/// \param ssnLast4 The last 4 digits of the user’s SSN. Cannot be nil.
///
/// \param completion The callback to run with the returned Stripe token (and any errors that may have occurred).
///
- (void)createTokenWithSSNLast4:(NSString * _Nonnull)ssnLast4 completion:(void (^ _Nonnull)(STPToken * _Nullable, NSError * _Nullable))completion;
/// Converts an <code>STPConnectAccountParams</code> object into a Stripe token using the Stripe API.
/// This allows the connected account to accept the Terms of Service, and/or send Legal Entity information.
/// \param account The Connect Account parameters. Cannot be nil.
///
/// \param completion The callback to run with the returned Stripe token (and any errors that may have occurred).
///
- (void)createTokenWithConnectAccount:(STPConnectAccountParams * _Nonnull)account completion:(void (^ _Nullable)(STPToken * _Nullable, NSError * _Nullable))completion;
/// Uses the Stripe file upload API to upload an image. This can be used for
/// identity verification and evidence disputes.
/// seealso:
/// https://stripe.com/docs/file-upload
/// \param image The image to be uploaded. The maximum allowed file size is 4MB
/// for identity documents and 8MB for evidence disputes. Cannot be nil.
/// Your image will be automatically resized down if you pass in one that
/// is too large
///
/// \param purpose The purpose of this file. This can be either an identifing
/// document or an evidence dispute.
///
/// \param completion The callback to run with the returned Stripe file
/// (and any errors that may have occurred).
///
- (void)uploadImage:(UIImage * _Nonnull)image purpose:(enum STPFilePurpose)purpose completion:(void (^ _Nullable)(STPFile * _Nullable, NSError * _Nullable))completion;
/// Converts an STPCardParams object into a Stripe token using the Stripe API.
/// \param cardParams The user’s card details. Cannot be nil. - seealso: https://stripe.com/docs/api#create_card_token
///
/// \param completion The callback to run with the returned Stripe token (and any errors that may have occurred).
///
- (void)createTokenWithCard:(STPCardParams * _Nonnull)cardParams completion:(void (^ _Nonnull)(STPToken * _Nullable, NSError * _Nullable))completion;
/// Converts a CVC string into a Stripe token using the Stripe API.
/// \param cvc The CVC/CVV number used to create the token. Cannot be nil.
///
/// \param completion The callback to run with the returned Stripe token (and any errors that may have occurred).
///
- (void)createTokenForCVCUpdate:(NSString * _Nonnull)cvc completion:(void (^ _Nullable)(STPToken * _Nullable, NSError * _Nullable))completion;
/// Creates a Source object using the provided details.
/// Note: in order to create a source on a connected account, you can set your
/// API client’s <code>stripeAccount</code> property to the ID of the account.
/// seealso:
/// https://stripe.com/docs/sources/connect#creating-direct-charges
/// \param sourceParams The details of the source to create. Cannot be nil. - seealso: https://stripe.com/docs/api#create_source
///
/// \param completion The callback to run with the returned Source object, or an error.
///
- (void)createSourceWithParams:(STPSourceParams * _Nonnull)sourceParams completion:(void (^ _Nonnull)(STPSource * _Nullable, NSError * _Nullable))completion;
/// Retrieves the Source object with the given ID. - seealso: https://stripe.com/docs/api#retrieve_source
/// \param identifier The identifier of the source to be retrieved. Cannot be nil.
///
/// \param secret The client secret of the source. Cannot be nil.
///
/// \param completion The callback to run with the returned Source object, or an error.
///
- (void)retrieveSourceWithId:(NSString * _Nonnull)identifier clientSecret:(NSString * _Nonnull)secret completion:(void (^ _Nonnull)(STPSource * _Nullable, NSError * _Nullable))completion;
/// Starts polling the Source object with the given ID. For payment methods that require
/// additional customer action (e.g. authorizing a payment with their bank), polling
/// allows you to determine if the action was successful. Polling will stop and the
/// provided callback will be called once the source’s status is no longer <code>pending</code>,
/// or if the given timeout is reached and the source is still <code>pending</code>. If polling
/// stops due to an error, the callback will be fired with the latest retrieved
/// source and the error.
/// Note that if a poll is already running for a source, subsequent calls to <code>startPolling</code>
/// with the same source ID will do nothing.
/// \param identifier The identifier of the source to be retrieved. Cannot be nil.
///
/// \param secret The client secret of the source. Cannot be nil.
///
/// \param timeout The timeout for the polling operation, in seconds. Timeouts are capped at 5 minutes.
///
/// \param completion The callback to run with the returned Source object, or an error.
///
- (void)startPollingSourceWithId:(NSString * _Nonnull)identifier clientSecret:(NSString * _Nonnull)secret timeout:(NSTimeInterval)timeout completion:(void (^ _Nonnull)(STPSource * _Nullable, NSError * _Nullable))completion SWIFT_AVAILABILITY(maccatalyst_app_extension,unavailable) SWIFT_AVAILABILITY(ios_app_extension,unavailable);
/// Stops polling the Source object with the given ID. Note that the completion block passed to
/// <code>startPolling</code> will not be fired when <code>stopPolling</code> is called.
/// \param identifier The identifier of the source to be retrieved. Cannot be nil.
///
- (void)stopPollingSourceWithId:(NSString * _Nonnull)identifier SWIFT_AVAILABILITY(maccatalyst_app_extension,unavailable) SWIFT_AVAILABILITY(ios_app_extension,unavailable);
/// Retrieves the PaymentIntent object using the given secret. - seealso: https://stripe.com/docs/api#retrieve_payment_intent
/// \param secret The client secret of the payment intent to be retrieved. Cannot be nil.
///
/// \param completion The callback to run with the returned PaymentIntent object, or an error.
///
- (void)retrievePaymentIntentWithClientSecret:(NSString * _Nonnull)secret completion:(void (^ _Nonnull)(STPPaymentIntent * _Nullable, NSError * _Nullable))completion;
/// Retrieves the PaymentIntent object using the given secret. - seealso: https://stripe.com/docs/api#retrieve_payment_intent
/// \param secret The client secret of the payment intent to be retrieved. Cannot be nil.
///
/// \param expand An array of string keys to expand on the returned PaymentIntent object. These strings should match one or more of the parameter names that are marked as expandable. - seealso: https://stripe.com/docs/api/payment_intents/object
///
/// \param completion The callback to run with the returned PaymentIntent object, or an error.
///
- (void)retrievePaymentIntentWithClientSecret:(NSString * _Nonnull)secret expand:(NSArray<NSString *> * _Nullable)expand completion:(void (^ _Nonnull)(STPPaymentIntent * _Nullable, NSError * _Nullable))completion;
/// Confirms the PaymentIntent object with the provided params object.
/// At a minimum, the params object must include the <code>clientSecret</code>.
/// seealso:
/// https://stripe.com/docs/api#confirm_payment_intent
/// @note Use the <code>confirmPayment:withAuthenticationContext:completion:</code> method on <code>STPPaymentHandler</code> instead
/// of calling this method directly. It handles any authentication necessary for you. - seealso: https://stripe.com/docs/mobile/ios/authentication
/// \param paymentIntentParams The <code>STPPaymentIntentParams</code> to pass to <code>/confirm</code>
///
/// \param completion The callback to run with the returned PaymentIntent object, or an error.
///
- (void)confirmPaymentIntentWithParams:(STPPaymentIntentParams * _Nonnull)paymentIntentParams completion:(void (^ _Nonnull)(STPPaymentIntent * _Nullable, NSError * _Nullable))completion;
/// Confirms the PaymentIntent object with the provided params object.
/// At a minimum, the params object must include the <code>clientSecret</code>.
/// seealso:
/// https://stripe.com/docs/api#confirm_payment_intent
/// @note Use the <code>confirmPayment:withAuthenticationContext:completion:</code> method on <code>STPPaymentHandler</code> instead
/// of calling this method directly. It handles any authentication necessary for you. - seealso: https://stripe.com/docs/mobile/ios/authentication
/// \param paymentIntentParams The <code>STPPaymentIntentParams</code> to pass to <code>/confirm</code>
///
/// \param expand An array of string keys to expand on the returned PaymentIntent object. These strings should match one or more of the parameter names that are marked as expandable. - seealso: https://stripe.com/docs/api/payment_intents/object
///
/// \param completion The callback to run with the returned PaymentIntent object, or an error.
///
- (void)confirmPaymentIntentWithParams:(STPPaymentIntentParams * _Nonnull)paymentIntentParams expand:(NSArray<NSString *> * _Nullable)expand completion:(void (^ _Nonnull)(STPPaymentIntent * _Nullable, NSError * _Nullable))completion;
/// Retrieves the SetupIntent object using the given secret. - seealso: https://stripe.com/docs/api/setup_intents/retrieve
/// \param secret The client secret of the SetupIntent to be retrieved. Cannot be nil.
///
/// \param completion The callback to run with the returned SetupIntent object, or an error.
///
- (void)retrieveSetupIntentWithClientSecret:(NSString * _Nonnull)secret completion:(void (^ _Nonnull)(STPSetupIntent * _Nullable, NSError * _Nullable))completion;
/// Confirms the SetupIntent object with the provided params object.
/// At a minimum, the params object must include the <code>clientSecret</code>.
/// seealso:
/// https://stripe.com/docs/api/setup_intents/confirm
/// @note Use the <code>confirmSetupIntent:withAuthenticationContext:completion:</code> method on <code>STPPaymentHandler</code> instead
/// of calling this method directly. It handles any authentication necessary for you. - seealso: https://stripe.com/docs/mobile/ios/authentication
/// \param setupIntentParams The <code>STPSetupIntentConfirmParams</code> to pass to <code>/confirm</code>
///
/// \param completion The callback to run with the returned PaymentIntent object, or an error.
///
- (void)confirmSetupIntentWithParams:(STPSetupIntentConfirmParams * _Nonnull)setupIntentParams completion:(void (^ _Nonnull)(STPSetupIntent * _Nullable, NSError * _Nullable))completion;
/// Creates a PaymentMethod object with the provided params object.
/// seealso:
/// https://stripe.com/docs/api/payment_methods/create
/// \param paymentMethodParams The <code>STPPaymentMethodParams</code> to pass to <code>/v1/payment_methods</code>.  Cannot be nil.
///
/// \param completion The callback to run with the returned PaymentMethod object, or an error.
///
- (void)createPaymentMethodWithParams:(STPPaymentMethodParams * _Nonnull)paymentMethodParams completion:(void (^ _Nonnull)(STPPaymentMethod * _Nullable, NSError * _Nullable))completion;
/// Creates a Radar Session.
/// note:
/// See https://stripe.com/docs/radar/radar-session
/// note:
/// This API and the guide linked above require special permissions to use. Contact support@stripe.com.
/// note:
/// <code>StripeAPI.advancedFraudSignalsEnabled</code> must be <code>true</code> to use this method.
/// note:
/// See <code>STPRadarSession</code>
/// \param completion The callback to run with the returned <code>STPRadarSession</code> (and any errors that may have occurred).
///
- (void)createRadarSessionWithCompletion:(void (^ _Nonnull)(STPRadarSession * _Nullable, NSError * _Nullable))completion;
/// Converts a PKPayment object into a Stripe token using the Stripe API.
/// \param payment The user’s encrypted payment information as returned from a PKPaymentAuthorizationController. Cannot be nil.
///
/// \param completion The callback to run with the returned Stripe token (and any errors that may have occurred).
///
- (void)createTokenWithPayment:(PKPayment * _Nonnull)payment completion:(void (^ _Nonnull)(STPToken * _Nullable, NSError * _Nullable))completion;
/// Converts a PKPayment object into a Stripe source using the Stripe API.
/// \param payment The user’s encrypted payment information as returned from a PKPaymentAuthorizationController. Cannot be nil.
///
/// \param completion The callback to run with the returned Stripe source (and any errors that may have occurred).
///
- (void)createSourceWithPayment:(PKPayment * _Nonnull)payment completion:(void (^ _Nonnull)(STPSource * _Nullable, NSError * _Nullable))completion;
/// Converts a PKPayment object into a Stripe Payment Method using the Stripe API.
/// \param payment The user’s encrypted payment information as returned from a PKPaymentAuthorizationController. Cannot be nil.
///
/// \param completion The callback to run with the returned Stripe source (and any errors that may have occurred).
///
- (void)createPaymentMethodWithPayment:(PKPayment * _Nonnull)payment completion:(void (^ _Nonnull)(STPPaymentMethod * _Nullable, NSError * _Nullable))completion;
/// Converts Stripe errors into the appropriate Apple Pay error, for use in <code>PKPaymentAuthorizationResult</code>.
/// If the error can be fixed by the customer within the Apple Pay sheet, we return an NSError that can be displayed in the Apple Pay sheet.
/// Otherwise, the original error is returned, resulting in the Apple Pay sheet being dismissed. You should display the error message to the customer afterwards.
/// Currently, we convert billing address related errors into a PKPaymentError that helpfully points to the billing address field in the Apple Pay sheet.
/// Note that Apple Pay should prevent most card errors (e.g. invalid CVC, expired cards) when you add a card to the wallet.
/// \param stripeError An error from the Stripe SDK.
///
+ (NSError * _Nullable)pkPaymentErrorForStripeError:(NSError * _Nullable)stripeError SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Libraries wrapping the Stripe SDK should use this object to provide information about the library, and set it
/// in on <code>STPAPIClient</code>.  This information is passed to Stripe so that we can contact you about future issues or critical updates.
/// seealso:
/// https://stripe.com/docs/building-plugins#setappinfo
/// :nodoc:
SWIFT_CLASS_NAMED("_stpobjc_STPAppInfo")
@interface STPAppInfo : NSObject
/// Initializes an instance of <code>STPAppInfo</code>.
/// \param name The name of your library (e.g. “MyAwesomeLibrary”).
///
/// \param partnerId Your Stripe Partner ID (e.g. “pp_partner_1234”). Required for Stripe Verified Partners, optional otherwise.
///
/// \param version The version of your library (e.g. “1.2.34”). Optional.
///
/// \param url The website for your library (e.g. “https://myawesomelibrary.info”). Optional.
///
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name partnerId:(NSString * _Nullable)partnerId version:(NSString * _Nullable)version url:(NSString * _Nullable)url OBJC_DESIGNATED_INITIALIZER;
/// The name of your library (e.g. “MyAwesomeLibrary”).
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Your Stripe Partner ID (e.g. “pp_partner_1234”).
@property (nonatomic, readonly, copy) NSString * _Nullable partnerId;
/// The version of your library (e.g. “1.2.34”).
@property (nonatomic, readonly, copy) NSString * _Nullable version;
/// The website for your library (e.g. “https://myawesomelibrary.info”).
@property (nonatomic, readonly, copy) NSString * _Nullable url;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
/// Top-level class for Stripe error constants.
SWIFT_CLASS_NAMED("_stpobjc_STPError")
@interface STPError : NSObject
/// All Stripe iOS errors will be under this domain.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull stripeDomain;)
+ (NSString * _Nonnull)stripeDomain SWIFT_WARN_UNUSED_RESULT;
/// A human-readable message providing more details about the error.
/// For card errors, these messages can be shown to your users.
/// seealso:
/// https://stripe.com/docs/api/errors#errors-message
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorMessageKey;)
+ (NSString * _Nonnull)errorMessageKey SWIFT_WARN_UNUSED_RESULT;
/// An SDK-supplied “hint” that is intended to help you, the developer, fix the error
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull hintKey;)
+ (NSString * _Nonnull)hintKey SWIFT_WARN_UNUSED_RESULT;
/// What went wrong with your STPCard (e.g., STPInvalidCVC. See below for full list).
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull cardErrorCodeKey;)
+ (NSString * _Nonnull)cardErrorCodeKey SWIFT_WARN_UNUSED_RESULT;
/// Which parameter on the STPCard had an error (e.g., “cvc”). Useful for marking up the
/// right UI element.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorParameterKey;)
+ (NSString * _Nonnull)errorParameterKey SWIFT_WARN_UNUSED_RESULT;
/// The error code returned by the Stripe API.
/// seealso:
/// https://stripe.com/docs/api#errors-code
/// seealso:
/// https://stripe.com/docs/error-codes
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull stripeErrorCodeKey;)
+ (NSString * _Nonnull)stripeErrorCodeKey SWIFT_WARN_UNUSED_RESULT;
/// The error type returned by the Stripe API.
/// seealso:
/// https://stripe.com/docs/api#errors-type
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull stripeErrorTypeKey;)
+ (NSString * _Nonnull)stripeErrorTypeKey SWIFT_WARN_UNUSED_RESULT;
/// If the value of <code>userInfo[stripeErrorCodeKey]</code> is <code>STPError.cardDeclined</code>,
/// the value for this key contains the decline code.
/// seealso:
/// https://stripe.com/docs/declines/codes
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull stripeDeclineCodeKey;)
+ (NSString * _Nonnull)stripeDeclineCodeKey SWIFT_WARN_UNUSED_RESULT;
/// The card number is not a valid credit card number.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull invalidNumber;)
+ (NSString * _Nonnull)invalidNumber SWIFT_WARN_UNUSED_RESULT;
/// The card has an invalid expiration month.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull invalidExpMonth;)
+ (NSString * _Nonnull)invalidExpMonth SWIFT_WARN_UNUSED_RESULT;
/// The card has an invalid expiration year.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull invalidExpYear;)
+ (NSString * _Nonnull)invalidExpYear SWIFT_WARN_UNUSED_RESULT;
/// The card has an invalid CVC.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull invalidCVC;)
+ (NSString * _Nonnull)invalidCVC SWIFT_WARN_UNUSED_RESULT;
/// The card number is incorrect.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull incorrectNumber;)
+ (NSString * _Nonnull)incorrectNumber SWIFT_WARN_UNUSED_RESULT;
/// The card is expired.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull expiredCard;)
+ (NSString * _Nonnull)expiredCard SWIFT_WARN_UNUSED_RESULT;
/// The card was declined.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull cardDeclined;)
+ (NSString * _Nonnull)cardDeclined SWIFT_WARN_UNUSED_RESULT;
/// An error occured while processing this card.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull processingError;)
+ (NSString * _Nonnull)processingError SWIFT_WARN_UNUSED_RESULT;
/// The card has an incorrect CVC.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull incorrectCVC;)
+ (NSString * _Nonnull)incorrectCVC SWIFT_WARN_UNUSED_RESULT;
/// The postal code is incorrect.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull incorrectZip;)
+ (NSString * _Nonnull)incorrectZip SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// :nodoc:
/// Possible error code values for NSErrors with the <code>StripeDomain</code> domain
typedef SWIFT_ENUM_NAMED(NSInteger, STPErrorCode, "_stpobjc_STPErrorCode", open) {
/// Trouble connecting to Stripe.
  STPConnectionError SWIFT_COMPILE_NAME("connectionError") = 40,
/// Your request had invalid parameters.
  STPInvalidRequestError SWIFT_COMPILE_NAME("invalidRequestError") = 50,
/// No valid publishable API key provided.
  STPAuthenticationError SWIFT_COMPILE_NAME("authenticationError") = 51,
/// General-purpose API error.
  STPAPIError SWIFT_COMPILE_NAME("apiError") = 60,
/// Something was wrong with the given card details.
  STPCardError SWIFT_COMPILE_NAME("cardError") = 70,
/// The operation was cancelled.
  STPCancellationError SWIFT_COMPILE_NAME("cancellationError") = 80,
/// The ephemeral key could not be decoded. Make sure your backend is sending
/// the unmodified JSON of the ephemeral key to your app.
/// https://stripe.com/docs/mobile/ios/standard#prepare-your-api
  STPEphemeralKeyDecodingError SWIFT_COMPILE_NAME("ephemeralKeyDecodingError") = 1000,
};


/// A top-level class that imports the rest of the Stripe SDK.
/// :nodoc:
SWIFT_CLASS_NAMED("_stpobjc_StripeAPI")
@interface StripeAPI : NSObject
/// Set this to your Stripe publishable API key, obtained from https://dashboard.stripe.com/apikeys.
/// Set this as early as possible in your application’s lifecycle, preferably in your AppDelegate or SceneDelegate.
/// New instances of STPAPIClient will be initialized with this value.
/// @warning Make sure not to ship your test API keys to the App Store! This will log a warning if you use your test key in a release build.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable defaultPublishableKey;)
+ (NSString * _Nullable)defaultPublishableKey SWIFT_WARN_UNUSED_RESULT;
+ (void)setDefaultPublishableKey:(NSString * _Nullable)newValue;
/// A Boolean value that determines whether additional device data is sent to Stripe for fraud prevention.
/// If YES, additional device signals will be sent to Stripe.
/// For more details on the information we collect, visit https://stripe.com/docs/disputes/prevention/advanced-fraud-detection
/// Disabling this setting will reduce Stripe’s ability to protect your business from fraudulent payments.
/// The default value is YES.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL advancedFraudSignalsEnabled;)
+ (BOOL)advancedFraudSignalsEnabled SWIFT_WARN_UNUSED_RESULT;
+ (void)setAdvancedFraudSignalsEnabled:(BOOL)newValue;
/// If the SDK receives a “Too Many Requests” (429) status code from Stripe,
/// it will automatically retry the request.
/// The default value is 3.
/// See https://stripe.com/docs/rate-limits for more information.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSInteger maxRetries;)
+ (NSInteger)maxRetries SWIFT_WARN_UNUSED_RESULT;
+ (void)setMaxRetries:(NSInteger)newValue;
/// Call this method in your app delegate whenever you receive an URL in your
/// app delegate for a Stripe callback.
/// For convenience, you can pass all URL’s you receive in your app delegate
/// to this method first, and check the return value
/// to easily determine whether it is a callback URL that Stripe will handle
/// or if your app should process it normally.
/// If you are using a universal link URL, you will receive the callback in <code>application:continueUserActivity:restorationHandler:</code>
/// To learn more about universal links, see https://developer.apple.com/library/content/documentation/General/Conceptual/AppSearch/UniversalLinks.html
/// If you are using a native scheme URL, you will receive the callback in <code>application:openURL:options:</code>
/// To learn more about native url schemes, see https://developer.apple.com/library/content/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/Inter-AppCommunication/Inter-AppCommunication.html#//apple_ref/doc/uid/TP40007072-CH6-SW10
/// \param url The URL that you received in your app delegate
///
///
/// returns:
/// YES if the URL is expected and will be handled by Stripe. NO otherwise.
+ (BOOL)handleStripeURLCallbackWithURL:(NSURL * _Nonnull)url;
/// Japanese users can enable JCB for Apple Pay by setting this to <code>YES</code>, after they have been approved by JCB.
/// The default value is NO.
/// @note JCB is only supported on iOS 10.1+
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL jcbPaymentNetworkSupported;)
+ (BOOL)jcbPaymentNetworkSupported SWIFT_WARN_UNUSED_RESULT;
+ (void)setJcbPaymentNetworkSupported:(BOOL)newValue;
/// The SDK accepts Amex, Mastercard, Visa, and Discover for Apple Pay.
/// Set this property to enable other card networks in addition to these.
/// For example, <code>additionalEnabledApplePayNetworks = [.JCB]</code> enables JCB (note this requires onboarding from JCB and Stripe).
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSArray<PKPaymentNetwork> * _Nonnull additionalEnabledApplePayNetworks;)
+ (NSArray<PKPaymentNetwork> * _Nonnull)additionalEnabledApplePayNetworks SWIFT_WARN_UNUSED_RESULT;
+ (void)setAdditionalEnabledApplePayNetworks:(NSArray<PKPaymentNetwork> * _Nonnull)newValue;
/// Whether or not this device is capable of using Apple Pay. This checks both
/// whether the device supports Apple Pay, as well as whether or not they have
/// stored Apple Pay cards on their device.
/// \param paymentRequest The return value of this method depends on the
/// <code>supportedNetworks</code> property of this payment request, which by default should be
/// <code>[.amex, .masterCard, .visa, .discover]</code>.
///
///
/// returns:
/// whether or not the user is currently able to pay with Apple Pay.
+ (BOOL)canSubmitPaymentRequest:(PKPaymentRequest * _Nonnull)paymentRequest SWIFT_WARN_UNUSED_RESULT;
/// Whether or not this can make Apple Pay payments via a card network supported
/// by Stripe.
/// The Stripe supported Apple Pay card networks are:
/// American Express, Visa, Mastercard, Discover, Maestro.
/// Japanese users can enable JCB by setting <code>JCBPaymentNetworkSupported</code> to YES,
/// after they have been approved by JCB.
///
/// returns:
/// YES if the device is currently able to make Apple Pay payments via one
/// of the supported networks. NO if the user does not have a saved card of a
/// supported type, or other restrictions prevent payment (such as parental controls).
+ (BOOL)deviceSupportsApplePay SWIFT_WARN_UNUSED_RESULT;
/// A convenience method to build a <code>PKPaymentRequest</code> with sane default values.
/// You will still need to configure the <code>paymentSummaryItems</code> property to indicate
/// what the user is purchasing, as well as the optional <code>requiredShippingAddressFields</code>,
/// <code>requiredBillingAddressFields</code>, and <code>shippingMethods</code> properties to indicate
/// what contact information your application requires.
/// Note that this method sets the payment request’s countryCode to “US” and its
/// currencyCode to “USD”.
/// \param merchantIdentifier Your Apple Merchant ID.
///
///
/// returns:
/// a <code>PKPaymentRequest</code> with proper default values. Returns nil if running on < iOS8.
/// @deprecated Use <code>paymentRequestWithMerchantIdentifier:country:currency:</code> instead.
/// Apple Pay is available in many countries and currencies, and you should use
/// the appropriate values for your business.
+ (PKPaymentRequest * _Nonnull)paymentRequestWithMerchantIdentifier:(NSString * _Nonnull)merchantIdentifier SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use `paymentRequestWithMerchantIdentifier:country:currency:` instead.");
/// A convenience method to build a <code>PKPaymentRequest</code> with sane default values.
/// You will still need to configure the <code>paymentSummaryItems</code> property to indicate
/// what the user is purchasing, as well as the optional <code>requiredShippingContactFields</code>,
/// <code>requiredBillingContactFields</code>, and <code>shippingMethods</code> properties to indicate
/// what additional contact information your application requires.
/// \param merchantIdentifier Your Apple Merchant ID.
///
/// \param countryCode The two-letter code for the country where the payment
/// will be processed. This should be the country of your Stripe account.
///
/// \param currencyCode The three-letter code for the currency used by this
/// payment request. Apple Pay interprets the amounts provided by the summary items
/// attached to this request as amounts in this currency.
///
///
/// returns:
/// a <code>PKPaymentRequest</code> with proper default values.
+ (PKPaymentRequest * _Nonnull)paymentRequestWithMerchantIdentifier:(NSString * _Nonnull)merchantIdentifier country:(NSString * _Nonnull)countryCode currency:(NSString * _Nonnull)currencyCode SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
